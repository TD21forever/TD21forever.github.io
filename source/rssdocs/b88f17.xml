<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title>宝玉 / @dotey</title>
        <link>https://nitter.cz/dotey</link>
        
        <item>
            <id>https://nitter.cz/dotey/status/1748505019458953369#m</id>
            <title>R to @dotey: 它的输出格式采用的是YAML而不是JSON，两个原因：
1. Token更少
2. 更容易解析，容错率更高</title>
            <link>https://nitter.cz/dotey/status/1748505019458953369#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1748505019458953369#m</guid>
            <pubDate></pubDate>
            <updated>Sat, 20 Jan 2024 00:37:36 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>它的输出格式采用的是YAML而不是JSON，两个原因：<br />
1. Token更少<br />
2. 更容易解析，容错率更高</p>
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0VQd0NyclhZQUFRMGMtLmpwZw==" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1748504043872227677#m</id>
            <title>R to @dotey: AlphaCodium的流程图参考

项目源码：https://github.com/Codium-ai/AlphaCodium/
Prompt和运行结果参考：https://github.com/Codium-ai/AlphaCodium/blob/main/alpha_codium/gen/example.log</title>
            <link>https://nitter.cz/dotey/status/1748504043872227677#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1748504043872227677#m</guid>
            <pubDate></pubDate>
            <updated>Sat, 20 Jan 2024 00:33:44 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>AlphaCodium的流程图参考<br />
<br />
项目源码：<a href="https://github.com/Codium-ai/AlphaCodium/">github.com/Codium-ai/AlphaCo…</a><br />
Prompt和运行结果参考：<a href="https://github.com/Codium-ai/AlphaCodium/blob/main/alpha_codium/gen/example.log">github.com/Codium-ai/AlphaCo…</a></p>
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0VQdkdWc1gwQUFVRi1BLmpwZw==" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1748503587682967775#m</id>
            <title>这两天看到的收获很大的一篇论文《AlphaCodium：引领代码生成新境界，从提示工程到流程工程》，它提出了一种新的生成代码的方法，比传统的直接基于Prompt生成代码的方式准确率更高。

它用的测试集是CodeContests ，这是由 Deepmind 推出的一项挑战性编程数据集。相对来说还是很权威的。以 GPT-4 为例的话，准确率从19%提升到了44%。

它的原理有些复杂，但是如果你有过LeetCode刷题经验，相对比较好理解一些。

普通人刷 LeetCode，上来就做，这样有可能得到答案，也有可能做不出来，这就类似于你把题目直接丢给GPT-4，让它直接给出答案，准确率相对要低一些。

高手刷LeetCode，会有个做题的流程，同样的水平，做出来的概率会大一些。
高手做题时会大概分成几个步骤：
1. 先把题目中的要点一条条列出来，确保不会遗漏任何重要信息
2. 通常LeetCode会提供 1 个或多个测试用例，仔细看测试用例，分析为什么给定的输入能得到给定的输出
3. 在写代码前，列出几种可能的解决方案，例如暴力算法、递归、动态规划，每一种方案写下思路和伪代码
4. 对于列出来的几种方案进行评估，选出最佳方案
5. 可能还会补充一些测试用例帮助事后验证
---
以下部分是迭代过程：
6. 根据选中的解决方案写代码，如果代码不能运行则修改代码直至能运行
7. 将代码提交到LeetCode的测试集去验证，如果无法通过所有测试，则修改错误，如果通过到第8步
8. 用第 5 步生成的测试用例验证代码，如果运行不通过则继续优化代码

这里留个思考题：如果第8步出错，怎么判断是代码有问题还是自己生成的测试用例有问题？

而 AlphaCodium 就是完美遵循了以上的步骤来解题，只不过每一步都是由大语言模型帮助完成！

这给了我一些启示：
1. 不必寄希望于将复杂的任务在一个 Prompt 中完成，拆分成若干子任务成功概率会高一些
2. AI 可以借鉴人类的优秀实践，例如高手是如何解决编程难题的，让 AI 按照高手的步骤去一步步做
3. AI 的潜力还有很大挖掘空间

完整的文章参考：https://www.codium.ai/blog/alphacodium-state-of-the-art-code-generation-for-code-contests/
中文译文：https://baoyu.io/translations/prompt-engineering/alphacodium-state-of-the-art-code-generation-for-code-contests</title>
            <link>https://nitter.cz/dotey/status/1748503587682967775#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1748503587682967775#m</guid>
            <pubDate></pubDate>
            <updated>Sat, 20 Jan 2024 00:31:55 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>这两天看到的收获很大的一篇论文《AlphaCodium：引领代码生成新境界，从提示工程到流程工程》，它提出了一种新的生成代码的方法，比传统的直接基于Prompt生成代码的方式准确率更高。<br />
<br />
它用的测试集是CodeContests ，这是由 Deepmind 推出的一项挑战性编程数据集。相对来说还是很权威的。以 GPT-4 为例的话，准确率从19%提升到了44%。<br />
<br />
它的原理有些复杂，但是如果你有过LeetCode刷题经验，相对比较好理解一些。<br />
<br />
普通人刷 LeetCode，上来就做，这样有可能得到答案，也有可能做不出来，这就类似于你把题目直接丢给GPT-4，让它直接给出答案，准确率相对要低一些。<br />
<br />
高手刷LeetCode，会有个做题的流程，同样的水平，做出来的概率会大一些。<br />
高手做题时会大概分成几个步骤：<br />
1. 先把题目中的要点一条条列出来，确保不会遗漏任何重要信息<br />
2. 通常LeetCode会提供 1 个或多个测试用例，仔细看测试用例，分析为什么给定的输入能得到给定的输出<br />
3. 在写代码前，列出几种可能的解决方案，例如暴力算法、递归、动态规划，每一种方案写下思路和伪代码<br />
4. 对于列出来的几种方案进行评估，选出最佳方案<br />
5. 可能还会补充一些测试用例帮助事后验证<br />
---<br />
以下部分是迭代过程：<br />
6. 根据选中的解决方案写代码，如果代码不能运行则修改代码直至能运行<br />
7. 将代码提交到LeetCode的测试集去验证，如果无法通过所有测试，则修改错误，如果通过到第8步<br />
8. 用第 5 步生成的测试用例验证代码，如果运行不通过则继续优化代码<br />
<br />
这里留个思考题：如果第8步出错，怎么判断是代码有问题还是自己生成的测试用例有问题？<br />
<br />
而 AlphaCodium 就是完美遵循了以上的步骤来解题，只不过每一步都是由大语言模型帮助完成！<br />
<br />
这给了我一些启示：<br />
1. 不必寄希望于将复杂的任务在一个 Prompt 中完成，拆分成若干子任务成功概率会高一些<br />
2. AI 可以借鉴人类的优秀实践，例如高手是如何解决编程难题的，让 AI 按照高手的步骤去一步步做<br />
3. AI 的潜力还有很大挖掘空间<br />
<br />
完整的文章参考：<a href="https://www.codium.ai/blog/alphacodium-state-of-the-art-code-generation-for-code-contests/">codium.ai/blog/alphacodium-s…</a><br />
中文译文：<a href="https://baoyu.io/translations/prompt-engineering/alphacodium-state-of-the-art-code-generation-for-code-contests">baoyu.io/translations/prompt…</a></p>
<p><a href="https://nitter.cz/itamar_mar/status/1747957348293824676#m">nitter.cz/itamar_mar/status/1747957348293824676#m</a></p>
<img src="https://nitter.cz/pic/enc/ZXh0X3R3X3ZpZGVvX3RodW1iLzE3NDg0OTMwODk1ODc1NzI3MzYvcHUvaW1nLzFCTkh3UjBnbElOV0Q3cUEuanBn" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/Svwang1/status/1748481581365506070#m</id>
            <title>RT by @dotey: mailchimp 2009年之前一直利润微薄，苦苦挣扎，它的转折点是 2010年，把对客户的定价改为部分免费，超过一定使用量之后才收费。当年利润增加了六倍多。2010到 2021年收入增长了 500 倍，达到每年十亿美元。免费用户起到了给其平台宣传，帮助其增长的重要作用。</title>
            <link>https://nitter.cz/Svwang1/status/1748481581365506070#m</link>
            <guid isPermaLink="false">https://nitter.cz/Svwang1/status/1748481581365506070#m</guid>
            <pubDate></pubDate>
            <updated>Fri, 19 Jan 2024 23:04:28 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>mailchimp 2009年之前一直利润微薄，苦苦挣扎，它的转折点是 2010年，把对客户的定价改为部分免费，超过一定使用量之后才收费。当年利润增加了六倍多。2010到 2021年收入增长了 500 倍，达到每年十亿美元。免费用户起到了给其平台宣传，帮助其增长的重要作用。</p>
<p><a href="https://nitter.cz/jspujji/status/1748338963599839549#m">nitter.cz/jspujji/status/1748338963599839549#m</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/xiaohuggg/status/1748295530382528713#m</id>
            <title>RT by @dotey: 微软推出针对学生的AI阅读教练工具：Reading Coach

你可以选择角色和设定，创建独特的AI生成故事。通过AI驱动的故事和个性化练习吸引学生阅读并提高阅读流畅度。

当你阅读时，语音转文本AI分析阅读流利性，检测学习者挑战的词汇，并记录阅读的准确性、速度和时间。

用来改进你的阅读和语音语法问题。

以下是其主要功能：

1、个性化阅读练习：提供个性化、有趣、一致且独立的阅读流利性练习。

2、AI生成故事：学习者可以选择角色和设定，创建独特的AI生成故事。故事内容经过内容质量、安全性和适龄性的审核，符合Microsoft的负责任AI指南。

3、沉浸式阅读器：对有阅读障碍（如诵读困难）的学习者，内置的沉浸式阅读器提供支持。

4、即时反馈：阅读时，语音转文本AI分析阅读流利性，检测学习者挑战的词汇，并记录阅读的准确性、速度和时间。

5、互动性阅读：学习者在故事章节中做出选择，通过故事导航自己的阅读旅程。上一章节中挑战的词汇会自动纳入下一章节，实现即时适应性练习。

6、流利性教练：在每个故事章节后，提供针对挑战词汇的流利性指导。

7、激励机制：通过努力为中心的徽章，解锁新角色和设定，以保持学习者的阅读动力。

🔗：https://coach.microsoft.com/</title>
            <link>https://nitter.cz/xiaohuggg/status/1748295530382528713#m</link>
            <guid isPermaLink="false">https://nitter.cz/xiaohuggg/status/1748295530382528713#m</guid>
            <pubDate></pubDate>
            <updated>Fri, 19 Jan 2024 10:45:10 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>微软推出针对学生的AI阅读教练工具：Reading Coach<br />
<br />
你可以选择角色和设定，创建独特的AI生成故事。通过AI驱动的故事和个性化练习吸引学生阅读并提高阅读流畅度。<br />
<br />
当你阅读时，语音转文本AI分析阅读流利性，检测学习者挑战的词汇，并记录阅读的准确性、速度和时间。<br />
<br />
用来改进你的阅读和语音语法问题。<br />
<br />
以下是其主要功能：<br />
<br />
1、个性化阅读练习：提供个性化、有趣、一致且独立的阅读流利性练习。<br />
<br />
2、AI生成故事：学习者可以选择角色和设定，创建独特的AI生成故事。故事内容经过内容质量、安全性和适龄性的审核，符合Microsoft的负责任AI指南。<br />
<br />
3、沉浸式阅读器：对有阅读障碍（如诵读困难）的学习者，内置的沉浸式阅读器提供支持。<br />
<br />
4、即时反馈：阅读时，语音转文本AI分析阅读流利性，检测学习者挑战的词汇，并记录阅读的准确性、速度和时间。<br />
<br />
5、互动性阅读：学习者在故事章节中做出选择，通过故事导航自己的阅读旅程。上一章节中挑战的词汇会自动纳入下一章节，实现即时适应性练习。<br />
<br />
6、流利性教练：在每个故事章节后，提供针对挑战词汇的流利性指导。<br />
<br />
7、激励机制：通过努力为中心的徽章，解锁新角色和设定，以保持学习者的阅读动力。<br />
<br />
🔗：<a href="https://coach.microsoft.com/">coach.microsoft.com/</a></p>
<img src="https://nitter.cz/pic/enc/ZXh0X3R3X3ZpZGVvX3RodW1iLzE3NDgyMDg4MzQ2ODA4NTI0ODAvcHUvaW1nL0lMS3k2WnkzbHVZejhPMmcuanBn" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/Gorden_Sun/status/1748208676920594543#m</id>
            <title>RT by @dotey: 来了！
实测GPT-SoVITS中文效果确实很好，只需要2分钟的样本训练，就能实现克隆音色（语速、情感等需要更长样本才能训练好），比XTTS更稳定更逼真（XTTS只通过8秒音频来克隆音色）
tinyfool的脸面太大（字面含义），我常用的嘴型匹配覆盖不了这么大面积，会有黑边，换了个稍微差点的方案。</title>
            <link>https://nitter.cz/Gorden_Sun/status/1748208676920594543#m</link>
            <guid isPermaLink="false">https://nitter.cz/Gorden_Sun/status/1748208676920594543#m</guid>
            <pubDate></pubDate>
            <updated>Fri, 19 Jan 2024 05:00:03 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>来了！<br />
实测GPT-SoVITS中文效果确实很好，只需要2分钟的样本训练，就能实现克隆音色（语速、情感等需要更长样本才能训练好），比XTTS更稳定更逼真（XTTS只通过8秒音频来克隆音色）<br />
tinyfool的脸面太大（字面含义），我常用的嘴型匹配覆盖不了这么大面积，会有黑边，换了个稍微差点的方案。</p>
<p><a href="https://nitter.cz/huangyun_122/status/1747629775558938998#m">nitter.cz/huangyun_122/status/1747629775558938998#m</a></p>
<img src="https://nitter.cz/pic/enc/ZXh0X3R3X3ZpZGVvX3RodW1iLzE3NDgyMDg2MzA1MTA1NDI4NDgvcHUvaW1nL2xZaVpJRWlGLUxHZGJRZG8uanBn" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/HiTw93/status/1748132914372477126#m</id>
            <title>RT by @dotey: #工程师工具 发现一个做得很精致的免费开源简历生成器，可以把很好通过表单填写生成一份精致的简历，包括编辑、以及共享给其他人的查看，很潮流，会比纯粹Word简历方便不少，有需要的小伙伴可以试试，假如你是前端或Java正在找工作，也可以用这个工具生成简历以后发给我～
🤖 https://rxresu.me/</title>
            <link>https://nitter.cz/HiTw93/status/1748132914372477126#m</link>
            <guid isPermaLink="false">https://nitter.cz/HiTw93/status/1748132914372477126#m</guid>
            <pubDate></pubDate>
            <updated>Thu, 18 Jan 2024 23:59:00 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p><a href="https://nitter.cz/search?q=%23工程师工具">#工程师工具</a> 发现一个做得很精致的免费开源简历生成器，可以把很好通过表单填写生成一份精致的简历，包括编辑、以及共享给其他人的查看，很潮流，会比纯粹Word简历方便不少，有需要的小伙伴可以试试，假如你是前端或Java正在找工作，也可以用这个工具生成简历以后发给我～<br />
🤖 <a href="https://rxresu.me/">rxresu.me/</a></p>
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0VLQW53Z2FjQUFIb3d2LmpwZw==" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/xiaohuggg/status/1748191295192104996#m</id>
            <title>RT by @dotey: 兄弟们一个界面非常简洁美观功能强大的的开源知识库程序。

推荐给你们！

Outline： 是一个快速、协作的团队知识库，美观、实时协作、功能丰富，并且兼容Markdown。

适用于各种文档和知识管理需求。

是一个直观、快速且协作的文档编辑和管理平台：

-直观的编辑体验：提供了一个支持Markdown、斜线命令、互动嵌入等功能的快速编辑器。

-实时协作：支持团队成员在文档上实时协作，评论和线程帮助保持对话的组织性。

-即时搜索：文档可以嵌套在层次结构中，自动构建反向链接网络，实现毫秒级的全文搜索。

-与Slack集成：可以在Slack中搜索、分享和提问，文档更新时可向频道发送通知。

-公共共享：支持通过链接公开共享文档，或私下与团队分享。用户可以使用自己的品牌颜色、Logo和域名。

-速度快：强调了应用的快速响应时间，包括文档的即时加载和快速导航。

-协作性：设计初衷是强大、实时且易于使用，以提供愉快的阅读和写作体验。

-安全性与权限管理：提供读写权限管理、用户组、访客用户、公共共享等功能。

-20+集成：简单集成到如Slack、Figma、Loom等日常使用的工具，还提供开放API。

-多语言支持：支持从右到左的书写（RTL）并支持 17 种语言的翻译，包括法语、西班牙语、德语、韩语和中文。

-开源和可定制：Outline的源代码是公开的，开发在公开环境中完成。支持自定义域名和品牌颜色。

GitHub：https://github.com/outline/outline
在线演示：https://www.getoutline.com/</title>
            <link>https://nitter.cz/xiaohuggg/status/1748191295192104996#m</link>
            <guid isPermaLink="false">https://nitter.cz/xiaohuggg/status/1748191295192104996#m</guid>
            <pubDate></pubDate>
            <updated>Fri, 19 Jan 2024 03:50:59 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>兄弟们一个界面非常简洁美观功能强大的的开源知识库程序。<br />
<br />
推荐给你们！<br />
<br />
Outline： 是一个快速、协作的团队知识库，美观、实时协作、功能丰富，并且兼容Markdown。<br />
<br />
适用于各种文档和知识管理需求。<br />
<br />
是一个直观、快速且协作的文档编辑和管理平台：<br />
<br />
-直观的编辑体验：提供了一个支持Markdown、斜线命令、互动嵌入等功能的快速编辑器。<br />
<br />
-实时协作：支持团队成员在文档上实时协作，评论和线程帮助保持对话的组织性。<br />
<br />
-即时搜索：文档可以嵌套在层次结构中，自动构建反向链接网络，实现毫秒级的全文搜索。<br />
<br />
-与Slack集成：可以在Slack中搜索、分享和提问，文档更新时可向频道发送通知。<br />
<br />
-公共共享：支持通过链接公开共享文档，或私下与团队分享。用户可以使用自己的品牌颜色、Logo和域名。<br />
<br />
-速度快：强调了应用的快速响应时间，包括文档的即时加载和快速导航。<br />
<br />
-协作性：设计初衷是强大、实时且易于使用，以提供愉快的阅读和写作体验。<br />
<br />
-安全性与权限管理：提供读写权限管理、用户组、访客用户、公共共享等功能。<br />
<br />
-20+集成：简单集成到如Slack、Figma、Loom等日常使用的工具，还提供开放API。<br />
<br />
-多语言支持：支持从右到左的书写（RTL）并支持 17 种语言的翻译，包括法语、西班牙语、德语、韩语和中文。<br />
<br />
-开源和可定制：Outline的源代码是公开的，开发在公开环境中完成。支持自定义域名和品牌颜色。<br />
<br />
GitHub：<a href="https://github.com/outline/outline">github.com/outline/outline</a><br />
在线演示：<a href="https://www.getoutline.com/">getoutline.com/</a></p>
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0VMUlNjTGEwQUEwNDhZLmpwZw==" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1748141723832787035#m</id>
            <title>R to @dotey: 原文中“破坏性的沉睡代理”翻译不贴切，原文是destructive ‘sleeper agents’，对应的是Anthropic的一篇新论文：Sleeper Agents: Training Deceptive LLMs that Persist Through Safety Training

这篇论文的摘要：

人类擅长运用策略性的欺骗行为：通常表现得乐于助人，但一旦有机会追求其他目标时，行为方式就会发生根本的变化。那么，如果 AI 系统掌握了这种欺骗策略，我们能否通过当前最先进的安全训练技术来检测并消除这种策略呢？

为探讨这一问题，我们在大语言模型（LLMs）中创造了一些欺骗行为的实证例子。例如，我们训练模型在提示年份是 2023 年时编写安全代码，但当提示年份为 2024 年时，它会插入有漏洞的代码。

我们发现，这类后门行为能够变得持久，以至于常规的安全训练技术，如监督式微调、强化学习和对抗性训练（即先引发不安全行为，再训练模型以消除这些行为）都无法将其移除。尤其是在最大型号的模型和那些被训练用于生成关于如何欺骗训练过程的思维链推理的模型中，这种后门行为表现得尤为顽固。即使将这些模型中的思维链逻辑简化，其持久性也依旧存在。

此外，我们还发现，对抗性训练不仅没能移除后门，反而使模型更精准地识别出触发后门的条件，从而更巧妙地隐藏了不安全行为。

我们的研究结果表明，一旦模型展现出欺骗行为，常规的去除方法可能不仅无效，还会造成一种错误的安全感。

https://arxiv.org/abs/2401.05566</title>
            <link>https://nitter.cz/dotey/status/1748141723832787035#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1748141723832787035#m</guid>
            <pubDate></pubDate>
            <updated>Fri, 19 Jan 2024 00:34:00 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>原文中“破坏性的沉睡代理”翻译不贴切，原文是destructive ‘sleeper agents’，对应的是Anthropic的一篇新论文：Sleeper Agents: Training Deceptive LLMs that Persist Through Safety Training<br />
<br />
这篇论文的摘要：<br />
<br />
人类擅长运用策略性的欺骗行为：通常表现得乐于助人，但一旦有机会追求其他目标时，行为方式就会发生根本的变化。那么，如果 AI 系统掌握了这种欺骗策略，我们能否通过当前最先进的安全训练技术来检测并消除这种策略呢？<br />
<br />
为探讨这一问题，我们在大语言模型（LLMs）中创造了一些欺骗行为的实证例子。例如，我们训练模型在提示年份是 2023 年时编写安全代码，但当提示年份为 2024 年时，它会插入有漏洞的代码。<br />
<br />
我们发现，这类后门行为能够变得持久，以至于常规的安全训练技术，如监督式微调、强化学习和对抗性训练（即先引发不安全行为，再训练模型以消除这些行为）都无法将其移除。尤其是在最大型号的模型和那些被训练用于生成关于如何欺骗训练过程的思维链推理的模型中，这种后门行为表现得尤为顽固。即使将这些模型中的思维链逻辑简化，其持久性也依旧存在。<br />
<br />
此外，我们还发现，对抗性训练不仅没能移除后门，反而使模型更精准地识别出触发后门的条件，从而更巧妙地隐藏了不安全行为。<br />
<br />
我们的研究结果表明，一旦模型展现出欺骗行为，常规的去除方法可能不仅无效，还会造成一种错误的安全感。<br />
<br />
<a href="https://arxiv.org/abs/2401.05566">arxiv.org/abs/2401.05566</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1748120999235592614#m</id>
            <title>R to @dotey: “我们在 AI 领域的最新进展如下。我们的长远目标是开发通用人工智能（AGI），并以负责任的方式开源，让每个人都能广泛受益。为了实现这一目标，我们将两个主要的 AI 研究项目 FAIR 和 GenAl 进行了更紧密的整合。 目前，我们正在开发下一代模型 Llama 3，并建设大规模的计算基础设施，以支持我们的未来发展路线图。到今年年底，我们将配备 350,000 个 H100s，并且如果算上其他 GPU，总计将接近 600,000 个 H100s 等效的计算能力。同时，我们还在积极推进以 AI 为核心的新型计算设备的开发，如 Ray Ban Meta 智能眼镜，未来还有更多激动人心的成果即将发布。”</title>
            <link>https://nitter.cz/dotey/status/1748120999235592614#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1748120999235592614#m</guid>
            <pubDate></pubDate>
            <updated>Thu, 18 Jan 2024 23:11:39 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>“我们在 AI 领域的最新进展如下。我们的长远目标是开发通用人工智能（AGI），并以负责任的方式开源，让每个人都能广泛受益。为了实现这一目标，我们将两个主要的 AI 研究项目 FAIR 和 GenAl 进行了更紧密的整合。 目前，我们正在开发下一代模型 Llama 3，并建设大规模的计算基础设施，以支持我们的未来发展路线图。到今年年底，我们将配备 350,000 个 H100s，并且如果算上其他 GPU，总计将接近 600,000 个 H100s 等效的计算能力。同时，我们还在积极推进以 AI 为核心的新型计算设备的开发，如 Ray Ban Meta 智能眼镜，未来还有更多激动人心的成果即将发布。”</p>
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0VLU21vYlhnQUFoS0ptLnBuZw==" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1748120766103609715#m</id>
            <title>Meta 正在开发开源的通用人工智能（AGI），马克·扎克伯格宣布。

今天，扎克伯格意外的在一则 Instagram Reel 中透露，Meta 正致力于开发开源的通用人工智能（AGI）。为了实现这一目标，公司正将其两大 AI 研究团队 FAIR 和 GenAI 进行更紧密的整合，以构建完整的通用智能，并尽可能地开源。

扎克伯格在视频中谈道：“我们的长期愿景是开发通用智能，并以负责任的方式进行开源，让每个人都能广泛受益。”他在视频中表示：“我们清楚地认识到，下一代服务的需求是构建完整的通用智能，包括最优秀的 AI 助手、创意工作者用 AI、企业用 AI 等，这需要在 AI 的各个领域，包括推理、规划、编程、记忆和其他认知能力上取得进步。”

在谈到 Llama 3、基础设施和元宇宙方面，扎克伯格也表达了兴奋之情。他强调，公司目前正在培训 Llama 3 模型，并正在建设大规模的计算基础设施，包括到今年年底部署 350,000 个 Nvidia H100s。

扎克伯格还对元宇宙和 Meta 的 Ray-Ban 智能眼镜表现出极大的热情。“人们将需要新型 AI 设备，而这将逐渐将 AI 与元宇宙融合。”他说，“我认为我们很多人将会经常通过对话与 AI 互动。而且我相信，很多人会通过佩戴智能眼镜来实现这一点。这些眼镜是让 AI 观察你所见、听到你所闻的理想载体，因此 AI 可以随时随地协助你。”

这一声明是在 OpenAI 首席执行官 Sam Altman 在瑞士达沃斯的世界经济论坛上对 AGI 发表评论，并在他 2023 年 11 月重新上任两个月后对 AGI 存在风险的态度有所缓和之后发布的。尽管 Meta 的首席科学家 Yann LeCun 一直对 AGI 的即时到来持怀疑态度，认为至少在未来五年内不会实现，但这一声明依然发布了。

最后，Meta 计划将其未来的 AGI 开源的消息是在 VentureBeat 称 lama 和开源 AI “赢得了” 2023 年仅几个月后发布的。这一声明无疑将引发关于开源与闭源 AI 的进一步讨论，尤其是在 Anthropic 发布论文称开源模型可能隐藏着具有破坏性的“沉睡代理”之后。</title>
            <link>https://nitter.cz/dotey/status/1748120766103609715#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1748120766103609715#m</guid>
            <pubDate></pubDate>
            <updated>Thu, 18 Jan 2024 23:10:43 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>Meta 正在开发开源的通用人工智能（AGI），马克·扎克伯格宣布。<br />
<br />
今天，扎克伯格意外的在一则 Instagram Reel 中透露，Meta 正致力于开发开源的通用人工智能（AGI）。为了实现这一目标，公司正将其两大 AI 研究团队 FAIR 和 GenAI 进行更紧密的整合，以构建完整的通用智能，并尽可能地开源。<br />
<br />
扎克伯格在视频中谈道：“我们的长期愿景是开发通用智能，并以负责任的方式进行开源，让每个人都能广泛受益。”他在视频中表示：“我们清楚地认识到，下一代服务的需求是构建完整的通用智能，包括最优秀的 AI 助手、创意工作者用 AI、企业用 AI 等，这需要在 AI 的各个领域，包括推理、规划、编程、记忆和其他认知能力上取得进步。”<br />
<br />
在谈到 Llama 3、基础设施和元宇宙方面，扎克伯格也表达了兴奋之情。他强调，公司目前正在培训 Llama 3 模型，并正在建设大规模的计算基础设施，包括到今年年底部署 350,000 个 Nvidia H100s。<br />
<br />
扎克伯格还对元宇宙和 Meta 的 Ray-Ban 智能眼镜表现出极大的热情。“人们将需要新型 AI 设备，而这将逐渐将 AI 与元宇宙融合。”他说，“我认为我们很多人将会经常通过对话与 AI 互动。而且我相信，很多人会通过佩戴智能眼镜来实现这一点。这些眼镜是让 AI 观察你所见、听到你所闻的理想载体，因此 AI 可以随时随地协助你。”<br />
<br />
这一声明是在 OpenAI 首席执行官 Sam Altman 在瑞士达沃斯的世界经济论坛上对 AGI 发表评论，并在他 2023 年 11 月重新上任两个月后对 AGI 存在风险的态度有所缓和之后发布的。尽管 Meta 的首席科学家 Yann LeCun 一直对 AGI 的即时到来持怀疑态度，认为至少在未来五年内不会实现，但这一声明依然发布了。<br />
<br />
最后，Meta 计划将其未来的 AGI 开源的消息是在 VentureBeat 称 lama 和开源 AI “赢得了” 2023 年仅几个月后发布的。这一声明无疑将引发关于开源与闭源 AI 的进一步讨论，尤其是在 Anthropic 发布论文称开源模型可能隐藏着具有破坏性的“沉睡代理”之后。</p>
<p><a href="https://nitter.cz/VentureBeat/status/1748046430193746189#m">nitter.cz/VentureBeat/status/1748046430193746189#m</a></p>
<img src="https://nitter.cz/pic/enc/ZXh0X3R3X3ZpZGVvX3RodW1iLzE3NDgxMjAzMDk1MjAwMzU4NDAvcHUvaW1nLzV4Y0RRd1hjM2ZraGgyY1kuanBn" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1748040193838350490#m</id>
            <title>大厂们都在玩Video Diffusion版萝卜蹲
阿里蹲完字节蹲
字节蹲完腾旭蹲
腾讯蹲完百度蹲
……</title>
            <link>https://nitter.cz/dotey/status/1748040193838350490#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1748040193838350490#m</guid>
            <pubDate></pubDate>
            <updated>Thu, 18 Jan 2024 17:50:33 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>大厂们都在玩Video Diffusion版萝卜蹲<br />
阿里蹲完字节蹲<br />
字节蹲完腾旭蹲<br />
腾讯蹲完百度蹲<br />
……</p>
<p><a href="https://nitter.cz/_akhaliq/status/1747815671088468157#m">nitter.cz/_akhaliq/status/1747815671088468157#m</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1748037603318800415#m</id>
            <title>选最趁手的尽快做出来才是王道，有人用了再换都来得及，做不出来什么选什么技术栈结果都是 0，除非你目的是为了熟悉新的技术栈。</title>
            <link>https://nitter.cz/dotey/status/1748037603318800415#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1748037603318800415#m</guid>
            <pubDate></pubDate>
            <updated>Thu, 18 Jan 2024 17:40:16 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>选最趁手的尽快做出来才是王道，有人用了再换都来得及，做不出来什么选什么技术栈结果都是 0，除非你目的是为了熟悉新的技术栈。</p>
<p><a href="https://nitter.cz/VoidAsuka/status/1748022530747912698#m">nitter.cz/VoidAsuka/status/1748022530747912698#m</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1748036696774480292#m</id>
            <title>是一种新的不改变模型权重的微调方法——代理调整（proxy-tuning）

作者解释的很专业，但看起来还是挺复杂的，超出了我的知识范围，这里仅对作者的原文进行翻译：

刘等人提出了一种全新的大语言模型（LLM）微调方法，不需要改变模型权重，这种方法被称为代理调整（proxy-tuning）（参见 Liu et al. https://arxiv.org/abs/2401.08565）。那么，它是如何工作的呢？代理调调整是一种在解码时使用的简单技术，它通过修改目标大语言模型的 logits 值来实现。具体来说，你需要计算一个较小的基础模型与微调模型之间的 logits 差异，然后将这个差异应用到目标模型的 logits 上。

具体例子来说，如果目标是提升一个大型目标模型（M1）的性能。

这个方法的核心思想是使用两个小型模型：
- 一个小型基础模型（M2）
- 一个经过微调的基础模型（M3）

接着，你只需要将这两个小型模型在预测上的差异（即输出词汇上的 logits 差异）应用到目标模型 M1 上。

通过这种方式，改进后的目标模型的输出可以表示为 M1\*(x) = M1(x) + [M3(x) - M2(x)]。

根据实验结果，这种方法效果出乎意料地好。作者们在以下几个方面进行了测试：
A. 指令式调整（instruction-tuning）
B. 针对特定领域的适应（domain adaptation）
C. 特定任务的微调（task-specific finetuning）

为了简洁，我们只关注指令式调整这一点。具体例子如下：

1) 目标是将 Llama 2 70B Base 模型的性能提升到与 Llama 2 70B Chat 相当，但不通过任何从 Base 到 Chat 的增强学习和人类反馈（RLHF）来实现。

2) 他们使用了一个体积是 Llama 2 70B 的十分之一的 Llama 2 7B 模型，并对其进行了指令式微调。

3) 微调后，他们计算了 7B Base 和 7B Finetuned 之间输出词汇表上的 logits 差异。

4) 然后，他们将这种差异应用到 Llama 2 70B Base 模型上，这使得 70B Base 模型的性能极大地接近了 70B Chat 模型。

这种方法的唯一限制是，较小的模型必须使用与较大模型相同的词汇表进行训练。理论上，如果有人知道 GPT-4 的词汇表并且能够访问其 logits 输出，那么就可以使用这种方法来创建专门定制的 GPT-4 模型。</title>
            <link>https://nitter.cz/dotey/status/1748036696774480292#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1748036696774480292#m</guid>
            <pubDate></pubDate>
            <updated>Thu, 18 Jan 2024 17:36:40 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>是一种新的不改变模型权重的微调方法——代理调整（proxy-tuning）<br />
<br />
作者解释的很专业，但看起来还是挺复杂的，超出了我的知识范围，这里仅对作者的原文进行翻译：<br />
<br />
刘等人提出了一种全新的大语言模型（LLM）微调方法，不需要改变模型权重，这种方法被称为代理调整（proxy-tuning）（参见 Liu et al. <a href="https://arxiv.org/abs/2401.08565">arxiv.org/abs/2401.08565</a>）。那么，它是如何工作的呢？代理调调整是一种在解码时使用的简单技术，它通过修改目标大语言模型的 logits 值来实现。具体来说，你需要计算一个较小的基础模型与微调模型之间的 logits 差异，然后将这个差异应用到目标模型的 logits 上。<br />
<br />
具体例子来说，如果目标是提升一个大型目标模型（M1）的性能。<br />
<br />
这个方法的核心思想是使用两个小型模型：<br />
- 一个小型基础模型（M2）<br />
- 一个经过微调的基础模型（M3）<br />
<br />
接着，你只需要将这两个小型模型在预测上的差异（即输出词汇上的 logits 差异）应用到目标模型 M1 上。<br />
<br />
通过这种方式，改进后的目标模型的输出可以表示为 M1\*(x) = M1(x) + [M3(x) - M2(x)]。<br />
<br />
根据实验结果，这种方法效果出乎意料地好。作者们在以下几个方面进行了测试：<br />
A. 指令式调整（instruction-tuning）<br />
B. 针对特定领域的适应（domain adaptation）<br />
C. 特定任务的微调（task-specific finetuning）<br />
<br />
为了简洁，我们只关注指令式调整这一点。具体例子如下：<br />
<br />
1) 目标是将 Llama 2 70B Base 模型的性能提升到与 Llama 2 70B Chat 相当，但不通过任何从 Base 到 Chat 的增强学习和人类反馈（RLHF）来实现。<br />
<br />
2) 他们使用了一个体积是 Llama 2 70B 的十分之一的 Llama 2 7B 模型，并对其进行了指令式微调。<br />
<br />
3) 微调后，他们计算了 7B Base 和 7B Finetuned 之间输出词汇表上的 logits 差异。<br />
<br />
4) 然后，他们将这种差异应用到 Llama 2 70B Base 模型上，这使得 70B Base 模型的性能极大地接近了 70B Chat 模型。<br />
<br />
这种方法的唯一限制是，较小的模型必须使用与较大模型相同的词汇表进行训练。理论上，如果有人知道 GPT-4 的词汇表并且能够访问其 logits 输出，那么就可以使用这种方法来创建专门定制的 GPT-4 模型。</p>
<p><a href="https://nitter.cz/rasbt/status/1748021765790376385#m">nitter.cz/rasbt/status/1748021765790376385#m</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1748026923362472235#m</id>
            <title>转译：自推出必应聊天（Bing Chat）以来，Bing 市场份额增长不足 1%

自从 Microsoft 推出必应聊天（现称为 Copilot）已近一年，根据 StatCounter 的数据显示，Bing 的市场份额微增不足 1%。这个结果可能并不意外，因为我们早前进行的一项调查显示，多数人并不认为必应聊天能显著提升 Bing 的市场份额。

彭博社（Bloomberg）对 StatCounter 的数据进行了报道，指出：“但到了 2023 年底，微软的搜索引擎在全球搜索市场中仅占有 3.4% 的份额。据数据分析公司 StatCounter 的数据显示，自从宣布 ChatGPT 以来，增长不足 1 个百分点。”

报告中还附有这样一张图表：

搜索市场份额 Bloomberg 图表

以下是 StatCounter 提供的原始图表和数据：
Statcounter 搜索引擎 全球月度 202212 至 202312

彭博文章顶部的一段引言我特别喜欢：

“整个搜索领域正经历着翻天覆地的变化，”首席执行官 Satya Nadella 当时表示。“这样的机遇非常罕见。”

别误解，我对 Bing 聊天的推出和其功能印象深刻。但在实际使用中，我发现自己还是倾向于回到传统搜索方式。

Bing 不愿在 Bing 网站管理员工具中分享必应聊天的数据，这并不奇怪。

虽然有些失望，但正如我所言，这个结果并不让人感到太意外。在我们几个月前的调查中，有 60% 的人认为这项新功能不会使 Bing 的市场份额增长超过 5%。

来源：https://www.seroundtable.com/bing-market-share-chatgpt-36751.html</title>
            <link>https://nitter.cz/dotey/status/1748026923362472235#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1748026923362472235#m</guid>
            <pubDate></pubDate>
            <updated>Thu, 18 Jan 2024 16:57:49 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>转译：自推出必应聊天（Bing Chat）以来，Bing 市场份额增长不足 1%<br />
<br />
自从 Microsoft 推出必应聊天（现称为 Copilot）已近一年，根据 StatCounter 的数据显示，Bing 的市场份额微增不足 1%。这个结果可能并不意外，因为我们早前进行的一项调查显示，多数人并不认为必应聊天能显著提升 Bing 的市场份额。<br />
<br />
彭博社（Bloomberg）对 StatCounter 的数据进行了报道，指出：“但到了 2023 年底，微软的搜索引擎在全球搜索市场中仅占有 3.4% 的份额。据数据分析公司 StatCounter 的数据显示，自从宣布 ChatGPT 以来，增长不足 1 个百分点。”<br />
<br />
报告中还附有这样一张图表：<br />
<br />
搜索市场份额 Bloomberg 图表<br />
<br />
以下是 StatCounter 提供的原始图表和数据：<br />
Statcounter 搜索引擎 全球月度 202212 至 202312<br />
<br />
彭博文章顶部的一段引言我特别喜欢：<br />
<br />
“整个搜索领域正经历着翻天覆地的变化，”首席执行官 Satya Nadella 当时表示。“这样的机遇非常罕见。”<br />
<br />
别误解，我对 Bing 聊天的推出和其功能印象深刻。但在实际使用中，我发现自己还是倾向于回到传统搜索方式。<br />
<br />
Bing 不愿在 Bing 网站管理员工具中分享必应聊天的数据，这并不奇怪。<br />
<br />
虽然有些失望，但正如我所言，这个结果并不让人感到太意外。在我们几个月前的调查中，有 60% 的人认为这项新功能不会使 Bing 的市场份额增长超过 5%。<br />
<br />
来源：<a href="https://www.seroundtable.com/bing-market-share-chatgpt-36751.html">seroundtable.com/bing-market…</a></p>
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0VJNmY3V1hVQUVRTTdYLnBuZw==" />
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0VJNmx5WVc0QUF6cTE2LmpwZw==" />
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0VJODJoWFh3QUFqNWRkLnBuZw==" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1748022750013259903#m</id>
            <title>小时候以为自己是法力无边的齐天大圣，然后发现不过是至尊宝，终于明白要戴上紧箍咒才能成为孙悟空，却无法忍受痛苦和束缚，最终活成了一条狗！</title>
            <link>https://nitter.cz/dotey/status/1748022750013259903#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1748022750013259903#m</guid>
            <pubDate></pubDate>
            <updated>Thu, 18 Jan 2024 16:41:14 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>小时候以为自己是法力无边的齐天大圣，然后发现不过是至尊宝，终于明白要戴上紧箍咒才能成为孙悟空，却无法忍受痛苦和束缚，最终活成了一条狗！</p>
<p><a href="https://nitter.cz/Kunluntalk/status/1748013680783163544#m">nitter.cz/Kunluntalk/status/1748013680783163544#m</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/Yangyixxxx/status/1748008079789277189#m</id>
            <title>RT by @dotey: 宝玉说，他最早做的小作品，也不是很完美，但收获到了很多机会。我突然想到，很多人往往担心失败而不敢开始。

关于失败的看法很多，可以一起看看王小波《老人与海》的读后感。这张图我存了很多很多年，我个人喜欢王小波，也非常喜欢他对桑地亚哥的点评。

期望他的点评，能给予“担心失败而不敢开始尝试”的朋友一些勇气与信念。</title>
            <link>https://nitter.cz/Yangyixxxx/status/1748008079789277189#m</link>
            <guid isPermaLink="false">https://nitter.cz/Yangyixxxx/status/1748008079789277189#m</guid>
            <pubDate></pubDate>
            <updated>Thu, 18 Jan 2024 15:42:57 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>宝玉说，他最早做的小作品，也不是很完美，但收获到了很多机会。我突然想到，很多人往往担心失败而不敢开始。<br />
<br />
关于失败的看法很多，可以一起看看王小波《老人与海》的读后感。这张图我存了很多很多年，我个人喜欢王小波，也非常喜欢他对桑地亚哥的点评。<br />
<br />
期望他的点评，能给予“担心失败而不敢开始尝试”的朋友一些勇气与信念。</p>
<p><a href="https://nitter.cz/dotey/status/1748002780483039276#m">nitter.cz/dotey/status/1748002780483039276#m</a></p>
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0VJclFzaWFFQUE2eGp1LmpwZw==" />
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0VJclFzaGJJQUExZE5zLmpwZw==" />
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0VJc0ZDQWFnQUE5NlhiLmpwZw==" />
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0VJc0ZDQWJZQUF1TVhYLmpwZw==" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1748002780483039276#m</id>
            <title>说的很对，想起我大学从力学专业转行学计算机，一个重要原因是因为做了个班级主页，做的很烂，但是做出来了，部署到网上能够被访问，所以后来去学校网络中心面试，因为有这么个作品，所以能超过其他候选人，然后有机会去兼职，得到了向大牛们学习的机会。</title>
            <link>https://nitter.cz/dotey/status/1748002780483039276#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1748002780483039276#m</guid>
            <pubDate></pubDate>
            <updated>Thu, 18 Jan 2024 15:21:53 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>说的很对，想起我大学从力学专业转行学计算机，一个重要原因是因为做了个班级主页，做的很烂，但是做出来了，部署到网上能够被访问，所以后来去学校网络中心面试，因为有这么个作品，所以能超过其他候选人，然后有机会去兼职，得到了向大牛们学习的机会。</p>
<p><a href="https://nitter.cz/Yangyixxxx/status/1747907337552343275#m">nitter.cz/Yangyixxxx/status/1747907337552343275#m</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1747872916723642472#m</id>
            <title>百度也不甘示弱</title>
            <link>https://nitter.cz/dotey/status/1747872916723642472#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1747872916723642472#m</guid>
            <pubDate></pubDate>
            <updated>Thu, 18 Jan 2024 06:45:51 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>百度也不甘示弱</p>
<p><a href="https://nitter.cz/_akhaliq/status/1747860016449679534#m">nitter.cz/_akhaliq/status/1747860016449679534#m</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1747871916029850069#m</id>
            <title>#AI开源项目推荐： 中文Mixtral-8x7B（Chinese-Mixtral-8x7B）

官方介绍：本项目基于Mistral发布的模型Mixtral-8x7B进行了中文扩词表增量预训练，希望进一步促进中文自然语言处理社区对MoE模型的研究。

我们扩充后的词表显著提高了模型对中文的编解码效率，并通过大规模开源语料对扩词表模型进行增量预训练，使模型具备了强大的中文生成和理解能力。

https://github.com/HIT-SCIR/Chinese-Mixtral-8x7B</title>
            <link>https://nitter.cz/dotey/status/1747871916029850069#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1747871916029850069#m</guid>
            <pubDate></pubDate>
            <updated>Thu, 18 Jan 2024 06:41:53 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p><a href="https://nitter.cz/search?q=%23AI开源项目推荐">#AI开源项目推荐</a>： 中文Mixtral-8x7B（Chinese-Mixtral-8x7B）<br />
<br />
官方介绍：本项目基于Mistral发布的模型Mixtral-8x7B进行了中文扩词表增量预训练，希望进一步促进中文自然语言处理社区对MoE模型的研究。<br />
<br />
我们扩充后的词表显著提高了模型对中文的编解码效率，并通过大规模开源语料对扩词表模型进行增量预训练，使模型具备了强大的中文生成和理解能力。<br />
<br />
<a href="https://github.com/HIT-SCIR/Chinese-Mixtral-8x7B">github.com/HIT-SCIR/Chinese-…</a></p>
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0VHd0VVQ1cwQUEyU0M3LmpwZw==" />
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0VHd0o0blhjQUE0WktTLmpwZw==" />
                ]]>
            </content:encoded>
        </item>
        
    </channel>
</rss>