<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title>宝玉 / @dotey</title>
        <link>https://nitter.cz/dotey</link>
        
        <item>
            <id>https://nitter.cz/dotey/status/1745160456220635204#m</id>
            <title>OpenAI 已经正式发布了 GPT 商店 http://chat.openai.com/gpts ，通过侧边栏就可以访问，目前还比较简单。

目前还没正式公布如何让开发者获得报酬，看起来是直接根据用户使用 GPT 的情况来分成

以下内容翻译自官方公告 https://openai.com/blog/introducing-the-gpt-store  ：

我们刚刚推出了 GPT 商店，旨在帮助您发现实用且广受欢迎的 ChatGPT 定制版本。

自从两个月前我们宣布 GPTs 的推出以来，用户们已经创建了超过 300 万个 ChatGPT 的定制版本。许多开发者将他们的 GPTs 分享给其他用户。现在，我们正将 GPT 商店推向 ChatGPT Plus、Team 和 Enterprise 用户，让您能够轻松找到实用且广受欢迎的 GPTs。欢迎访问 http://chat.openai.com/gpts 探索更多。

探索商店中的热门趋势

商店内展示了众多由我们的合作伙伴和社区开发的 GPTs。您可以在社区排行榜上浏览各种受欢迎和流行的 GPTs，分类涵盖 DALL·E、写作、研究、编程、教育和生活方式等。

每周新推荐的 GPTs

我们还会重点推介一些实用且具有深远影响的 GPTs。首批推荐的 GPTs 包括：

- 通过 AllTrails 获得个性化的徒步路线推荐
- 使用 Consensus 搜索和汇总 200M 学术论文的结果
- 通过 Khan Academy 的 Code Tutor 提升编程技能
- 利用 Canva 设计演示文稿或社交媒体帖子
- 使用 Books 发现您的下一本书
- 随时随地通过 CK-12 Flexi AI 导师学习数学和科学

将您的 GPT 加入商店

自己构建 GPT 既简单又无需任何编程技能。

如果您想将 GPT 分享到商店中，您需要做以下几步：

- 将您的 GPT 设为“所有人可用”（仅有链接的人无法在商店中看到）。
- 验证您的开发者资料（路径为设置 → 开发者资料 → 启用您的姓名或经过验证的网站）。

请务必查看我们最新的使用政策和 GPT 品牌指南，确保您的 GPT 符合要求。为了保证 GPTs 遵守我们的政策，我们除了在产品中已经实施的安全措施外，还建立了一个新的审查系统。该审查过程包括人工和自动审查，用户也可以举报不合规的 GPTs。

开发者可根据 GPT 使用情况获得收入

我们计划在第一季度启动 GPT 开发者收入计划。作为首步，美国的开发者将根据用户对他们 GPTs 的参与度获得报酬。我们将在接近启动时间时提供详细的支付标准。

Team 和 企业客户可以管理 GPTs

我们今天宣布了适用于各种规模团队的新 ChatGPT Team 计划。Team 客户可以访问 GPT 商店的专属区域，其中包含安全发布到您工作空间的 GPTs。GPT 商店很快也将向 ChatGPT Enterprise 客户开放，并将提供更多管理员控制功能，如选择共享内部 GPTs 的方式以及决定哪些外部 GPTs 可以在企业内使用。和所有在 ChatGPT Team 和 企业上的使用一样，我们不会利用您与 GPTs 的会话记录来改进我们的模型。

想要探索更多 GPTs，请访问 http://chat.openai.com/gpts。</title>
            <link>https://nitter.cz/dotey/status/1745160456220635204#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1745160456220635204#m</guid>
            <pubDate></pubDate>
            <updated>Wed, 10 Jan 2024 19:07:30 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>OpenAI 已经正式发布了 GPT 商店 <a href="http://chat.openai.com/gpts">chat.openai.com/gpts</a> ，通过侧边栏就可以访问，目前还比较简单。<br />
<br />
目前还没正式公布如何让开发者获得报酬，看起来是直接根据用户使用 GPT 的情况来分成<br />
<br />
以下内容翻译自官方公告 <a href="https://openai.com/blog/introducing-the-gpt-store">openai.com/blog/introducing-…</a>  ：<br />
<br />
我们刚刚推出了 GPT 商店，旨在帮助您发现实用且广受欢迎的 ChatGPT 定制版本。<br />
<br />
自从两个月前我们宣布 GPTs 的推出以来，用户们已经创建了超过 300 万个 ChatGPT 的定制版本。许多开发者将他们的 GPTs 分享给其他用户。现在，我们正将 GPT 商店推向 ChatGPT Plus、Team 和 Enterprise 用户，让您能够轻松找到实用且广受欢迎的 GPTs。欢迎访问 <a href="http://chat.openai.com/gpts">chat.openai.com/gpts</a> 探索更多。<br />
<br />
探索商店中的热门趋势<br />
<br />
商店内展示了众多由我们的合作伙伴和社区开发的 GPTs。您可以在社区排行榜上浏览各种受欢迎和流行的 GPTs，分类涵盖 DALL·E、写作、研究、编程、教育和生活方式等。<br />
<br />
每周新推荐的 GPTs<br />
<br />
我们还会重点推介一些实用且具有深远影响的 GPTs。首批推荐的 GPTs 包括：<br />
<br />
- 通过 AllTrails 获得个性化的徒步路线推荐<br />
- 使用 Consensus 搜索和汇总 200M 学术论文的结果<br />
- 通过 Khan Academy 的 Code Tutor 提升编程技能<br />
- 利用 Canva 设计演示文稿或社交媒体帖子<br />
- 使用 Books 发现您的下一本书<br />
- 随时随地通过 CK-12 Flexi AI 导师学习数学和科学<br />
<br />
将您的 GPT 加入商店<br />
<br />
自己构建 GPT 既简单又无需任何编程技能。<br />
<br />
如果您想将 GPT 分享到商店中，您需要做以下几步：<br />
<br />
- 将您的 GPT 设为“所有人可用”（仅有链接的人无法在商店中看到）。<br />
- 验证您的开发者资料（路径为设置 → 开发者资料 → 启用您的姓名或经过验证的网站）。<br />
<br />
请务必查看我们最新的使用政策和 GPT 品牌指南，确保您的 GPT 符合要求。为了保证 GPTs 遵守我们的政策，我们除了在产品中已经实施的安全措施外，还建立了一个新的审查系统。该审查过程包括人工和自动审查，用户也可以举报不合规的 GPTs。<br />
<br />
开发者可根据 GPT 使用情况获得收入<br />
<br />
我们计划在第一季度启动 GPT 开发者收入计划。作为首步，美国的开发者将根据用户对他们 GPTs 的参与度获得报酬。我们将在接近启动时间时提供详细的支付标准。<br />
<br />
Team 和 企业客户可以管理 GPTs<br />
<br />
我们今天宣布了适用于各种规模团队的新 ChatGPT Team 计划。Team 客户可以访问 GPT 商店的专属区域，其中包含安全发布到您工作空间的 GPTs。GPT 商店很快也将向 ChatGPT Enterprise 客户开放，并将提供更多管理员控制功能，如选择共享内部 GPTs 的方式以及决定哪些外部 GPTs 可以在企业内使用。和所有在 ChatGPT Team 和 企业上的使用一样，我们不会利用您与 GPTs 的会话记录来改进我们的模型。<br />
<br />
想要探索更多 GPTs，请访问 <a href="http://chat.openai.com/gpts">chat.openai.com/gpts</a>。</p>
<p><a href="https://nitter.cz/OpenAI/status/1745141391934828696#m">nitter.cz/OpenAI/status/1745141391934828696#m</a></p>
<img src="https://nitter.cz/pic/enc/Y2FyZF9pbWcvMTc0NTEzNDUxMDAyOTg3NzI0OC9YaWZpWGdVbj9mb3JtYXQ9cG5nJm5hbWU9ODAweDQxOQ==" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1744980335182377156#m</id>
            <title>我发现大家对于 ChatGPT 在文档对话支持方面的能力都普遍认为比较差，这篇分析相对比较靠谱：
1. OCR 能力不行，OCR 能力不行那从源头上的文字的输入就是有问题的，后续的召回和对话肯定好不了
2.上下文长度不够长，如果长度不够那么一次输入的信息就不够长，导致输出不够好
3. RAG 本身就是很复杂的技术，即使如 OpenAI 也不是那么多容易做好的

以下内容翻译自原推：
***

与 PDF 对话之难，及 ChatGPT 在此领域的不足 - 原因分析

目前最普遍的 GPT-4 应用之一是“文档/PDF 对话”功能。这被认为是 AI 聊天机器人的一项杀手级应用，因为要读懂内容繁多的文件是很烦人的事 —— 相比之下，直接让大语言模型帮你解析并总结内容显得更加简便。

然而，遗憾的是，当处理超过 10 页的 PDF 文件时，ChatGPT 的表现并不尽如人意。它所提供的总结往往过于简略且笼统，甚至在被要求提供更多细节时会直接拒绝。

造成这一问题的原因之一是，这不是一个简单的应用场景。

OCR - 有效的 OCR 技术是必需的，它需要能够精确解析表格和图像。但目前无论是免费的还是商业的 OCR 技术都难以做到这一点。大量商业和研究用的 PDF 文件中含有众多表格和图像。

上下文 - 尽管我们现在有 128K 上下文长度的大语言模型，但目前尚不清楚 ChatGPT 实际部署了哪种模型。如果你对一篇论文进行 OCR 处理后再输入其文本给 ChatGPT，它经常会出现错误。我怀疑 ChatGPT 服务的是一个上下文长度更小的模型。

快速 RAG - 实施一个简单的 RAG 处理流程，即将文档分块、嵌入、检索结果后再传递给大语言模型，可能是一个有效的解决方法。但目前的聊天机器人尚未具备这样的功能。

突出文档关键部分 - 理想的解决方案应当能够明确展示出答案来源于文档的哪些部分。这将极大地简化验证过程。

理想情况下，与 PDF 对话的功能应包含以上所有特点。似乎，如果一款独立的应用程序能够很好地实现这些功能，即使在应用商店中也能获得可观的收入。不过，我认为这并不适合作为一个获得风险投资支持的创业项目，更像是一个一两人小团队可以经营的小本生意，足以成为一种舒适的生活方式。

简言之，实现一个看似简单的“与 PDF 对话”功能，其实是一个复杂且难以做到极致的任务。</title>
            <link>https://nitter.cz/dotey/status/1744980335182377156#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1744980335182377156#m</guid>
            <pubDate></pubDate>
            <updated>Wed, 10 Jan 2024 07:11:46 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>我发现大家对于 ChatGPT 在文档对话支持方面的能力都普遍认为比较差，这篇分析相对比较靠谱：<br />
1. OCR 能力不行，OCR 能力不行那从源头上的文字的输入就是有问题的，后续的召回和对话肯定好不了<br />
2.上下文长度不够长，如果长度不够那么一次输入的信息就不够长，导致输出不够好<br />
3. RAG 本身就是很复杂的技术，即使如 OpenAI 也不是那么多容易做好的<br />
<br />
以下内容翻译自原推：<br />
***<br />
<br />
与 PDF 对话之难，及 ChatGPT 在此领域的不足 - 原因分析<br />
<br />
目前最普遍的 GPT-4 应用之一是“文档/PDF 对话”功能。这被认为是 AI 聊天机器人的一项杀手级应用，因为要读懂内容繁多的文件是很烦人的事 —— 相比之下，直接让大语言模型帮你解析并总结内容显得更加简便。<br />
<br />
然而，遗憾的是，当处理超过 10 页的 PDF 文件时，ChatGPT 的表现并不尽如人意。它所提供的总结往往过于简略且笼统，甚至在被要求提供更多细节时会直接拒绝。<br />
<br />
造成这一问题的原因之一是，这不是一个简单的应用场景。<br />
<br />
OCR - 有效的 OCR 技术是必需的，它需要能够精确解析表格和图像。但目前无论是免费的还是商业的 OCR 技术都难以做到这一点。大量商业和研究用的 PDF 文件中含有众多表格和图像。<br />
<br />
上下文 - 尽管我们现在有 128K 上下文长度的大语言模型，但目前尚不清楚 ChatGPT 实际部署了哪种模型。如果你对一篇论文进行 OCR 处理后再输入其文本给 ChatGPT，它经常会出现错误。我怀疑 ChatGPT 服务的是一个上下文长度更小的模型。<br />
<br />
快速 RAG - 实施一个简单的 RAG 处理流程，即将文档分块、嵌入、检索结果后再传递给大语言模型，可能是一个有效的解决方法。但目前的聊天机器人尚未具备这样的功能。<br />
<br />
突出文档关键部分 - 理想的解决方案应当能够明确展示出答案来源于文档的哪些部分。这将极大地简化验证过程。<br />
<br />
理想情况下，与 PDF 对话的功能应包含以上所有特点。似乎，如果一款独立的应用程序能够很好地实现这些功能，即使在应用商店中也能获得可观的收入。不过，我认为这并不适合作为一个获得风险投资支持的创业项目，更像是一个一两人小团队可以经营的小本生意，足以成为一种舒适的生活方式。<br />
<br />
简言之，实现一个看似简单的“与 PDF 对话”功能，其实是一个复杂且难以做到极致的任务。</p>
<p><a href="https://nitter.cz/bindureddy/status/1744894481999278291#m">nitter.cz/bindureddy/status/1744894481999278291#m</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1744974492764364863#m</id>
            <title>Rabbit R1：一款能代替你使用应用的 AI 小工具

这款售价199美元、由“大动作模型”驱动的 R1 不仅是个聊天机器人，它还能做几乎所有事情，潜力巨大。

Rabbit R1 不是手机，但也不能简单地认为它不是手机。

AI 创业公司 Rabbit 的 CEO 兼创始人 Jesse Lyu 表示，他并不打算立刻取代你的智能手机。他的公司推出了一款新型独立 AI 设备 R1，售价199美元，其雄心勃勃到了令人震惊的程度。Lyu 似乎相信，R1 迟早会取代你的手机，只是时机尚未成熟。

R1 的外形有点类似 Playdate 控制台 或是一种现代版的90年代手持电视。它体积大约是 iPhone 的一半，配备了2.88英寸触摸屏、可旋转摄像头（用于拍照和视频）以及一个滚轮/按钮，用于导航或与设备内置助手交流。其配备2.3GHz MediaTek处理器、4GB内存和128GB存储空间，这一切都被封装在一个由 Teenage Engineering 设计公司合作设计的圆润机身中。Rabbit 只透露电池可以持续“一整天”。

在 Rabbit 的发布会后，我短暂体验了 R1。这是一款令人印象深刻的硬件。在场的设备（仅Lyu的那台）是真正能工作的，但由于酒店 Wi-Fi 信号不佳，其功能受限。R1 意外地轻便，手感比照片中看上去要好。它的按钮触感出色，这对 Teenage Engineering 来说并不意外，整体握持感很好。不过，它容易留下指纹。

R1 的真正亮点在于其内部软件：Rabbit OS操作系统和底层的 AI 技术。Rabbit 表示，与其说 Rabbit OS 是基于类似 ChatGPT 的大语言模型，不如说它是基于“大动作模型”。这可以被看作是一种万能的应用程序控制器。“我们想要找到一个像大语言模型那样的通用解决方案，”Lyu 说。“如何找到一个真正能触发我们服务的通用方案，无论是网站、应用程序还是其他平台？”

从概念上讲，这与 Alexa 或 Google Assistant 相似。Rabbit OS 能控制音乐、预订车辆、购买杂货、发送消息等，全部通过一个界面实现。无需切换应用程序和登录，只需说出你的需求，让设备为你服务。R1 的界面将显示一系列基于类别的卡片，如音乐、交通或视频聊天等，Lyu 说这主要是为了让用户能够亲自确认模型的反馈。

Rabbit 没有创建大量的 API 去说服开发者支持 R1，而是训练其模型自己使用现有应用。这个大动作模型，或 LAM，是通过人类与 Spotify 和 Uber 等应用的互动训练出来的，基本上是向模型展示它们是如何运作的。LAM 学会了识别设置图标、确认订单的时机以及搜索菜单的位置。Lyu 说，这一切都可以应用到任何应用程序上。

R1 还具有一个专用的训练模式，你可以通过它教授设备如何执行特定操作，然后它就能自动重复这一操作。例如，Lyu 描述了一个如何去除水印的教学过程。“你会说，'首先，打开 Photoshop。打开它，然后拿起你的照片，在水印上做个套索，然后点击几下。这就是去除水印的方法。'”Rabbit OS 处理需要30秒，之后它就能自动去除所有水印。

然而，R1 在实际应用中如何运作仍是个未知数。你可以在 R1 本身完成一些操作，并通过一个名为 Rabbit Hole 的网络门户登录到各种服务。如果你想教设备如何使用 Photoshop，你可以启动 Rabbit 的一台虚拟机进行教学，而无需使用你自己的设备和软件。但如何在众多用户、多种设备和平台上实现这一功能，仍然是一个挑战。

ChatGPT 对网络搜索的影响可能与 Rabbit OS 对应用商店的影响相似。Rabbit 采取的方法颇具创新。即使你是科技巨头，让人们支持一个新操作系统也是艰难的，而通过教授模型如何使用应用程序，LAM 方法规避了这一点。更广泛地说，我们正在见证越来越多的 AI 驱动硬件 进入市场，但这些设备通常只是连接到一个聊天机器人。相比之下，Rabbit 更像是一个超级应用——一个可以通过它完成几乎任何事情的单一界面。ChatGPT 可能是网络搜索的未来，而 Rabbit OS 可能是应用商店的未来。当然，实现这个梦想伴随着许多复杂性和挑战，但它是一个令人着迷的愿景。

不过，听 Lyu 谈论 Rabbit OS 和 R1，公司对这个设备的具体愿景似乎还不完全清晰。尽管它可以进行视频通话，并且配备了 SIM 卡插槽，但它还不足以完全取代你的手机。它主要是一个语音助手，但同时配备了屏幕和摄像头。它不仅仅是一个语音助手，但它确实执行了很多语音助手的功能。Rabbit 表示，他们在设计 Rabbit OS 时考虑到了安全性和隐私性，但同时也需要用户通过其界面登录到他们最常用的服务。在 Lyu 看来，R1 既是一个实用的配件，也是几乎所有事物的一体化未来。

R1 目前已开放预订，Lyu 表示该设备将于3月开始发货。他甚至希望能比 Humane 的 AI Pin 更早上市。

新闻来源：https://www.theverge.com/2024/1/9/24030667/rabbit-r1-ai-action-model-price-release-date
Rabbit R1 官网：https://www.rabbit.tech/</title>
            <link>https://nitter.cz/dotey/status/1744974492764364863#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1744974492764364863#m</guid>
            <pubDate></pubDate>
            <updated>Wed, 10 Jan 2024 06:48:33 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>Rabbit R1：一款能代替你使用应用的 AI 小工具<br />
<br />
这款售价199美元、由“大动作模型”驱动的 R1 不仅是个聊天机器人，它还能做几乎所有事情，潜力巨大。<br />
<br />
Rabbit R1 不是手机，但也不能简单地认为它不是手机。<br />
<br />
AI 创业公司 Rabbit 的 CEO 兼创始人 Jesse Lyu 表示，他并不打算立刻取代你的智能手机。他的公司推出了一款新型独立 AI 设备 R1，售价199美元，其雄心勃勃到了令人震惊的程度。Lyu 似乎相信，R1 迟早会取代你的手机，只是时机尚未成熟。<br />
<br />
R1 的外形有点类似 Playdate 控制台 或是一种现代版的90年代手持电视。它体积大约是 iPhone 的一半，配备了2.88英寸触摸屏、可旋转摄像头（用于拍照和视频）以及一个滚轮/按钮，用于导航或与设备内置助手交流。其配备2.3GHz MediaTek处理器、4GB内存和128GB存储空间，这一切都被封装在一个由 Teenage Engineering 设计公司合作设计的圆润机身中。Rabbit 只透露电池可以持续“一整天”。<br />
<br />
在 Rabbit 的发布会后，我短暂体验了 R1。这是一款令人印象深刻的硬件。在场的设备（仅Lyu的那台）是真正能工作的，但由于酒店 Wi-Fi 信号不佳，其功能受限。R1 意外地轻便，手感比照片中看上去要好。它的按钮触感出色，这对 Teenage Engineering 来说并不意外，整体握持感很好。不过，它容易留下指纹。<br />
<br />
R1 的真正亮点在于其内部软件：Rabbit OS操作系统和底层的 AI 技术。Rabbit 表示，与其说 Rabbit OS 是基于类似 ChatGPT 的大语言模型，不如说它是基于“大动作模型”。这可以被看作是一种万能的应用程序控制器。“我们想要找到一个像大语言模型那样的通用解决方案，”Lyu 说。“如何找到一个真正能触发我们服务的通用方案，无论是网站、应用程序还是其他平台？”<br />
<br />
从概念上讲，这与 Alexa 或 Google Assistant 相似。Rabbit OS 能控制音乐、预订车辆、购买杂货、发送消息等，全部通过一个界面实现。无需切换应用程序和登录，只需说出你的需求，让设备为你服务。R1 的界面将显示一系列基于类别的卡片，如音乐、交通或视频聊天等，Lyu 说这主要是为了让用户能够亲自确认模型的反馈。<br />
<br />
Rabbit 没有创建大量的 API 去说服开发者支持 R1，而是训练其模型自己使用现有应用。这个大动作模型，或 LAM，是通过人类与 Spotify 和 Uber 等应用的互动训练出来的，基本上是向模型展示它们是如何运作的。LAM 学会了识别设置图标、确认订单的时机以及搜索菜单的位置。Lyu 说，这一切都可以应用到任何应用程序上。<br />
<br />
R1 还具有一个专用的训练模式，你可以通过它教授设备如何执行特定操作，然后它就能自动重复这一操作。例如，Lyu 描述了一个如何去除水印的教学过程。“你会说，'首先，打开 Photoshop。打开它，然后拿起你的照片，在水印上做个套索，然后点击几下。这就是去除水印的方法。'”Rabbit OS 处理需要30秒，之后它就能自动去除所有水印。<br />
<br />
然而，R1 在实际应用中如何运作仍是个未知数。你可以在 R1 本身完成一些操作，并通过一个名为 Rabbit Hole 的网络门户登录到各种服务。如果你想教设备如何使用 Photoshop，你可以启动 Rabbit 的一台虚拟机进行教学，而无需使用你自己的设备和软件。但如何在众多用户、多种设备和平台上实现这一功能，仍然是一个挑战。<br />
<br />
ChatGPT 对网络搜索的影响可能与 Rabbit OS 对应用商店的影响相似。Rabbit 采取的方法颇具创新。即使你是科技巨头，让人们支持一个新操作系统也是艰难的，而通过教授模型如何使用应用程序，LAM 方法规避了这一点。更广泛地说，我们正在见证越来越多的 AI 驱动硬件 进入市场，但这些设备通常只是连接到一个聊天机器人。相比之下，Rabbit 更像是一个超级应用——一个可以通过它完成几乎任何事情的单一界面。ChatGPT 可能是网络搜索的未来，而 Rabbit OS 可能是应用商店的未来。当然，实现这个梦想伴随着许多复杂性和挑战，但它是一个令人着迷的愿景。<br />
<br />
不过，听 Lyu 谈论 Rabbit OS 和 R1，公司对这个设备的具体愿景似乎还不完全清晰。尽管它可以进行视频通话，并且配备了 SIM 卡插槽，但它还不足以完全取代你的手机。它主要是一个语音助手，但同时配备了屏幕和摄像头。它不仅仅是一个语音助手，但它确实执行了很多语音助手的功能。Rabbit 表示，他们在设计 Rabbit OS 时考虑到了安全性和隐私性，但同时也需要用户通过其界面登录到他们最常用的服务。在 Lyu 看来，R1 既是一个实用的配件，也是几乎所有事物的一体化未来。<br />
<br />
R1 目前已开放预订，Lyu 表示该设备将于3月开始发货。他甚至希望能比 Humane 的 AI Pin 更早上市。<br />
<br />
新闻来源：<a href="https://www.theverge.com/2024/1/9/24030667/rabbit-r1-ai-action-model-price-release-date">theverge.com/2024/1/9/240306…</a><br />
Rabbit R1 官网：<a href="https://www.rabbit.tech/">rabbit.tech/</a></p>
<p><a href="https://nitter.cz/xiaohuggg/status/1744902062306099206#m">nitter.cz/xiaohuggg/status/1744902062306099206#m</a></p>
<img src="https://nitter.cz/pic/enc/YW1wbGlmeV92aWRlb190aHVtYi8xNzQ0OTczOTUxMzg4Nzk0ODgwL2ltZy9IT3M2eDlvUU5IMXNZLWFKLmpwZw==" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/xiaohuggg/status/1744921720073728186#m</id>
            <title>RT by @dotey: Phi 2专家混合模型

它是结合了2 到4 个微调的microsoft/phi-2模型的专家混合体（Mixture of Experts, MoE）

灵感来源于mistralai/Mixtral-8x7B-v0.1架构。性能优于每个专家模型。

🤗 phixtral-2x2_8： https://huggingface.co/mlabonne/phixtral-2x2_8

🤗 phixtral-4x2_8：https://huggingface.co/mlabonne/phixtral-4x2_8</title>
            <link>https://nitter.cz/xiaohuggg/status/1744921720073728186#m</link>
            <guid isPermaLink="false">https://nitter.cz/xiaohuggg/status/1744921720073728186#m</guid>
            <pubDate></pubDate>
            <updated>Wed, 10 Jan 2024 03:18:51 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>Phi 2专家混合模型<br />
<br />
它是结合了2 到4 个微调的microsoft/phi-2模型的专家混合体（Mixture of Experts, MoE）<br />
<br />
灵感来源于mistralai/Mixtral-8x7B-v0.1架构。性能优于每个专家模型。<br />
<br />
🤗 phixtral-2x2_8： <a href="https://huggingface.co/mlabonne/phixtral-2x2_8">huggingface.co/mlabonne/phix…</a><br />
<br />
🤗 phixtral-4x2_8：<a href="https://huggingface.co/mlabonne/phixtral-4x2_8">huggingface.co/mlabonne/phix…</a></p>
<p><a href="https://nitter.cz/xiaohuggg/status/1734778292157444479#m">nitter.cz/xiaohuggg/status/1734778292157444479#m</a></p>
<img src="https://nitter.cz/pic/enc/Y2FyZF9pbWcvMTc0NDgzMTg5MDAzNTU0NDA2NC9Jc1lsWmoxRj9mb3JtYXQ9anBnJm5hbWU9ODAweDQxOQ==" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1744934002367062288#m</id>
            <title>来自字节跳动的文字生成视频技术MagicVideo-V2：多级高美感视频生成器

论文摘要
对于从文字描述生成高质量视频的需求日益增长，推动了该领域的相关重要研究。在这项工作中，我们推出了"MagicVideo-V2"，这是一个全程无缝的视频生成流程，它融合了各种技术模块，包括将文字转化为图像的技术、视频运动创建工具、可供参考的图像嵌入模块，以及帧间补充模块。得益于这些设计，"MagicVideo-V2"能够生成既美观又高分辨率的视频，且画质逼真且播放流畅。在大规模用户评估中，"MagicVideo-V2"的表现优于其他领先的文字转视频系统，如Runway、Pika 1.0、Morph、Moon Valley以及Stable Video Diffusion模型。

论文地址：https://arxiv.org/abs/2401.04468
项目网站：https://magicvideov2.github.io/</title>
            <link>https://nitter.cz/dotey/status/1744934002367062288#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1744934002367062288#m</guid>
            <pubDate></pubDate>
            <updated>Wed, 10 Jan 2024 04:07:40 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>来自字节跳动的文字生成视频技术MagicVideo-V2：多级高美感视频生成器<br />
<br />
论文摘要<br />
对于从文字描述生成高质量视频的需求日益增长，推动了该领域的相关重要研究。在这项工作中，我们推出了"MagicVideo-V2"，这是一个全程无缝的视频生成流程，它融合了各种技术模块，包括将文字转化为图像的技术、视频运动创建工具、可供参考的图像嵌入模块，以及帧间补充模块。得益于这些设计，"MagicVideo-V2"能够生成既美观又高分辨率的视频，且画质逼真且播放流畅。在大规模用户评估中，"MagicVideo-V2"的表现优于其他领先的文字转视频系统，如Runway、Pika 1.0、Morph、Moon Valley以及Stable Video Diffusion模型。<br />
<br />
论文地址：<a href="https://arxiv.org/abs/2401.04468">arxiv.org/abs/2401.04468</a><br />
项目网站：<a href="https://magicvideov2.github.io/">magicvideov2.github.io/</a></p>
<p><a href="https://nitter.cz/_akhaliq/status/1744914502703874215#m">nitter.cz/_akhaliq/status/1744914502703874215#m</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1744923217733566943#m</id>
            <title>这个功能好👍</title>
            <link>https://nitter.cz/dotey/status/1744923217733566943#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1744923217733566943#m</guid>
            <pubDate></pubDate>
            <updated>Wed, 10 Jan 2024 03:24:48 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>这个功能好👍</p>
<p><a href="https://nitter.cz/njukidreborn/status/1744827824094224634#m">nitter.cz/njukidreborn/status/1744827824094224634#m</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1744905292683391463#m</id>
            <title>来自JimFan的揭秘：

Mobile ALOHA 的“遥控操作”系统其实就是一种高级的“远程控制”技术。未来，训练机器人的过程将越来越像是在真实世界中玩游戏。操作者通过一个先进的操纵杆来执行任务和收集数据，必要时还能介入处理安全问题。掌握这种控制器的技巧，就像练习游戏技能一样，需要一段时间的学习。

遥控操作可以有多种实现方式。ALOHA 就是一个成本极低的自主定制系统。这里有几种其他的选择：

动作捕捉（MoCap）：利用好莱坞电影中的 MoCap 系统来捕捉手部关节的细微动作。如果机器人的手也有 5 个手指，就能完美复现人类的动作。例如，操作者可以戴上 CyberGlove（ http://cyberglovesystems.com ）来操控物体。CyberGlove 能实时捕获动作信号和触觉反馈，并将其传输到仿人机器人上。

传统的动作捕捉可能需要穿戴笨重的手套和标记，但有了计算机视觉技术，就可以更自然地进行。NVIDIA 开发的 DexPilot 项目实现了无需标记和手套的数据收集。操作者只需用裸手执行任务，4 个 Intel RealSense 深度摄像头和 2 个 NVIDIA Titan XP GPU（基于 2019 年的技术）会将这些动作转化为精确的运动信号，用于机器人学习。详情请见相关论文（arXiv:1910.03135）：https://arxiv.org/abs/1910.03135

VR 头盔：可以将训练空间变成一个 VR 游戏场景，操作者在其中扮演机器人的角色。这种方式的一个优点是能进行大规模的远程数据收集——全球的贡献者可以在不必亲自到现场的情况下参与项目。例如，我参与的斯坦福大学的 iGibson 家用机器人模拟器项目，就采用了这种 VR 演示技术。详细信息可参考斯坦福虚拟实验室网站。https://svl.stanford.edu/igibson/</title>
            <link>https://nitter.cz/dotey/status/1744905292683391463#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1744905292683391463#m</guid>
            <pubDate></pubDate>
            <updated>Wed, 10 Jan 2024 02:13:35 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>来自JimFan的揭秘：<br />
<br />
Mobile ALOHA 的“遥控操作”系统其实就是一种高级的“远程控制”技术。未来，训练机器人的过程将越来越像是在真实世界中玩游戏。操作者通过一个先进的操纵杆来执行任务和收集数据，必要时还能介入处理安全问题。掌握这种控制器的技巧，就像练习游戏技能一样，需要一段时间的学习。<br />
<br />
遥控操作可以有多种实现方式。ALOHA 就是一个成本极低的自主定制系统。这里有几种其他的选择：<br />
<br />
动作捕捉（MoCap）：利用好莱坞电影中的 MoCap 系统来捕捉手部关节的细微动作。如果机器人的手也有 5 个手指，就能完美复现人类的动作。例如，操作者可以戴上 CyberGlove（ <a href="http://cyberglovesystems.com">cyberglovesystems.com</a> ）来操控物体。CyberGlove 能实时捕获动作信号和触觉反馈，并将其传输到仿人机器人上。<br />
<br />
传统的动作捕捉可能需要穿戴笨重的手套和标记，但有了计算机视觉技术，就可以更自然地进行。NVIDIA 开发的 DexPilot 项目实现了无需标记和手套的数据收集。操作者只需用裸手执行任务，4 个 Intel RealSense 深度摄像头和 2 个 NVIDIA Titan XP GPU（基于 2019 年的技术）会将这些动作转化为精确的运动信号，用于机器人学习。详情请见相关论文（arXiv:1910.03135）：<a href="https://arxiv.org/abs/1910.03135">arxiv.org/abs/1910.03135</a><br />
<br />
VR 头盔：可以将训练空间变成一个 VR 游戏场景，操作者在其中扮演机器人的角色。这种方式的一个优点是能进行大规模的远程数据收集——全球的贡献者可以在不必亲自到现场的情况下参与项目。例如，我参与的斯坦福大学的 iGibson 家用机器人模拟器项目，就采用了这种 VR 演示技术。详细信息可参考斯坦福虚拟实验室网站。<a href="https://svl.stanford.edu/igibson/">svl.stanford.edu/igibson/</a></p>
<p><a href="https://nitter.cz/DrJimFan/status/1744786506810900679#m">nitter.cz/DrJimFan/status/1744786506810900679#m</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/xiaohuggg/status/1744623826510741764#m</id>
            <title>RT by @dotey: 阿里巴巴又整活了！

FaceChain-FACT：无需训练，上传你的照片克隆你自己🤓

你只需要上传一张照片，它就能提取你的面部特征，然后结合不同的风格模板，生成具有你个人特征的虚拟AI肖像。

可以实现让你在任意场景中或者生成各种风格、服装、个性化的你自己！

最牛P的是它可以运行在CPU上！达到秒级生成速度！

FaceChain-FACT的主要亮点：

1、支持零样本肖像生成。无需训练，上传照片即可！

2、训练模型时使用了数百万精美的人类肖像，确保生成肖像的真实性和质量。

3、提供100多种高级定制模板。

4、模型支持在CPU上运行，并实现秒级推理时间，生成速度极快！

5、兼容与ControlNet和LoRA插件，提供了更多的灵活性和创造空间。

技术原理：

现代面部定制在图像生成中面临挑战，尤其是因为人脸的高细节要求。

FaceChain通过训练一个LoRA模型，整合面部信息来生成定制化肖像。然而，由于需要训练用户的LoRA模型，FaceChain的流程分为训练和推理两个阶段，这增加了用户的成本。

因此，提出了一种无需面部LoRA模型训练的零样本版本，即FaceChain-FACT。此外，只需用户的单张照片，即可生成定制化肖像。与现有商业应用相比，生成速度提升了100倍，实现了秒级图像生成速度。

FaceChain-FACT整合了类似于Stable Diffusion的基于变换器的面部特征提取器，并使用了作为面部条件的密集细粒度特征，这些特征具有更好的角色再现能力。FaceChain-FACT与ControlNet和LoRA插件兼容，并支持即插即用。

方法：

该技术采用了一系列图像预处理方法，包括面部分割、裁剪和对齐、手部检测、面部质量筛选等，以筛选和获得训练数据集。

利用基于变换器的面部特征提取器提取特征，并利用倒数第二层的密集细粒度特征作为面部条件。

Stable Diffusion通过FACT-Adapter接收面部条件，并将其与文本嵌入结合，生成肖像图像。通过融合来自FaceChain的各种LoRA模型，可以生成多种风格的肖像。

项目及演示：https://facechain-fact.github.io/

GitHub：https://github.com/modelscope/facechain/tree/main/facechain_adapter（coming soon…）</title>
            <link>https://nitter.cz/xiaohuggg/status/1744623826510741764#m</link>
            <guid isPermaLink="false">https://nitter.cz/xiaohuggg/status/1744623826510741764#m</guid>
            <pubDate></pubDate>
            <updated>Tue, 09 Jan 2024 07:35:08 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>阿里巴巴又整活了！<br />
<br />
FaceChain-FACT：无需训练，上传你的照片克隆你自己🤓<br />
<br />
你只需要上传一张照片，它就能提取你的面部特征，然后结合不同的风格模板，生成具有你个人特征的虚拟AI肖像。<br />
<br />
可以实现让你在任意场景中或者生成各种风格、服装、个性化的你自己！<br />
<br />
最牛P的是它可以运行在CPU上！达到秒级生成速度！<br />
<br />
FaceChain-FACT的主要亮点：<br />
<br />
1、支持零样本肖像生成。无需训练，上传照片即可！<br />
<br />
2、训练模型时使用了数百万精美的人类肖像，确保生成肖像的真实性和质量。<br />
<br />
3、提供100多种高级定制模板。<br />
<br />
4、模型支持在CPU上运行，并实现秒级推理时间，生成速度极快！<br />
<br />
5、兼容与ControlNet和LoRA插件，提供了更多的灵活性和创造空间。<br />
<br />
技术原理：<br />
<br />
现代面部定制在图像生成中面临挑战，尤其是因为人脸的高细节要求。<br />
<br />
FaceChain通过训练一个LoRA模型，整合面部信息来生成定制化肖像。然而，由于需要训练用户的LoRA模型，FaceChain的流程分为训练和推理两个阶段，这增加了用户的成本。<br />
<br />
因此，提出了一种无需面部LoRA模型训练的零样本版本，即FaceChain-FACT。此外，只需用户的单张照片，即可生成定制化肖像。与现有商业应用相比，生成速度提升了100倍，实现了秒级图像生成速度。<br />
<br />
FaceChain-FACT整合了类似于Stable Diffusion的基于变换器的面部特征提取器，并使用了作为面部条件的密集细粒度特征，这些特征具有更好的角色再现能力。FaceChain-FACT与ControlNet和LoRA插件兼容，并支持即插即用。<br />
<br />
方法：<br />
<br />
该技术采用了一系列图像预处理方法，包括面部分割、裁剪和对齐、手部检测、面部质量筛选等，以筛选和获得训练数据集。<br />
<br />
利用基于变换器的面部特征提取器提取特征，并利用倒数第二层的密集细粒度特征作为面部条件。<br />
<br />
Stable Diffusion通过FACT-Adapter接收面部条件，并将其与文本嵌入结合，生成肖像图像。通过融合来自FaceChain的各种LoRA模型，可以生成多种风格的肖像。<br />
<br />
项目及演示：<a href="https://facechain-fact.github.io/">facechain-fact.github.io/</a><br />
<br />
GitHub：<a href="https://github.com/modelscope/facechain/tree/main/facechain_adapter">github.com/modelscope/facech…</a>（coming soon…）</p>
<img src="https://nitter.cz/pic/enc/YW1wbGlmeV92aWRlb190aHVtYi8xNzQ0NjIzNTUzNDQ4OTUxODA4L2ltZy9kbXVad0p5Z2JJeUhTMVJGLmpwZw==" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1744784191370285161#m</id>
            <title>Go 语言之父 Rob Pike 写的长文：在 Go 语言 14 年的发展历史中，我们做得对的和不对的

基于他去年在悉尼 GopherConAU 会议上所做的闭幕演讲的内容整理补充而成，系统的总结回顾了 Go 的发展过程中的经验教训，例如 Go 语言中并发、接口的设计；Go 语言作为一个开源项目是如何进行项目管理的，其中做的好的和不够的地方。

原文：https://commandcenter.blogspot.com/2024/01/what-we-got-right-what-we-got-wrong.html
译文：https://baoyu.io/translations/software-engineering/what-we-got-right-what-we-got-wrong</title>
            <link>https://nitter.cz/dotey/status/1744784191370285161#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1744784191370285161#m</guid>
            <pubDate></pubDate>
            <updated>Tue, 09 Jan 2024 18:12:22 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>Go 语言之父 Rob Pike 写的长文：在 Go 语言 14 年的发展历史中，我们做得对的和不对的<br />
<br />
基于他去年在悉尼 GopherConAU 会议上所做的闭幕演讲的内容整理补充而成，系统的总结回顾了 Go 的发展过程中的经验教训，例如 Go 语言中并发、接口的设计；Go 语言作为一个开源项目是如何进行项目管理的，其中做的好的和不够的地方。<br />
<br />
原文：<a href="https://commandcenter.blogspot.com/2024/01/what-we-got-right-what-we-got-wrong.html">commandcenter.blogspot.com/2…</a><br />
译文：<a href="https://baoyu.io/translations/software-engineering/what-we-got-right-what-we-got-wrong">baoyu.io/translations/softwa…</a></p>
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0RhMzN2R1hJQUFBdEFyLnBuZw==" />
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0RhMzVweFhjQUFpbXpwLnBuZw==" />
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0RhMzh0UFcwQUF5OG1ILmpwZw==" />
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0RhMzlQVFdNQUF3aGcyLmpwZw==" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1744754475770712067#m</id>
            <title>R to @dotey: AnyText 的在线测试地址：
https://anytext.pics/</title>
            <link>https://nitter.cz/dotey/status/1744754475770712067#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1744754475770712067#m</guid>
            <pubDate></pubDate>
            <updated>Tue, 09 Jan 2024 16:14:17 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>AnyText 的在线测试地址：<br />
<a href="https://anytext.pics/">anytext.pics/</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1744754251404918874#m</id>
            <title>AnyText 的在线测试地址：
https://anytext.pics/</title>
            <link>https://nitter.cz/dotey/status/1744754251404918874#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1744754251404918874#m</guid>
            <pubDate></pubDate>
            <updated>Tue, 09 Jan 2024 16:13:24 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>AnyText 的在线测试地址：<br />
<a href="https://anytext.pics/">anytext.pics/</a></p>
<p><a href="https://nitter.cz/dotey/status/1741254641407365315#m">nitter.cz/dotey/status/1741254641407365315#m</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/Cydiar404/status/1744685573246521392#m</id>
            <title>RT by @dotey: 其实大家都觉得是号池，这个号池不是一般人能玩的起的，从注册到养号到损耗，一个号池如果要支撑一个大项目，基本需要上百万的资金量，如果OpenAI严控，直接就底儿掉了，这也是概率事件！大厂是收额度号自己直接购买Azure GPT4 个人账户，直接用超强的调用能力，直接调穿！举个例子，之前可以通过海外企业申请2500刀额度号，这个额度是跟着月度消耗阈值走的〈比如120刀〉，但是，如果调用量非常大，直接2500刀就可以调穿了，然后弃掉，其他的需要了解可以继续提问。</title>
            <link>https://nitter.cz/Cydiar404/status/1744685573246521392#m</link>
            <guid isPermaLink="false">https://nitter.cz/Cydiar404/status/1744685573246521392#m</guid>
            <pubDate></pubDate>
            <updated>Tue, 09 Jan 2024 11:40:30 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>其实大家都觉得是号池，这个号池不是一般人能玩的起的，从注册到养号到损耗，一个号池如果要支撑一个大项目，基本需要上百万的资金量，如果OpenAI严控，直接就底儿掉了，这也是概率事件！大厂是收额度号自己直接购买Azure GPT4 个人账户，直接用超强的调用能力，直接调穿！举个例子，之前可以通过海外企业申请2500刀额度号，这个额度是跟着月度消耗阈值走的〈比如120刀〉，但是，如果调用量非常大，直接2500刀就可以调穿了，然后弃掉，其他的需要了解可以继续提问。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1744645584915472681#m</id>
            <title>啥原理呀？</title>
            <link>https://nitter.cz/dotey/status/1744645584915472681#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1744645584915472681#m</guid>
            <pubDate></pubDate>
            <updated>Tue, 09 Jan 2024 09:01:36 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>啥原理呀？</p>
<p><a href="https://nitter.cz/henuwangkai/status/1744632528429056354#m">nitter.cz/henuwangkai/status/1744632528429056354#m</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1744623349404225770#m</id>
            <title>R to @dotey: 采访者： 十年后，你认为微软会处于什么位置？

盖茨： 我们的目标很明确：开发能让每个办公桌和每个家庭都配备一台计算机的软件。我不确定这会花多少时间——预测具体时间不是我的强项。微软也想参与确保这些计算机的质量，我们将构建它们的系统软件，并开发它们需要的重要应用。

虽然将来会有更多计算机，但我们认为无需扩大开发团队，因为我们将制作更多销量的软件。这样，我们能够获得丰富的软件收益，同时保持公司规模相对稳定。这意味着我们可以更好地了解每位员工，促进沟通和工具共享，确保高质量标准的维持。

微软正在专注的一个新领域是光盘（CD-ROM）应用。我们将利用 CD-ROM 技术把个人计算机带进千家万户。

采访者： 您为什么认为 CD-ROM 会在家庭中成功，而其他技术没有？

盖茨： 现在，如果你买了台计算机再买教育软件，你会发现这个过程并不怎么有教育意义。软件的互动性和模拟现实生活的能力非常有限。而 CD-ROM 的大容量存储让我们能创造出更加丰富、互动性强的情境。

在教育软件领域，我们的竞争对手包括报纸、书籍和电视。目前的软件无法与它们竞争。如果不是为了避免孩子落后，那真的没有买这些设备的必要，它们不能真正吸引人，特别是对非计算机用户。

采访者： 您认为 CD-ROM 应用能与电视竞争吗？

盖茨： 电视是被动的娱乐方式。我们相信，人们更愿意与内容互动，选择不同的路径，并从机器中获得学习反馈。他们可以搜索自己感兴趣的特定内容。CD-ROM 的互动性是其与仅仅打开电视观看节目不同的地方。

采访者： 您在设计应用程序时所遵循的原则，会应用到 CD-ROM 软件产品中吗？

盖茨： CD-ROM 完全是新领域。我们希望通过 CD-ROM，你能查看美国地图，点击某个地点，放大查看，并询问：“这附近有什么酒店？”程序会给出答案。如果你在百科全书里点击贝多芬的一首交响曲，计算机就会播放。这是全新的界面，与文字处理器或电子表格等生产工具截然不同。CD-ROM 程序将解决全新的问题。在这个新媒体领域，竞争将非常激烈。我们要如何运用编程技能开发出优于他人的 CD-ROM 应用？这需要深思熟虑。它不仅仅是我们现有程序的另一个市场，而是一个完全新的领域，我们希望凭借智慧开发出创新和适宜的产品。

采访者： 所以，仅仅是把一堆报纸放进 CD-ROM 并编写一个检索程序就这么简单吗？

盖茨： 当然，有人会那样做，但我们不会。那没什么吸引力。我们坚信未来每辆车和每个家庭都会配备 CD ROM（光盘驱动器）。当你到达一个新地区时，你只需插入一张小光盘，就可以在上面查看路线、了解兴趣点。

举个例子，体育领域。你会有一张专门的体育光盘，插入后可以查看运动员的记录和照片。你可以回顾过往的比赛，查找比赛规则。每张光盘都包含教程，帮你学习感兴趣的领域。比如，如果你对棒球很了解，光盘上的测验会问，“这个人是谁？他做了什么？”

每张光盘都会提供互动游戏。在体育光盘上，这一点很明显。音乐光盘上的游戏可能是“猜曲名”，你可以查看乐谱，了解作曲家，听听不同乐器的声音。你甚至可以自己编写简单的乐谱。如果你是飞行员，那么机场和飞机的图片等内容也会在光盘上找到。

采访者： 这些 CD ROM 应用会在书店出售吗？

盖茨： 最终会的。目前我们正在探索合适的销售渠道。比如，专业计算机零售店是否会参与其中？我个人对此持保留态度。

有些 CD 应用听起来像幻想。但新媒体的出现毕竟很罕见。录像带并不算新媒体，它只是电视的延时播放形式，并无二致。交互式视频光盘曾有机会成为新媒体，但未能成气候。它缺乏足够的内容、低成本播放器和便利性，未能融入主流文化。光盘是交互式视频的进化版，但我们还需做得更好。

CD 带来的变化将是革命性的。我认为，零件目录不大可能再以印刷形式出现。对于那些需要查询、操作、以不同方式呈现信息的参考类资料，电子形式远远优于其他形式。对我们来说，最大的竞争对手是书籍。虽然 CD 不会对书市场构成重大冲击，但它将替代目录和某些类型的参考资料。

采访者： 您认为这会催生出像电视文化那样的新文化吗？

盖茨： 我不确定什么是新文化，但 CD 比电视更具互动性。CD 的用途不仅限于个人计算机编程那样的特定领域。它同样具有令人上瘾、深度参与的特质。用户不仅仅是被动接受，还会参与互动，比如在测验中挑战自己：“我是个高手，让我来试试。”我们会设计测验，让多人参与，为对方选择问题。如果孩子沉迷于个人电脑，我认为这总比看电视好，至少他们在做出选择，锻炼着思维。我并不讨厌电视，但电视不太能锻炼人的思维。顺便说一句，我自己就没有电视。

采访者： 你认为如果采用不同的标准，CD ROM 的发展可能会受到影响吗？

盖茨： 微软和其他规模比我们大数百倍的公司，正在这一领域进行激烈的政治角力，试图确立标准。可能会出现两个甚至三个互不兼容的浏览器，考虑到开发这些软件的高成本，这种情况是不幸的。因此，我们把大量精力投入到这里。我们正努力确保我们的标准被普遍接受，这是一个艰巨的挑战。我们必须迅速行动，集中所有的活动来推广一个标准，并确保这是一个合理的标准。 如果没有半导体行业的支持，我们无法实现这样的浏览器。正是存储器的低成本和高速处理器、视频芯片和音频芯片的进步，使计算机成为了一个多媒体工具。半导体行业正在创造奇迹。直到最近两年，由于其他用途的大量购买，所有的组件价格才变得非常吸引人。

采访者： 你觉得 CD ROM 会和专家系统结合吗？

盖茨： 不，它们相互之间并不依赖。虽然将来可能会通过 CD 来分发专家系统的数据，因为它能存储大量的数据库，但这两者并不是相互必需的。每个领域都有自己独特的挑战。

要制作一张世界级的 CD，所需的技能组合非常复杂，包括视频、音频、编程和交互性。这和所有新媒体一样，是个艰巨的任务。就像电视初期，电视演员们自认为比广播电台的人优秀，但他们只是静静地站在那里。人们花了很长时间才创造出丰富多彩的画面、生动的动作、立体的布景和电视上的特效。CD 也会随着我们对这种媒介的熟练掌握而不断进步。我现在可以告诉你我们不会犯哪些错误，但五年后，我可能又会告诉你我们确实犯了哪些错误。尽管我们很有创造力，但我们不可能立即完全掌握这种媒介。

采访者： 你有没有想过回到独自编程的日子？

盖茨： 当然，绝对有。那时你可以掌控一切，没有妥协。每一行代码都是你的作品，你为此感到自豪。这可能有点自私，但这就像被允许纯粹地从事数学研究一样，同时你还能获得让事物真正运作的实际反馈。我有时确实会羡慕那些能够只专注于他们正在编写的程序的同事们。

原文：https://programmersatwork.wordpress.com/bill-gates-1986/
译文：https://baoyu.io/translations/people/bill-gates-1986</title>
            <link>https://nitter.cz/dotey/status/1744623349404225770#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1744623349404225770#m</guid>
            <pubDate></pubDate>
            <updated>Tue, 09 Jan 2024 07:33:14 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>采访者： 十年后，你认为微软会处于什么位置？<br />
<br />
盖茨： 我们的目标很明确：开发能让每个办公桌和每个家庭都配备一台计算机的软件。我不确定这会花多少时间——预测具体时间不是我的强项。微软也想参与确保这些计算机的质量，我们将构建它们的系统软件，并开发它们需要的重要应用。<br />
<br />
虽然将来会有更多计算机，但我们认为无需扩大开发团队，因为我们将制作更多销量的软件。这样，我们能够获得丰富的软件收益，同时保持公司规模相对稳定。这意味着我们可以更好地了解每位员工，促进沟通和工具共享，确保高质量标准的维持。<br />
<br />
微软正在专注的一个新领域是光盘（CD-ROM）应用。我们将利用 CD-ROM 技术把个人计算机带进千家万户。<br />
<br />
采访者： 您为什么认为 CD-ROM 会在家庭中成功，而其他技术没有？<br />
<br />
盖茨： 现在，如果你买了台计算机再买教育软件，你会发现这个过程并不怎么有教育意义。软件的互动性和模拟现实生活的能力非常有限。而 CD-ROM 的大容量存储让我们能创造出更加丰富、互动性强的情境。<br />
<br />
在教育软件领域，我们的竞争对手包括报纸、书籍和电视。目前的软件无法与它们竞争。如果不是为了避免孩子落后，那真的没有买这些设备的必要，它们不能真正吸引人，特别是对非计算机用户。<br />
<br />
采访者： 您认为 CD-ROM 应用能与电视竞争吗？<br />
<br />
盖茨： 电视是被动的娱乐方式。我们相信，人们更愿意与内容互动，选择不同的路径，并从机器中获得学习反馈。他们可以搜索自己感兴趣的特定内容。CD-ROM 的互动性是其与仅仅打开电视观看节目不同的地方。<br />
<br />
采访者： 您在设计应用程序时所遵循的原则，会应用到 CD-ROM 软件产品中吗？<br />
<br />
盖茨： CD-ROM 完全是新领域。我们希望通过 CD-ROM，你能查看美国地图，点击某个地点，放大查看，并询问：“这附近有什么酒店？”程序会给出答案。如果你在百科全书里点击贝多芬的一首交响曲，计算机就会播放。这是全新的界面，与文字处理器或电子表格等生产工具截然不同。CD-ROM 程序将解决全新的问题。在这个新媒体领域，竞争将非常激烈。我们要如何运用编程技能开发出优于他人的 CD-ROM 应用？这需要深思熟虑。它不仅仅是我们现有程序的另一个市场，而是一个完全新的领域，我们希望凭借智慧开发出创新和适宜的产品。<br />
<br />
采访者： 所以，仅仅是把一堆报纸放进 CD-ROM 并编写一个检索程序就这么简单吗？<br />
<br />
盖茨： 当然，有人会那样做，但我们不会。那没什么吸引力。我们坚信未来每辆车和每个家庭都会配备 CD ROM（光盘驱动器）。当你到达一个新地区时，你只需插入一张小光盘，就可以在上面查看路线、了解兴趣点。<br />
<br />
举个例子，体育领域。你会有一张专门的体育光盘，插入后可以查看运动员的记录和照片。你可以回顾过往的比赛，查找比赛规则。每张光盘都包含教程，帮你学习感兴趣的领域。比如，如果你对棒球很了解，光盘上的测验会问，“这个人是谁？他做了什么？”<br />
<br />
每张光盘都会提供互动游戏。在体育光盘上，这一点很明显。音乐光盘上的游戏可能是“猜曲名”，你可以查看乐谱，了解作曲家，听听不同乐器的声音。你甚至可以自己编写简单的乐谱。如果你是飞行员，那么机场和飞机的图片等内容也会在光盘上找到。<br />
<br />
采访者： 这些 CD ROM 应用会在书店出售吗？<br />
<br />
盖茨： 最终会的。目前我们正在探索合适的销售渠道。比如，专业计算机零售店是否会参与其中？我个人对此持保留态度。<br />
<br />
有些 CD 应用听起来像幻想。但新媒体的出现毕竟很罕见。录像带并不算新媒体，它只是电视的延时播放形式，并无二致。交互式视频光盘曾有机会成为新媒体，但未能成气候。它缺乏足够的内容、低成本播放器和便利性，未能融入主流文化。光盘是交互式视频的进化版，但我们还需做得更好。<br />
<br />
CD 带来的变化将是革命性的。我认为，零件目录不大可能再以印刷形式出现。对于那些需要查询、操作、以不同方式呈现信息的参考类资料，电子形式远远优于其他形式。对我们来说，最大的竞争对手是书籍。虽然 CD 不会对书市场构成重大冲击，但它将替代目录和某些类型的参考资料。<br />
<br />
采访者： 您认为这会催生出像电视文化那样的新文化吗？<br />
<br />
盖茨： 我不确定什么是新文化，但 CD 比电视更具互动性。CD 的用途不仅限于个人计算机编程那样的特定领域。它同样具有令人上瘾、深度参与的特质。用户不仅仅是被动接受，还会参与互动，比如在测验中挑战自己：“我是个高手，让我来试试。”我们会设计测验，让多人参与，为对方选择问题。如果孩子沉迷于个人电脑，我认为这总比看电视好，至少他们在做出选择，锻炼着思维。我并不讨厌电视，但电视不太能锻炼人的思维。顺便说一句，我自己就没有电视。<br />
<br />
采访者： 你认为如果采用不同的标准，CD ROM 的发展可能会受到影响吗？<br />
<br />
盖茨： 微软和其他规模比我们大数百倍的公司，正在这一领域进行激烈的政治角力，试图确立标准。可能会出现两个甚至三个互不兼容的浏览器，考虑到开发这些软件的高成本，这种情况是不幸的。因此，我们把大量精力投入到这里。我们正努力确保我们的标准被普遍接受，这是一个艰巨的挑战。我们必须迅速行动，集中所有的活动来推广一个标准，并确保这是一个合理的标准。 如果没有半导体行业的支持，我们无法实现这样的浏览器。正是存储器的低成本和高速处理器、视频芯片和音频芯片的进步，使计算机成为了一个多媒体工具。半导体行业正在创造奇迹。直到最近两年，由于其他用途的大量购买，所有的组件价格才变得非常吸引人。<br />
<br />
采访者： 你觉得 CD ROM 会和专家系统结合吗？<br />
<br />
盖茨： 不，它们相互之间并不依赖。虽然将来可能会通过 CD 来分发专家系统的数据，因为它能存储大量的数据库，但这两者并不是相互必需的。每个领域都有自己独特的挑战。<br />
<br />
要制作一张世界级的 CD，所需的技能组合非常复杂，包括视频、音频、编程和交互性。这和所有新媒体一样，是个艰巨的任务。就像电视初期，电视演员们自认为比广播电台的人优秀，但他们只是静静地站在那里。人们花了很长时间才创造出丰富多彩的画面、生动的动作、立体的布景和电视上的特效。CD 也会随着我们对这种媒介的熟练掌握而不断进步。我现在可以告诉你我们不会犯哪些错误，但五年后，我可能又会告诉你我们确实犯了哪些错误。尽管我们很有创造力，但我们不可能立即完全掌握这种媒介。<br />
<br />
采访者： 你有没有想过回到独自编程的日子？<br />
<br />
盖茨： 当然，绝对有。那时你可以掌控一切，没有妥协。每一行代码都是你的作品，你为此感到自豪。这可能有点自私，但这就像被允许纯粹地从事数学研究一样，同时你还能获得让事物真正运作的实际反馈。我有时确实会羡慕那些能够只专注于他们正在编写的程序的同事们。<br />
<br />
原文：<a href="https://programmersatwork.wordpress.com/bill-gates-1986/">programmersatwork.wordpress.…</a><br />
译文：<a href="https://baoyu.io/translations/people/bill-gates-1986">baoyu.io/translations/people…</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1744623157804195951#m</id>
            <title>比尔·盖茨在1986年的采访稿，猜猜那时候他写代码吗？

作为微软的掌舵人，威廉·H·(比尔) 盖茨被视为当今个人计算机和办公自动化行业的领军人物。盖茨从年少时代就踏入了计算机软件领域。他和微软的另一位创始人保罗·艾伦，在西雅图的高中时期就已经开始担任编程顾问。1974 年，当时还是哈佛大学学生的盖茨与艾伦合作，为首款商用微型计算机 MITS Altair 开发了 BASIC（基础）编程语言。这个项目大获成功后，他们俩共同创立了微软，目标是为新兴的微型计算机市场提供软件开发和销售服务。

微软在编程语言、操作系统和应用软件方面为整个软件行业设立了标准。盖茨不仅为公司的新产品理念和技术发展提供了方向，还亲自指导技术团队研发新产品，他把大量时间投入到审查和优化微软的软件产品中。

盖茨出生并成长在华盛顿州西雅图地区，至今仍然居住在那里。他的出生年份是 1955 年。

采访者： 作为微软的首席执行官，您身负重任。您现在还亲自编写代码吗？

盖茨： 不，我现在不再编写代码了。虽然我仍然参与设计算法和基本架构，偶尔也会审查代码。但自从我参与开发 IBM PC BASIC 和 Model 100 之后，就没再亲手编写过程序。

采访者： 那么，在微软的程序开发中，您扮演着怎样的角色？

盖茨： 我主要负责两项重要工作。第一，选择程序中要加入的功能。要做到这一点，你需要对哪些功能容易实现哪些难以实现有一个清晰的认识。你还需要理解我们的产品“家族”策略，以及硬件的最新动态。

第二，我负责策划新功能的最佳实现方式，确保它们既紧凑又高效。举个例子，我曾写过一份关于如何设计和实现一个功能的备忘录，这个功能被应用在 Excel 中，它能让程序在屏幕发生变化时自动重新计算公式。

在微软成立的最初四年里，我参与了公司所有程序的编写和设计工作。无论是 BASIC、FORTRAN、BASIC 6800 还是 BASIC 6502，每一行代码在发布前都经过了我的仔细审查。但现在，公司拥有大约 160 名程序员，所以我主要负责对产品和算法进行评审。

采访者： 在您的编程生涯中，您认为自己最伟大的成就是什么？

盖茨： 对我来说，编写 8080 的 BASIC 语言最具影响力，因为它当时非常适用，且我们成功将其精简至极。这是我们创立微软时编写的第一个程序。

我们中有三人能够熟记这个原始程序。在阿尔伯克基的一个夏天，我们有机会对它进行彻底的重写。我觉得我们能够进一步精简代码，使程序更加紧凑。我们极其细致地优化了这个程序，最终打造出一个 4K 大小的 BASIC 解释器 (BASIC interpreter)。

当你对一个程序如此了如指掌，你会自信地认为没有人能够指出更好的编程方法。这种自豪感非常棒，再加上这个程序被众多机器采用，使其成为一项令人激动的成就。

关于 Model 100 上的软件，我也感到非常自豪，尤其是我们如何成功集成了一个非常实用的小型编辑器。我与一位日本程序员杰伊·铃木 (Jey Suzuki) 合作完成了这个项目。我们完成这个项目的时间非常紧迫。当你的软件需要被烧录到 ROM 中时，是没有犯错的余地的。

采访者： 在计算机编程中，你认为最困难的部分是什么？

盖茨： 最大的挑战在于确定算法是什么，并尽可能地简化它们。把事情简化到最基本的形态非常难。你必须在脑海中模拟程序的运作方式，并且完全理解程序的各个部分如何协同工作。最出色的软件往往是那些由个别程序员对程序的工作方式有着完整理解的。为了达到这种理解，你必须真正热爱这个程序，并专注于让它保持极度简单。

采访者： 随着计算机处理能力和内存的大幅提升，程序是否变得更复杂，或者只是更加粗糙了？这如何影响人们编程的方式？

盖茨： 我们不再是处于每个程序都经过精心打造的时代了。但在那些顶尖程序的核心，你会发现关键内部代码通常由少数真正懂行的人编写。

现在，将程序压缩到 4K 内存区域已不再那么重要。你会看到越来越多的情况，人们可以选择使用 C 语言而非汇编语言。遗憾的是，很多程序变得如此庞大，以至于没有一个人能完全掌握它们的所有部分，导致代码共享不如以往那样广泛。此外，因为总有新功能要加入，所以重新编写程序的机会也减少了。

最糟糕的程序是那些在初始阶段未能打下坚实基础的，而且原始程序员后来不再参与其中。这些程序的处理方式达到了我称之为“实验性编程”的地步。程序员对这些程序的了解太少，以至于他们无法预测更改可能如何影响程序的速度等方面。他们可能复用现有的代码，或者不清楚更改某些内容会破坏哪些依赖关系。因此，他们添加新代码，运行后发现“哦，它不是这样运行的”。这是一种极其低效的编程方式，但许多项目最终都沦为这样。

采访者： 在像微软这样有 160 名程序员的公司里，你们是如何创造一个能够开发成功程序的环境的？

盖茨： 组建一个小型项目团队，通常四到五人，其中必须有一人具备深入理解程序的能力是一种方法。当这位负责人在某些问题上有所疑惑时，他或她应该可以与更有经验的程序员进行探讨。

我们的策略之一是在编码阶段前让程序员充分思考。撰写设计文档非常关键，因为在将问题以算法形式表达时，可以实现大量简化。此时，问题以最精简的形式呈现，让你能够看到它们之间的交集。

代码审查也很重要，要确保审查代码，看看有经验的人员能否提出改进的建议。还需要回顾那些进行得非常顺利的类似项目；程序员可以从中学习别人的成功经验，获得改善自己程序的灵感。

采访者： 程序的灵感来源是什么？

盖茨： 实际上没有一个固定的过程。在微软，我们通常会在晚上或周末举行头脑风暴会议。每个人都有一个大概的想法，比如制作世界上最好的文字处理器。我们希望它能满足技术出版部门的所有需求。我们会坐下来讨论：怎样才能提高效率？我们是否能加入绘图功能，或者在不显著降低程序速度的情况下实现字符紧排？我们会探讨各种问题，并产生一些创新的想法。

采访者： 所以这是一个团队协作的过程？

盖茨： 对于确定程序功能而言，确实是一个大团队共同提出建议的过程。接着是一个筛选阶段。最终，我会决定哪些想法是可行的，并确保有负责人亲自投入，确保产品成功。我们选择进行的项目非常少，因为要推出一款产品并设定全新的世界级标准，需要极大的专注和资源。

采访者： 关于大型软件公司难以吸引能够开发出色软件的优秀人才的观点，这些特立独行的人才往往更愿意独立工作，您如何在微软吸引并留住这些优秀人才？

盖茨： 优秀的程序员对于创造软件产品至关重要。但我们不支持那种因为某人能力出众就纵容其任性的做法，比如不注释代码、不与他人沟通或强加自己的想法于他人。

我们希望员工能够真正相互尊重。我相信，大多数优秀的程序员都愿意与同样优秀的同行一起工作。当他们设计出一个非凡的算法时，他们喜欢有能够理解其巧妙之处的同僚。因为在脑海中构思这样的模型是一种孤独的体验。如果你原以为一个过程必须复杂，然后突然找到了简化它的方法，那会让你感到非常满足。但同时，你也希望得到同事的反馈。有了几位优秀人才后，更多的人才也会随之加入。

过去有一种观点，认为程序员的经理总是比程序员本身更优秀，没有所谓的“技术倒置”，即一个程序员为不懂编程的人工作。我们依然遵循这一理念：虽然在某些层级我们设有商业经理，但我们不让非程序员直接管理编程项目。

采访者： 您认为创造优秀程序有哪些特别的原则吗？

GATES: 有人是一头扎进去就开始编码，有人则是先全盘规划后再动手，但我认为你会发现，那些一上来就开始编码的程序员实际上只是在用代码作为思考的草稿。真正关键的是他们脑海里的思考过程。

你需要一位极其聪明的人。一个杰出的程序员会持续不断地思考着程序，无论是在驾驶还是用餐时。这样的思考方式对精神能量的要求非常高。

采访者： 你如何描述自己的编程风格？

盖茨： 在我动手写代码之前，我喜欢先从设计层面上把整个程序想清楚。写完代码后，我还会整体重新编写一遍。设计数据结构是编程最关键的部分，其次是将代码细分成不同的模块。只有当你亲自下手编写时，才能真正明白哪些是应该公用的子程序。

我写出过的那些杰出程序，都是那些我在动手前就反复思考了很长时间的。例如，我高中时为一台小型计算机编写了一个 BASIC 解释器，那时犯了很多严重的错误。后来，我研究了其他的 BASIC 解释器，所以到了 1975 年编写 Microsoft BASIC 时，我的挑战不再是能否写出这个程序，而是如何将其压缩到 4K 并且运行极快。我一直在担心：“这个程序够快吗？会不会有人做得更快？”

我记得在 TRW 遇到一个叫诺顿的人，他总能指出我哪里做得不够好。每当我做事马虎或懒散时，我就会想象他会过来指点我：“你看，这样做会更好。”程序中很容易悄悄产生小的效率问题，如果你想让程序尽善尽美，就必须时刻警惕这些问题的潜入。这也是为什么有时让别人参与你的项目会让你感到困扰，因为他们的编码风格总是和你不一样。记得在开发 BASIC 的时候，我常常重写别人的代码，即使这样并没有带来显著的改进。这种做法可能会让人不舒服，但有时候你就是觉得非这样做不可。

采访者： 在团队合作中，你总是担任设计的主导角色吗？

盖茨： 是的，在我直接参与的所有项目中，我都担任主要的设计角色。在最初的 BASIC 项目中，我在纸上草拟设计方案。我的合作者保罗·艾伦（Paul Allen）负责设计并实现所有开发工具。

在我开始编写代码之前，我通常已经在脑中预演了大部分的指令。虽然这些想法并不是完全成熟的，我在编程时仍会做出调整，但所有好的灵感都是在我动手编程之前就已经浮现。如果程序出现了错误，我会感到非常沮丧，因为这意味着我的心理模拟是有缺陷的。一旦心理模拟出现问题，程序中可能就隐藏着成千上万的错误。我真的无法忍受看到一些程序员在编程时缺乏深思熟虑的过程。

编写 BASIC 是我有过的最愉快的编程经验之一。我完成了 8080 版本的 BASIC，然后和马克·张伯伦（Mark Chamberlain）一起用大约两周的时间开发 6809 版本的 BASIC。那两周开始时，我先学习了新的指令集，并编写了三四个小程序。我还研究了其他人的程序，看看他们是如何利用这套指令集的。将我熟悉的问题映射到这个新的指令集上，并且尽可能地紧凑组合，这个过程非常有趣。

如今的程序变得越来越庞大，增加的功能往往会减缓程序速度。这是因为开发者在添加新特性时，往往未充分考虑到所加入的特殊检查会如何影响效率。要避免这种情况，就需要一个对程序极其熟悉的程序员来把关。以我们的 BASIC 为例，在我和其他创始成员离开后，大约有三年时间里，我们没有做出什么创新。直到最近一年半，我们才找到了那些对 BASIC 有深刻理解和归属感的人，他们可以轻松说出，“没问题，加入子程序和去除行号很简单。”我们一直有这样的目标，但直到找到那些能深入到程序核心，而非仅仅在外围增加功能的人之前，我们都不敢轻易修改程序。

确实，我们现在允许程序稍微变大一些。但就速度而言，不尽力追求最快无疑是种懒惰，因为用户会察觉到那些真正快速的程序，尽管他们可能无法明确指出。在最成功的程序中，快速的执行效率总是令人惊艳。

采访者： 在速度和性能方面，你们是如何做出取舍的？

盖茨： 有时候，我们需要在增加功能和追求快速执行之间做出权衡。但实际上，有很多方法可以在拥有大量功能的同时，依然保持高速度。关键是要确定程序中的常见操作，并确保它们能够高效执行，不被各种特殊情况的检查所拖累。如果程序的核心交互循环布满了各种检查，那么它的速度就会不如其他程序。

采访者： 当你们打算开发世界上最好的文字处理器时，你们是如何入手的？你们会研究市面上所有的文字处理器吗？

盖茨： 是的，我们会从功能角度出发，研究市场上所有的文字处理器，比如，我们会问：“有哪些产品在屏幕上进行字距调整，或者能展示打印页面的实际样子？它们的反应速度如何？”通常，在产品线的顶端，总有一些公司利用昂贵的硬件通过蛮力解决问题。我们无法这样做，因为我们使用的计算机性能有限。很多我们正在尝试的功能，在更强大的计算机上已经实现过；我们的目标是让这些功能在普通用户手中的设备上也能流畅运行。

在产品开发中，我们可以使用各种巧妙的技巧。我们在构建功能列表的同时，也在思考如何使我们的算法超越其他人。“功能”这个概念有些微妙，因为功能越多，用户手册就越厚。功能真正有价值的是在用户花时间去使用它们的时候。而速度——如果能更快地打印页面、在屏幕上更快地显示或更快地处理数据——这些则有极大的价值。如果你能为用户提供几个简单的命令，并确保程序足够高效，以便用户用这些简单的命令就能完成他们想要的操作，那就更好了。优秀的程序的一个标志是它们在内部也遵循简化的原则。它们在执行复杂任务时，会调用简单的操作，而不是每次都从头开始处理。

采访者： 用户的重要性有多大？您是如何了解数据库管理员在其数据库或电子表格中真正需要或希望的内容？

盖茨： 有些程序员并不假装能准确理解最终用户的需求，他们依然是顶尖的程序员。但对市场的了解尤为重要，尤其是在应用程序团队中。因此，我们有专职人员负责向客户展示代码或审查其他的规格要求等。在微软初创时，我们只专注于系统程序，因为我们自身就是程序员，所以非常了解其他程序员的需求。这就是我们为什么会开发出 BASIC。

采访者： BASIC 中最具创新性的方面是什么？

盖茨： 最关键的是我们让用户能够充分发挥机器的性能。我们引入了 PEEK 和 POKE 功能，允许用户读取和修改机器的状态。我们还加入了 TRON 和 TROFE 这样的跟踪程序。即使用户使用的是高级语言，我们也让他们能够接触到机器上所有他们可能想要添加的高级功能。用户可以在不使用 BASIC 的情况下理解内存的使用情况，感受到他们对自己的机器有控制权。 为了使 BASIC 适配到仅 4K 的内存，我们采用了一种称为“单表示解释器”的策略。这是一个非常明智的选择。我之前从未看到过这样的解释器。虽然采取这种方法有一定的风险，但我对这个方案充满信心。我在脑海中多次推敲，对此感到十分满意。

采访者： 在编写过程中，您是否预见到它会取得如此巨大的成功？

盖茨： 没有，绝对没有。是保罗·艾伦给我看了一本有 Altair 介绍的杂志，我们意识到，“天哪，我们必须开始行动了，因为我们知道这些机器将会非常受欢迎。”那时我停止上课，我们开始昼夜不停地工作。最初的程序在大约三周半的时间内完成。我们总共花了大约八周的时间，才让程序达到我真正满意的水平。之后，我又回去重新编写了程序。 没有一个伟大的程序员会坐在那里想，“我要赚很多钱”，或者“我要卖出十万份。”因为这样的想法对解决问题没有任何帮助。伟大的程序员会思考如何改进代码：我是否应该重写这个子程序，让四个而不是三个人能够使用它？我是否应该使这个程序更快 10%？我是否真的应该深入思考这里的常见案例，以确定如何排序这个检查？如果你是一个优秀的程序员，你会让所有的程序模块相互依赖，因此小小的错误也可能导致严重后果。这就是为什么你必须拥有精准的判断力，并愿意回头修改你的代码。

采访者： 当多个人共同开发一个程序时，您如何确保所有不同部分能够有效地协同工作？

盖茨： 首先，优秀的编程团队成员之间必须互相尊重。这是因为编程工作非常细致且需要密切合作，就像大家一起参与一场戏剧。在编程项目中，需要巨大的判断力和创造力。有的顶尖程序员更喜欢独自工作，不适合团队合作。但我相信，学会与他人合作并指导他们是成就卓越的关键一环。看到团队中的其他成员成长为出色的程序员，给我带来了巨大的满足感，虽然这种感觉不如自己亲手编写程序来得强烈，但这是一件非常积极的事情。我通过花大量时间与他们交谈，分享我的代码来培养他们。在团队项目中，我们需要将代码变成团队共享的财富。

采访者： 这种团队合作方式是自然形成的，还是你们刻意培养的？

盖茨： 在我和保罗创立公司之前，我们曾参与过一些大型软件项目，这些项目都失败了。当时，项目团队不断扩大，却没有明确的方向和控制。我们当时就下定决心，要在团队建设和项目管理上做得更好。因此，我们一直非常重视团队的结构和组织。

有效的方法其实很直接：保持团队精干，确保每位成员都非常优秀，为他们提供优秀的工具，确保团队有共同的语言和术语，以便高效沟通。同时，在小团队之外，安排一些经验丰富的资深成员提供咨询和帮助。实际上，我们在项目中遇到的问题往往有很多相似之处。在设计审查时，我非常乐于基于我以往的经验提出建议。

采访者： 你认为未来编程的方式或计算机的运作方式会有根本性的变化吗？

盖茨： 软件工具正在变得越来越先进。未来，我们或许能够仅凭项目规格和机器性能的描述，让高级编译器自动完成许多现在由程序员手动完成的工作。

人们仍然对于机器，比如 C 编译器，无法像人一样编写代码这一点感到自豪。但未来几年，我们可能会在一些编程流程上实现较大程度的自动化。设计算法的工作仍将由人完成，但很多实现细节可能由机器来承担。我相信，在未来五年内，我们将会拥有能与人类程序员媲美的工具。

采访者： 你之前提到了数学在编程中的重要性。你认为计算机科学和数学之间有什么关系？

盖茨： 数学对计算机科学的影响深远。许多卓越的程序员都具有数学背景，因为数学训练中对定理严谨证明的追求，有助于程序员进行精确且有力的逻辑推理。在数学领域，我们需要全面理解问题，并且常常要用不同的方法组合定理来寻找解决方案。数学与编程有着密切的联系，尤其在我的经历中，这种联系更加明显。我认为计算机科学与数学之间有着天然的亲密关系。

采访者： 在你看来，计算机科学真的算是一门科学吗？

盖茨： 是的，这是一个全新的领域。想想看，过去人们为了完成现在程序员日常工作中的内容，可能需要攻读博士学位。计算机科学正在飞速发展。与数学不同，数学有 300 多年的天才在推动理论发展，而我们的计算机科学只有短短 20 多年的历史。现在，越来越多聪明的人加入这个领域，贡献自己的智慧；编程已经成为一种流行的活动。现在人们越来越早地接触计算机，这将有助于改变这个领域的思维模式。很多顶尖的程序员都是在青少年时期开始编程的，那时的思维方式可能更加开放灵活。

过去，仅仅成为一名优秀的程序员是不够的；你还需要管理他人或从事其他工作。幸运的是，这种情况正在改变。现在人们意识到，编程是一门值得深入研究和教授他人的科学。

采访者： 多年的经验积累是否会让编程变得更容易？

盖茨： 不一定。我认为，在成为程序员的最初几年里，你是否优秀已经基本确定。几年后，你可能更懂得如何管理大型项目和处理各种个性，但在那之后，你的水平已经清晰可见。在微软，没有人是开始时平庸几年，然后突然变得出类拔萃。我可以通过与某人讨论他们编写的程序立刻判断出他是否真正优秀。如果他真的很优秀，他对自己的程序了如指掌。 这就像热爱国际象棋的人。当你全身心投入棋局时，记住十局棋的每一步是很自然的事。其他人可能会对棋手或程序员的这种记忆能力感到惊讶，认为这是些稀奇古怪的表演。但这其实很正常。直到今天，我都能在黑板上写出我十年前编写的微软 BASIC 的大量源代码。

采访者： 在编程时，你有什么感觉？

盖茨： 当我编译程序，它开始输出正确的结果时，我感到非常开心。我说真的，所有伟大的成就背后都有情感的驱动，编程也不例外。开始敲代码很诱人，但如果只是为了看到结果而匆忙编写代码，然后发现还有大量困难的工作要做，那就太糟糕了。因为这意味着你可能需要修改已经完成的部分。我更喜欢先打好基础再享受编码的乐趣，看到程序运行就像是留下餐盘里最美味的部分最后享用。

采访者： 你认为年轻程序员和经验丰富的程序员在编程方式上有什么不同吗？

盖茨： 现在的初学者从未经历过资源限制的挑战，因此他们很难领会到正确的思维方式，总是习惯性地认为资源随时可用。相比之下，十年前的程序员常常面临资源限制，所以经验丰富的程序员总是会考虑这些问题。编程是一项需要巨大精力的活动，因此多数程序员都是年轻人。但这也带来了问题，因为编程需要极强的自律。年轻人往往目标不稳定，容易被其他事情分散注意力。我的建议是年轻程序员应该坚持不懈，随着时间的推移，他们会变得更加出色。以我为例，从 1975 年到 1980 年，我的编程技能有了显著的提升。在 1975 年，我自信满满地认为自己无所不能，因为我阅读了大量的代码，并且没有遇到过自己无法迅速理解的代码。我认为，测试一个程序员编程能力的一个很好的方法是给他们大约 30 页代码，看他们能多快理解这些代码。

采访者： 这算是一种天赋吗？

盖茨： 当然，这绝对是一种天赋。这有点像纯粹的智商测试。你需要全神贯注于代码，并且回想起自己曾经写过的程序。很多人可能需要几天时间来阅读这些代码，但真正优秀的程序员可能只需要一个小时就能通读完整个内容。这其中的能力差异是巨大的。

采访者： 那么，学习计算机科学是成为程序员的最佳途径吗？

盖茨： 不尽然。最好的方式是亲自编写程序，并且研究其他人编写的优秀程序。就像我自己的经历，我曾经到计算机科学中心的垃圾桶里翻找，把他们操作系统的代码清单捡回家学习。要成为优秀的程序员，你需要愿意阅读别人的代码，编写自己的代码，然后让其他人来审核你的代码。你需要渴望进入一个充满挑战的反馈环境中，在这里，顶尖的专家会指出你的错误。你不能因为一些小的个性化偏好而忽视这些宝贵的反馈。有些顶尖专家可能会对一些细节，比如你如何注释代码，有所坚持。你需要看穿这些表面现象，因为他们可能在试图按照自己的方式塑造你，而这些并不总是与编程的核心质量相关。如果你有机会与伟大的程序员交流，你会发现他们对自己使用的工具了如指掌，就像艺术家熟知他的画笔一样。了解伟大的程序员们如何共同发展——他们如何获取反馈，如何培养对代码严谨和松散的敏锐感——是非常令人惊叹的。当这些人审视特定的代码时，他们通常会有非常一致的反应。

采访者： 你在编程方式上有没有受到哪些人的特别影响？

盖茨： 影响我最深的是那些开发 PDP 操作系统的程序员。还有 TRW 的 John Norton，他写的关于代码评审的备忘录给了我很大的启发。我也开始尝试对别人的代码做类似的分析。

我与 Paul Allen 的想法交融，因为我们共同完成了许多编程工作。在调试代码或考虑某些技术抉择时，有一个进度相当的伙伴可以讨论，这很重要。这种交流其实是一种轻松的休息方式，它降低了工作强度，同时让我们保持专注。我和 Paul 学会了如何高效合作，这样的伙伴关系非常难得。他对我影响极大。在微软时期，Charles Simonyi 和其他一些同事也给我带来了很多启发。

采访者： 你认为软件未来的发展趋势是什么？我们会继续开发更好的文字处理软件和电子表格吗？还是电脑将会开辟我们今天无法想象的新领域？

盖茨： 我们正在走向电脑承担更多思考任务的时代。我提出了“软化软件”这个概念，指的是软件能够随着时间适应用户的需求和兴趣。未来当然还会有更多优秀的文字处理和电子表格软件，我们还会利用网络、图形技术和新架构。以及，通过紧凑光盘（CD）实现大量数据存储，比如整个百科全书的存储。

真正的变革在于基于规则的编程。这种编程方式与传统的“如果发生这个，就做这个；如果发生那个，就做那个”有所不同。在基于规则的编程中，你需要制定规则，然后由一个推理引擎来分析当前的事实和规则，推导出新的结论并作出相应的行动。比如，程序可能会根据重力的规则判断，如果桌子上的东西掉落，而它是玻璃制的，那么可能会破碎。这样的程序以一种非传统的方式产生结果。这就是构建专家系统所用的技术。基于规则的编程指的是通过证明机制进行推理，而不是在程序中直接明确指定。这些技术可能在未来四五年内开始显现其影响力。对于那些希望在编程界留名的年轻程序员来说，专注于这种新型编程可能是个明智的选择。

采访者： 基于规则的编程是否能比传统编程更有效地处理多样化的信息？

盖茨： 这个问题不太容易解释。比如，你有一个计算桥梁建造方法的程序，它涵盖了关于压力、弯曲和金属特性的所有知识。这个程序中融入了工程学和材料学等方面的专业知识。如果你突然说要用塑料来建桥，对于这个程序来说，这种改变就像是要在火星上建桥一样翻天覆地。

在极端的规则驱动编程中，金属能承受的压力和重力的工作原理等物理原理都会被明确地定义为规则。所有的逻辑推理都是基于这些规则的检验和应用。但现在，我们还没有足够高效的规则验证工具，以这种方式去处理问题是极其低效的。然而，这正是我们正在取得进展的领域之一，它可能会在不久的将来改变编程的方式。另一个前景是，我们可能会有数百台计算机同时并行运作。事实上，这可能有助于我们高效地运行基于规则的系统。这样的重大架构变化可能会影响人们编程的方式，或者他们对编程的看法。

程序员最担心的是，编译器变得越来越强大，计算机运行速度越来越快，以至于程序员的作用变得不再重要。我曾经也担心，当我决定专注于某个领域时，随着时间的推移，它的重要性可能会逐渐降低。

采访者： 作为一家业务范围广泛的公司，微软如何跟上整个行业的快速变化？

盖茨： 实际上，我并没有跟踪所有的事情。我与 IBM、苹果、DEC 以及日本的顶尖人士合作。我必须了解即将发生的事情，而不是浪费时间去猜测。当我与微软的同事一起出差时，我们会讨论目前发生的事情。微软的电子邮件系统是一个高效的工具，帮我保持消息的更新。

保持信息更新的一个方法是使用个人电脑，确保我阅读了说明书并使用了前十款顶级软件产品。这些产品并不经常变更，所以我能够对它们有很深的了解。如果你真的对个人计算感兴趣，你会尝试每一款软件，了解它们的特点，并思考如何做得更好。

从某种意义上讲，个人电脑已变得更加简单。现在我们只有两种主流架构：PC 和 Mac。回想起以前，我们有三十到四十种完全不兼容的机器，还有许多不同的编程语言。但现在，为了让数百万用户能够理解并使用，我们不得不使这些系统更加统一和标准化。事实上，行业中的很多活动并没有真正推动技术的发展。我更愿意关注网络和图形领域，因为我们在这些领域的工作可能会影响技术的前沿，而不是去关注哪家零售连锁破产了，谁贿赂了谁，或者某公司给了某人多少股票。真正聪明的人会专注于他们的专业领域，并将任何他们认为重要的信息或可能产生重大影响的项目带给我。</title>
            <link>https://nitter.cz/dotey/status/1744623157804195951#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1744623157804195951#m</guid>
            <pubDate></pubDate>
            <updated>Tue, 09 Jan 2024 07:32:29 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>比尔·盖茨在1986年的采访稿，猜猜那时候他写代码吗？<br />
<br />
作为微软的掌舵人，威廉·H·(比尔) 盖茨被视为当今个人计算机和办公自动化行业的领军人物。盖茨从年少时代就踏入了计算机软件领域。他和微软的另一位创始人保罗·艾伦，在西雅图的高中时期就已经开始担任编程顾问。1974 年，当时还是哈佛大学学生的盖茨与艾伦合作，为首款商用微型计算机 MITS Altair 开发了 BASIC（基础）编程语言。这个项目大获成功后，他们俩共同创立了微软，目标是为新兴的微型计算机市场提供软件开发和销售服务。<br />
<br />
微软在编程语言、操作系统和应用软件方面为整个软件行业设立了标准。盖茨不仅为公司的新产品理念和技术发展提供了方向，还亲自指导技术团队研发新产品，他把大量时间投入到审查和优化微软的软件产品中。<br />
<br />
盖茨出生并成长在华盛顿州西雅图地区，至今仍然居住在那里。他的出生年份是 1955 年。<br />
<br />
采访者： 作为微软的首席执行官，您身负重任。您现在还亲自编写代码吗？<br />
<br />
盖茨： 不，我现在不再编写代码了。虽然我仍然参与设计算法和基本架构，偶尔也会审查代码。但自从我参与开发 IBM PC BASIC 和 Model 100 之后，就没再亲手编写过程序。<br />
<br />
采访者： 那么，在微软的程序开发中，您扮演着怎样的角色？<br />
<br />
盖茨： 我主要负责两项重要工作。第一，选择程序中要加入的功能。要做到这一点，你需要对哪些功能容易实现哪些难以实现有一个清晰的认识。你还需要理解我们的产品“家族”策略，以及硬件的最新动态。<br />
<br />
第二，我负责策划新功能的最佳实现方式，确保它们既紧凑又高效。举个例子，我曾写过一份关于如何设计和实现一个功能的备忘录，这个功能被应用在 Excel 中，它能让程序在屏幕发生变化时自动重新计算公式。<br />
<br />
在微软成立的最初四年里，我参与了公司所有程序的编写和设计工作。无论是 BASIC、FORTRAN、BASIC 6800 还是 BASIC 6502，每一行代码在发布前都经过了我的仔细审查。但现在，公司拥有大约 160 名程序员，所以我主要负责对产品和算法进行评审。<br />
<br />
采访者： 在您的编程生涯中，您认为自己最伟大的成就是什么？<br />
<br />
盖茨： 对我来说，编写 8080 的 BASIC 语言最具影响力，因为它当时非常适用，且我们成功将其精简至极。这是我们创立微软时编写的第一个程序。<br />
<br />
我们中有三人能够熟记这个原始程序。在阿尔伯克基的一个夏天，我们有机会对它进行彻底的重写。我觉得我们能够进一步精简代码，使程序更加紧凑。我们极其细致地优化了这个程序，最终打造出一个 4K 大小的 BASIC 解释器 (BASIC interpreter)。<br />
<br />
当你对一个程序如此了如指掌，你会自信地认为没有人能够指出更好的编程方法。这种自豪感非常棒，再加上这个程序被众多机器采用，使其成为一项令人激动的成就。<br />
<br />
关于 Model 100 上的软件，我也感到非常自豪，尤其是我们如何成功集成了一个非常实用的小型编辑器。我与一位日本程序员杰伊·铃木 (Jey Suzuki) 合作完成了这个项目。我们完成这个项目的时间非常紧迫。当你的软件需要被烧录到 ROM 中时，是没有犯错的余地的。<br />
<br />
采访者： 在计算机编程中，你认为最困难的部分是什么？<br />
<br />
盖茨： 最大的挑战在于确定算法是什么，并尽可能地简化它们。把事情简化到最基本的形态非常难。你必须在脑海中模拟程序的运作方式，并且完全理解程序的各个部分如何协同工作。最出色的软件往往是那些由个别程序员对程序的工作方式有着完整理解的。为了达到这种理解，你必须真正热爱这个程序，并专注于让它保持极度简单。<br />
<br />
采访者： 随着计算机处理能力和内存的大幅提升，程序是否变得更复杂，或者只是更加粗糙了？这如何影响人们编程的方式？<br />
<br />
盖茨： 我们不再是处于每个程序都经过精心打造的时代了。但在那些顶尖程序的核心，你会发现关键内部代码通常由少数真正懂行的人编写。<br />
<br />
现在，将程序压缩到 4K 内存区域已不再那么重要。你会看到越来越多的情况，人们可以选择使用 C 语言而非汇编语言。遗憾的是，很多程序变得如此庞大，以至于没有一个人能完全掌握它们的所有部分，导致代码共享不如以往那样广泛。此外，因为总有新功能要加入，所以重新编写程序的机会也减少了。<br />
<br />
最糟糕的程序是那些在初始阶段未能打下坚实基础的，而且原始程序员后来不再参与其中。这些程序的处理方式达到了我称之为“实验性编程”的地步。程序员对这些程序的了解太少，以至于他们无法预测更改可能如何影响程序的速度等方面。他们可能复用现有的代码，或者不清楚更改某些内容会破坏哪些依赖关系。因此，他们添加新代码，运行后发现“哦，它不是这样运行的”。这是一种极其低效的编程方式，但许多项目最终都沦为这样。<br />
<br />
采访者： 在像微软这样有 160 名程序员的公司里，你们是如何创造一个能够开发成功程序的环境的？<br />
<br />
盖茨： 组建一个小型项目团队，通常四到五人，其中必须有一人具备深入理解程序的能力是一种方法。当这位负责人在某些问题上有所疑惑时，他或她应该可以与更有经验的程序员进行探讨。<br />
<br />
我们的策略之一是在编码阶段前让程序员充分思考。撰写设计文档非常关键，因为在将问题以算法形式表达时，可以实现大量简化。此时，问题以最精简的形式呈现，让你能够看到它们之间的交集。<br />
<br />
代码审查也很重要，要确保审查代码，看看有经验的人员能否提出改进的建议。还需要回顾那些进行得非常顺利的类似项目；程序员可以从中学习别人的成功经验，获得改善自己程序的灵感。<br />
<br />
采访者： 程序的灵感来源是什么？<br />
<br />
盖茨： 实际上没有一个固定的过程。在微软，我们通常会在晚上或周末举行头脑风暴会议。每个人都有一个大概的想法，比如制作世界上最好的文字处理器。我们希望它能满足技术出版部门的所有需求。我们会坐下来讨论：怎样才能提高效率？我们是否能加入绘图功能，或者在不显著降低程序速度的情况下实现字符紧排？我们会探讨各种问题，并产生一些创新的想法。<br />
<br />
采访者： 所以这是一个团队协作的过程？<br />
<br />
盖茨： 对于确定程序功能而言，确实是一个大团队共同提出建议的过程。接着是一个筛选阶段。最终，我会决定哪些想法是可行的，并确保有负责人亲自投入，确保产品成功。我们选择进行的项目非常少，因为要推出一款产品并设定全新的世界级标准，需要极大的专注和资源。<br />
<br />
采访者： 关于大型软件公司难以吸引能够开发出色软件的优秀人才的观点，这些特立独行的人才往往更愿意独立工作，您如何在微软吸引并留住这些优秀人才？<br />
<br />
盖茨： 优秀的程序员对于创造软件产品至关重要。但我们不支持那种因为某人能力出众就纵容其任性的做法，比如不注释代码、不与他人沟通或强加自己的想法于他人。<br />
<br />
我们希望员工能够真正相互尊重。我相信，大多数优秀的程序员都愿意与同样优秀的同行一起工作。当他们设计出一个非凡的算法时，他们喜欢有能够理解其巧妙之处的同僚。因为在脑海中构思这样的模型是一种孤独的体验。如果你原以为一个过程必须复杂，然后突然找到了简化它的方法，那会让你感到非常满足。但同时，你也希望得到同事的反馈。有了几位优秀人才后，更多的人才也会随之加入。<br />
<br />
过去有一种观点，认为程序员的经理总是比程序员本身更优秀，没有所谓的“技术倒置”，即一个程序员为不懂编程的人工作。我们依然遵循这一理念：虽然在某些层级我们设有商业经理，但我们不让非程序员直接管理编程项目。<br />
<br />
采访者： 您认为创造优秀程序有哪些特别的原则吗？<br />
<br />
GATES: 有人是一头扎进去就开始编码，有人则是先全盘规划后再动手，但我认为你会发现，那些一上来就开始编码的程序员实际上只是在用代码作为思考的草稿。真正关键的是他们脑海里的思考过程。<br />
<br />
你需要一位极其聪明的人。一个杰出的程序员会持续不断地思考着程序，无论是在驾驶还是用餐时。这样的思考方式对精神能量的要求非常高。<br />
<br />
采访者： 你如何描述自己的编程风格？<br />
<br />
盖茨： 在我动手写代码之前，我喜欢先从设计层面上把整个程序想清楚。写完代码后，我还会整体重新编写一遍。设计数据结构是编程最关键的部分，其次是将代码细分成不同的模块。只有当你亲自下手编写时，才能真正明白哪些是应该公用的子程序。<br />
<br />
我写出过的那些杰出程序，都是那些我在动手前就反复思考了很长时间的。例如，我高中时为一台小型计算机编写了一个 BASIC 解释器，那时犯了很多严重的错误。后来，我研究了其他的 BASIC 解释器，所以到了 1975 年编写 Microsoft BASIC 时，我的挑战不再是能否写出这个程序，而是如何将其压缩到 4K 并且运行极快。我一直在担心：“这个程序够快吗？会不会有人做得更快？”<br />
<br />
我记得在 TRW 遇到一个叫诺顿的人，他总能指出我哪里做得不够好。每当我做事马虎或懒散时，我就会想象他会过来指点我：“你看，这样做会更好。”程序中很容易悄悄产生小的效率问题，如果你想让程序尽善尽美，就必须时刻警惕这些问题的潜入。这也是为什么有时让别人参与你的项目会让你感到困扰，因为他们的编码风格总是和你不一样。记得在开发 BASIC 的时候，我常常重写别人的代码，即使这样并没有带来显著的改进。这种做法可能会让人不舒服，但有时候你就是觉得非这样做不可。<br />
<br />
采访者： 在团队合作中，你总是担任设计的主导角色吗？<br />
<br />
盖茨： 是的，在我直接参与的所有项目中，我都担任主要的设计角色。在最初的 BASIC 项目中，我在纸上草拟设计方案。我的合作者保罗·艾伦（Paul Allen）负责设计并实现所有开发工具。<br />
<br />
在我开始编写代码之前，我通常已经在脑中预演了大部分的指令。虽然这些想法并不是完全成熟的，我在编程时仍会做出调整，但所有好的灵感都是在我动手编程之前就已经浮现。如果程序出现了错误，我会感到非常沮丧，因为这意味着我的心理模拟是有缺陷的。一旦心理模拟出现问题，程序中可能就隐藏着成千上万的错误。我真的无法忍受看到一些程序员在编程时缺乏深思熟虑的过程。<br />
<br />
编写 BASIC 是我有过的最愉快的编程经验之一。我完成了 8080 版本的 BASIC，然后和马克·张伯伦（Mark Chamberlain）一起用大约两周的时间开发 6809 版本的 BASIC。那两周开始时，我先学习了新的指令集，并编写了三四个小程序。我还研究了其他人的程序，看看他们是如何利用这套指令集的。将我熟悉的问题映射到这个新的指令集上，并且尽可能地紧凑组合，这个过程非常有趣。<br />
<br />
如今的程序变得越来越庞大，增加的功能往往会减缓程序速度。这是因为开发者在添加新特性时，往往未充分考虑到所加入的特殊检查会如何影响效率。要避免这种情况，就需要一个对程序极其熟悉的程序员来把关。以我们的 BASIC 为例，在我和其他创始成员离开后，大约有三年时间里，我们没有做出什么创新。直到最近一年半，我们才找到了那些对 BASIC 有深刻理解和归属感的人，他们可以轻松说出，“没问题，加入子程序和去除行号很简单。”我们一直有这样的目标，但直到找到那些能深入到程序核心，而非仅仅在外围增加功能的人之前，我们都不敢轻易修改程序。<br />
<br />
确实，我们现在允许程序稍微变大一些。但就速度而言，不尽力追求最快无疑是种懒惰，因为用户会察觉到那些真正快速的程序，尽管他们可能无法明确指出。在最成功的程序中，快速的执行效率总是令人惊艳。<br />
<br />
采访者： 在速度和性能方面，你们是如何做出取舍的？<br />
<br />
盖茨： 有时候，我们需要在增加功能和追求快速执行之间做出权衡。但实际上，有很多方法可以在拥有大量功能的同时，依然保持高速度。关键是要确定程序中的常见操作，并确保它们能够高效执行，不被各种特殊情况的检查所拖累。如果程序的核心交互循环布满了各种检查，那么它的速度就会不如其他程序。<br />
<br />
采访者： 当你们打算开发世界上最好的文字处理器时，你们是如何入手的？你们会研究市面上所有的文字处理器吗？<br />
<br />
盖茨： 是的，我们会从功能角度出发，研究市场上所有的文字处理器，比如，我们会问：“有哪些产品在屏幕上进行字距调整，或者能展示打印页面的实际样子？它们的反应速度如何？”通常，在产品线的顶端，总有一些公司利用昂贵的硬件通过蛮力解决问题。我们无法这样做，因为我们使用的计算机性能有限。很多我们正在尝试的功能，在更强大的计算机上已经实现过；我们的目标是让这些功能在普通用户手中的设备上也能流畅运行。<br />
<br />
在产品开发中，我们可以使用各种巧妙的技巧。我们在构建功能列表的同时，也在思考如何使我们的算法超越其他人。“功能”这个概念有些微妙，因为功能越多，用户手册就越厚。功能真正有价值的是在用户花时间去使用它们的时候。而速度——如果能更快地打印页面、在屏幕上更快地显示或更快地处理数据——这些则有极大的价值。如果你能为用户提供几个简单的命令，并确保程序足够高效，以便用户用这些简单的命令就能完成他们想要的操作，那就更好了。优秀的程序的一个标志是它们在内部也遵循简化的原则。它们在执行复杂任务时，会调用简单的操作，而不是每次都从头开始处理。<br />
<br />
采访者： 用户的重要性有多大？您是如何了解数据库管理员在其数据库或电子表格中真正需要或希望的内容？<br />
<br />
盖茨： 有些程序员并不假装能准确理解最终用户的需求，他们依然是顶尖的程序员。但对市场的了解尤为重要，尤其是在应用程序团队中。因此，我们有专职人员负责向客户展示代码或审查其他的规格要求等。在微软初创时，我们只专注于系统程序，因为我们自身就是程序员，所以非常了解其他程序员的需求。这就是我们为什么会开发出 BASIC。<br />
<br />
采访者： BASIC 中最具创新性的方面是什么？<br />
<br />
盖茨： 最关键的是我们让用户能够充分发挥机器的性能。我们引入了 PEEK 和 POKE 功能，允许用户读取和修改机器的状态。我们还加入了 TRON 和 TROFE 这样的跟踪程序。即使用户使用的是高级语言，我们也让他们能够接触到机器上所有他们可能想要添加的高级功能。用户可以在不使用 BASIC 的情况下理解内存的使用情况，感受到他们对自己的机器有控制权。 为了使 BASIC 适配到仅 4K 的内存，我们采用了一种称为“单表示解释器”的策略。这是一个非常明智的选择。我之前从未看到过这样的解释器。虽然采取这种方法有一定的风险，但我对这个方案充满信心。我在脑海中多次推敲，对此感到十分满意。<br />
<br />
采访者： 在编写过程中，您是否预见到它会取得如此巨大的成功？<br />
<br />
盖茨： 没有，绝对没有。是保罗·艾伦给我看了一本有 Altair 介绍的杂志，我们意识到，“天哪，我们必须开始行动了，因为我们知道这些机器将会非常受欢迎。”那时我停止上课，我们开始昼夜不停地工作。最初的程序在大约三周半的时间内完成。我们总共花了大约八周的时间，才让程序达到我真正满意的水平。之后，我又回去重新编写了程序。 没有一个伟大的程序员会坐在那里想，“我要赚很多钱”，或者“我要卖出十万份。”因为这样的想法对解决问题没有任何帮助。伟大的程序员会思考如何改进代码：我是否应该重写这个子程序，让四个而不是三个人能够使用它？我是否应该使这个程序更快 10%？我是否真的应该深入思考这里的常见案例，以确定如何排序这个检查？如果你是一个优秀的程序员，你会让所有的程序模块相互依赖，因此小小的错误也可能导致严重后果。这就是为什么你必须拥有精准的判断力，并愿意回头修改你的代码。<br />
<br />
采访者： 当多个人共同开发一个程序时，您如何确保所有不同部分能够有效地协同工作？<br />
<br />
盖茨： 首先，优秀的编程团队成员之间必须互相尊重。这是因为编程工作非常细致且需要密切合作，就像大家一起参与一场戏剧。在编程项目中，需要巨大的判断力和创造力。有的顶尖程序员更喜欢独自工作，不适合团队合作。但我相信，学会与他人合作并指导他们是成就卓越的关键一环。看到团队中的其他成员成长为出色的程序员，给我带来了巨大的满足感，虽然这种感觉不如自己亲手编写程序来得强烈，但这是一件非常积极的事情。我通过花大量时间与他们交谈，分享我的代码来培养他们。在团队项目中，我们需要将代码变成团队共享的财富。<br />
<br />
采访者： 这种团队合作方式是自然形成的，还是你们刻意培养的？<br />
<br />
盖茨： 在我和保罗创立公司之前，我们曾参与过一些大型软件项目，这些项目都失败了。当时，项目团队不断扩大，却没有明确的方向和控制。我们当时就下定决心，要在团队建设和项目管理上做得更好。因此，我们一直非常重视团队的结构和组织。<br />
<br />
有效的方法其实很直接：保持团队精干，确保每位成员都非常优秀，为他们提供优秀的工具，确保团队有共同的语言和术语，以便高效沟通。同时，在小团队之外，安排一些经验丰富的资深成员提供咨询和帮助。实际上，我们在项目中遇到的问题往往有很多相似之处。在设计审查时，我非常乐于基于我以往的经验提出建议。<br />
<br />
采访者： 你认为未来编程的方式或计算机的运作方式会有根本性的变化吗？<br />
<br />
盖茨： 软件工具正在变得越来越先进。未来，我们或许能够仅凭项目规格和机器性能的描述，让高级编译器自动完成许多现在由程序员手动完成的工作。<br />
<br />
人们仍然对于机器，比如 C 编译器，无法像人一样编写代码这一点感到自豪。但未来几年，我们可能会在一些编程流程上实现较大程度的自动化。设计算法的工作仍将由人完成，但很多实现细节可能由机器来承担。我相信，在未来五年内，我们将会拥有能与人类程序员媲美的工具。<br />
<br />
采访者： 你之前提到了数学在编程中的重要性。你认为计算机科学和数学之间有什么关系？<br />
<br />
盖茨： 数学对计算机科学的影响深远。许多卓越的程序员都具有数学背景，因为数学训练中对定理严谨证明的追求，有助于程序员进行精确且有力的逻辑推理。在数学领域，我们需要全面理解问题，并且常常要用不同的方法组合定理来寻找解决方案。数学与编程有着密切的联系，尤其在我的经历中，这种联系更加明显。我认为计算机科学与数学之间有着天然的亲密关系。<br />
<br />
采访者： 在你看来，计算机科学真的算是一门科学吗？<br />
<br />
盖茨： 是的，这是一个全新的领域。想想看，过去人们为了完成现在程序员日常工作中的内容，可能需要攻读博士学位。计算机科学正在飞速发展。与数学不同，数学有 300 多年的天才在推动理论发展，而我们的计算机科学只有短短 20 多年的历史。现在，越来越多聪明的人加入这个领域，贡献自己的智慧；编程已经成为一种流行的活动。现在人们越来越早地接触计算机，这将有助于改变这个领域的思维模式。很多顶尖的程序员都是在青少年时期开始编程的，那时的思维方式可能更加开放灵活。<br />
<br />
过去，仅仅成为一名优秀的程序员是不够的；你还需要管理他人或从事其他工作。幸运的是，这种情况正在改变。现在人们意识到，编程是一门值得深入研究和教授他人的科学。<br />
<br />
采访者： 多年的经验积累是否会让编程变得更容易？<br />
<br />
盖茨： 不一定。我认为，在成为程序员的最初几年里，你是否优秀已经基本确定。几年后，你可能更懂得如何管理大型项目和处理各种个性，但在那之后，你的水平已经清晰可见。在微软，没有人是开始时平庸几年，然后突然变得出类拔萃。我可以通过与某人讨论他们编写的程序立刻判断出他是否真正优秀。如果他真的很优秀，他对自己的程序了如指掌。 这就像热爱国际象棋的人。当你全身心投入棋局时，记住十局棋的每一步是很自然的事。其他人可能会对棋手或程序员的这种记忆能力感到惊讶，认为这是些稀奇古怪的表演。但这其实很正常。直到今天，我都能在黑板上写出我十年前编写的微软 BASIC 的大量源代码。<br />
<br />
采访者： 在编程时，你有什么感觉？<br />
<br />
盖茨： 当我编译程序，它开始输出正确的结果时，我感到非常开心。我说真的，所有伟大的成就背后都有情感的驱动，编程也不例外。开始敲代码很诱人，但如果只是为了看到结果而匆忙编写代码，然后发现还有大量困难的工作要做，那就太糟糕了。因为这意味着你可能需要修改已经完成的部分。我更喜欢先打好基础再享受编码的乐趣，看到程序运行就像是留下餐盘里最美味的部分最后享用。<br />
<br />
采访者： 你认为年轻程序员和经验丰富的程序员在编程方式上有什么不同吗？<br />
<br />
盖茨： 现在的初学者从未经历过资源限制的挑战，因此他们很难领会到正确的思维方式，总是习惯性地认为资源随时可用。相比之下，十年前的程序员常常面临资源限制，所以经验丰富的程序员总是会考虑这些问题。编程是一项需要巨大精力的活动，因此多数程序员都是年轻人。但这也带来了问题，因为编程需要极强的自律。年轻人往往目标不稳定，容易被其他事情分散注意力。我的建议是年轻程序员应该坚持不懈，随着时间的推移，他们会变得更加出色。以我为例，从 1975 年到 1980 年，我的编程技能有了显著的提升。在 1975 年，我自信满满地认为自己无所不能，因为我阅读了大量的代码，并且没有遇到过自己无法迅速理解的代码。我认为，测试一个程序员编程能力的一个很好的方法是给他们大约 30 页代码，看他们能多快理解这些代码。<br />
<br />
采访者： 这算是一种天赋吗？<br />
<br />
盖茨： 当然，这绝对是一种天赋。这有点像纯粹的智商测试。你需要全神贯注于代码，并且回想起自己曾经写过的程序。很多人可能需要几天时间来阅读这些代码，但真正优秀的程序员可能只需要一个小时就能通读完整个内容。这其中的能力差异是巨大的。<br />
<br />
采访者： 那么，学习计算机科学是成为程序员的最佳途径吗？<br />
<br />
盖茨： 不尽然。最好的方式是亲自编写程序，并且研究其他人编写的优秀程序。就像我自己的经历，我曾经到计算机科学中心的垃圾桶里翻找，把他们操作系统的代码清单捡回家学习。要成为优秀的程序员，你需要愿意阅读别人的代码，编写自己的代码，然后让其他人来审核你的代码。你需要渴望进入一个充满挑战的反馈环境中，在这里，顶尖的专家会指出你的错误。你不能因为一些小的个性化偏好而忽视这些宝贵的反馈。有些顶尖专家可能会对一些细节，比如你如何注释代码，有所坚持。你需要看穿这些表面现象，因为他们可能在试图按照自己的方式塑造你，而这些并不总是与编程的核心质量相关。如果你有机会与伟大的程序员交流，你会发现他们对自己使用的工具了如指掌，就像艺术家熟知他的画笔一样。了解伟大的程序员们如何共同发展——他们如何获取反馈，如何培养对代码严谨和松散的敏锐感——是非常令人惊叹的。当这些人审视特定的代码时，他们通常会有非常一致的反应。<br />
<br />
采访者： 你在编程方式上有没有受到哪些人的特别影响？<br />
<br />
盖茨： 影响我最深的是那些开发 PDP 操作系统的程序员。还有 TRW 的 John Norton，他写的关于代码评审的备忘录给了我很大的启发。我也开始尝试对别人的代码做类似的分析。<br />
<br />
我与 Paul Allen 的想法交融，因为我们共同完成了许多编程工作。在调试代码或考虑某些技术抉择时，有一个进度相当的伙伴可以讨论，这很重要。这种交流其实是一种轻松的休息方式，它降低了工作强度，同时让我们保持专注。我和 Paul 学会了如何高效合作，这样的伙伴关系非常难得。他对我影响极大。在微软时期，Charles Simonyi 和其他一些同事也给我带来了很多启发。<br />
<br />
采访者： 你认为软件未来的发展趋势是什么？我们会继续开发更好的文字处理软件和电子表格吗？还是电脑将会开辟我们今天无法想象的新领域？<br />
<br />
盖茨： 我们正在走向电脑承担更多思考任务的时代。我提出了“软化软件”这个概念，指的是软件能够随着时间适应用户的需求和兴趣。未来当然还会有更多优秀的文字处理和电子表格软件，我们还会利用网络、图形技术和新架构。以及，通过紧凑光盘（CD）实现大量数据存储，比如整个百科全书的存储。<br />
<br />
真正的变革在于基于规则的编程。这种编程方式与传统的“如果发生这个，就做这个；如果发生那个，就做那个”有所不同。在基于规则的编程中，你需要制定规则，然后由一个推理引擎来分析当前的事实和规则，推导出新的结论并作出相应的行动。比如，程序可能会根据重力的规则判断，如果桌子上的东西掉落，而它是玻璃制的，那么可能会破碎。这样的程序以一种非传统的方式产生结果。这就是构建专家系统所用的技术。基于规则的编程指的是通过证明机制进行推理，而不是在程序中直接明确指定。这些技术可能在未来四五年内开始显现其影响力。对于那些希望在编程界留名的年轻程序员来说，专注于这种新型编程可能是个明智的选择。<br />
<br />
采访者： 基于规则的编程是否能比传统编程更有效地处理多样化的信息？<br />
<br />
盖茨： 这个问题不太容易解释。比如，你有一个计算桥梁建造方法的程序，它涵盖了关于压力、弯曲和金属特性的所有知识。这个程序中融入了工程学和材料学等方面的专业知识。如果你突然说要用塑料来建桥，对于这个程序来说，这种改变就像是要在火星上建桥一样翻天覆地。<br />
<br />
在极端的规则驱动编程中，金属能承受的压力和重力的工作原理等物理原理都会被明确地定义为规则。所有的逻辑推理都是基于这些规则的检验和应用。但现在，我们还没有足够高效的规则验证工具，以这种方式去处理问题是极其低效的。然而，这正是我们正在取得进展的领域之一，它可能会在不久的将来改变编程的方式。另一个前景是，我们可能会有数百台计算机同时并行运作。事实上，这可能有助于我们高效地运行基于规则的系统。这样的重大架构变化可能会影响人们编程的方式，或者他们对编程的看法。<br />
<br />
程序员最担心的是，编译器变得越来越强大，计算机运行速度越来越快，以至于程序员的作用变得不再重要。我曾经也担心，当我决定专注于某个领域时，随着时间的推移，它的重要性可能会逐渐降低。<br />
<br />
采访者： 作为一家业务范围广泛的公司，微软如何跟上整个行业的快速变化？<br />
<br />
盖茨： 实际上，我并没有跟踪所有的事情。我与 IBM、苹果、DEC 以及日本的顶尖人士合作。我必须了解即将发生的事情，而不是浪费时间去猜测。当我与微软的同事一起出差时，我们会讨论目前发生的事情。微软的电子邮件系统是一个高效的工具，帮我保持消息的更新。<br />
<br />
保持信息更新的一个方法是使用个人电脑，确保我阅读了说明书并使用了前十款顶级软件产品。这些产品并不经常变更，所以我能够对它们有很深的了解。如果你真的对个人计算感兴趣，你会尝试每一款软件，了解它们的特点，并思考如何做得更好。<br />
<br />
从某种意义上讲，个人电脑已变得更加简单。现在我们只有两种主流架构：PC 和 Mac。回想起以前，我们有三十到四十种完全不兼容的机器，还有许多不同的编程语言。但现在，为了让数百万用户能够理解并使用，我们不得不使这些系统更加统一和标准化。事实上，行业中的很多活动并没有真正推动技术的发展。我更愿意关注网络和图形领域，因为我们在这些领域的工作可能会影响技术的前沿，而不是去关注哪家零售连锁破产了，谁贿赂了谁，或者某公司给了某人多少股票。真正聪明的人会专注于他们的专业领域，并将任何他们认为重要的信息或可能产生重大影响的项目带给我。</p>
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0RZbEdyQ1hVQUFPZGdVLnBuZw==" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1744607895134622115#m</id>
            <title>《在AI优势的争夺中，中国和美国分别走出了各自的独特道路》

作者：Manya Koetse

北京曾设定在2030年成为全球AI领导者的目标，然而，这是在ChatGPT出现之前。

2023年，在中国社交媒体的在线讨论中，尤为引人关注的是ChatGPT的崛起。

美国OpenAI公司在2022年底官方发布的聊天机器人ChatGPT，直到2023年才因其极速增长在中国引起关注，此时，中国政府已经设定了在2030年成为全球AI领导者的目标。

在过去的十年里，AI在中国社会和数字文化中的重要性日益凸显。自从新冠病毒爆发以来，AI在学校、办公大楼和工厂中的应用更是快速推进。

AI面部识别技术在从公共安全到支付技术的各个领域都有所应用；智能眼镜和头盔使许多工人的工作变得更加容易；在购物中心、餐馆和银行，智能机器人已经成为常见的视线。

鹰与龙之间的科技竞赛的结果似乎毋庸置疑，但随后出现了ChatGPT的挑战。

中国花了数月时间来推出自己的类似产品，但这些产品在多方面都似乎落后于它们的西方对手。甚至科技部长也承认，中国的聊天机器人在与美国的竞争中遇到了困难，这让中国网民疑惑——在即将迈入AI纪元的前夜，中国是否能主导这个时代。

专家和博客作者对此有不同的看法：有人认为，中国科技公司聚焦于快速应用化而非长时间的研发，这就是中国没有率先推出类似ChatGPT产品的原因。还有人认为，由于中文的丰富性和复杂性，使得在中国训练语言模型更具挑战性。

然而，人们普遍认为，由于政治敏感性以及中国线上环境的严格管控和审查，中国开发类似ChatGPT的平台面临更大的挑战。

2023年夏，中国政府为生成式AI提出了法规，要求AI产生的内容，无论是图片或文本，都必须符合“社会主义核心价值观”，不能削弱国家权力，伤害民族团结，也不能传播虚假信息。同时还要求AI服务提供商必须防止用户过度依赖其服务。

至此，许多中国科技公司已经推出了自己的聊天机器人，但对于他们来说，在中国大陆接入ChatGPT——由于受到国家制定的许多限制而变得近乎不可能。比如试图向百度的Ernie聊天机器人询问关于中国领导层的一些简单问题，可能会导致对话立即终止。

在秋季，中国AI公司科大讯飞赴美上市后，由于其一款AI平板在帮助学生做作业时生成了含有对毛泽东的批评的文章，导致公司股票暴跌。这起事件给了科大讯飞的员工一记惩戒，也警告了互联网行业的其他参与者，他们的AI模型必须在中国严格管控的网络环境下，把所有操作都纳入规章制度之内。

然而，这些举动是否意味着中国的AI革命开始失去势头呢？并非如此。

不论是党派还是人民，不论是年轻人还是老年人，不论是城市还是农村，AI的进步都正在影响着全社会的方方面面。AI驱动的社交媒体、直播应用和电商平台在中国的数字经济中起着关键的作用。

借助新的AI技术，老板们现在可以购买他们自己的数字人，不分昼夜地为他们工作并销售商品，给小型中国企业家带来了前所未有的机会。这些深度假冒者在电商平台上的热度在2023年爆炸。

新的数字化员工不仅可以回答客户的问题，还可以感知他们是否在微笑，知道何时应该简短回答。一个这样的虚拟模型，被一家中国房地产开发商评为年度员工。

百度最近公布了其宏大的计划——通过帮助十万名中国农民通过虚拟直播销售他们的产品，从而推动农村经济发展。

与此同时，中国政府正在与大型科技公司合作，向各年龄段的中国人推广吸引人的共产党宣传。国家报纸《人民日报》引入了一位虚拟主播。

尽管ChatGPT取得了成功，但过去一年已经明确表明，可能已经是时候脱离对西方和中国之间所谓"AI竞赛"的关注，而更多的关注他们各自不同的方法了。

中国注重在经济增长和政治稳定之间取得平衡。由于中央政府对数字化发展的严格控制，使得关注点在于网络主权和集体支持，以及"国家和谐"和保留与党的权力。

相比之下，西方则更加关注那些倡导个人主义、个人自主、去中心化和全球化的AI应用，这自然引发了要如何在个人权利和广泛的社会利益之间取得平衡的辩论。

西方应用AI的方式并不一定适合中国市场，反之亦然。

ChatGPT的到来将鹰与龙的独特道路暴露在世人眼前，他们分别在不同的道路上展开自己的竞争。这并不意味着他们无法从对方那里学习东西——我们只需要超越竞争的思维，跳出地缘政治一点看这个问题。

https://www.theguardian.com/world/2024/jan/09/in-the-race-for-ai-supremacy-china-and-the-us-are-travelling-on-entirely-different-tracks</title>
            <link>https://nitter.cz/dotey/status/1744607895134622115#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1744607895134622115#m</guid>
            <pubDate></pubDate>
            <updated>Tue, 09 Jan 2024 06:31:50 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>《在AI优势的争夺中，中国和美国分别走出了各自的独特道路》<br />
<br />
作者：Manya Koetse<br />
<br />
北京曾设定在2030年成为全球AI领导者的目标，然而，这是在ChatGPT出现之前。<br />
<br />
2023年，在中国社交媒体的在线讨论中，尤为引人关注的是ChatGPT的崛起。<br />
<br />
美国OpenAI公司在2022年底官方发布的聊天机器人ChatGPT，直到2023年才因其极速增长在中国引起关注，此时，中国政府已经设定了在2030年成为全球AI领导者的目标。<br />
<br />
在过去的十年里，AI在中国社会和数字文化中的重要性日益凸显。自从新冠病毒爆发以来，AI在学校、办公大楼和工厂中的应用更是快速推进。<br />
<br />
AI面部识别技术在从公共安全到支付技术的各个领域都有所应用；智能眼镜和头盔使许多工人的工作变得更加容易；在购物中心、餐馆和银行，智能机器人已经成为常见的视线。<br />
<br />
鹰与龙之间的科技竞赛的结果似乎毋庸置疑，但随后出现了ChatGPT的挑战。<br />
<br />
中国花了数月时间来推出自己的类似产品，但这些产品在多方面都似乎落后于它们的西方对手。甚至科技部长也承认，中国的聊天机器人在与美国的竞争中遇到了困难，这让中国网民疑惑——在即将迈入AI纪元的前夜，中国是否能主导这个时代。<br />
<br />
专家和博客作者对此有不同的看法：有人认为，中国科技公司聚焦于快速应用化而非长时间的研发，这就是中国没有率先推出类似ChatGPT产品的原因。还有人认为，由于中文的丰富性和复杂性，使得在中国训练语言模型更具挑战性。<br />
<br />
然而，人们普遍认为，由于政治敏感性以及中国线上环境的严格管控和审查，中国开发类似ChatGPT的平台面临更大的挑战。<br />
<br />
2023年夏，中国政府为生成式AI提出了法规，要求AI产生的内容，无论是图片或文本，都必须符合“社会主义核心价值观”，不能削弱国家权力，伤害民族团结，也不能传播虚假信息。同时还要求AI服务提供商必须防止用户过度依赖其服务。<br />
<br />
至此，许多中国科技公司已经推出了自己的聊天机器人，但对于他们来说，在中国大陆接入ChatGPT——由于受到国家制定的许多限制而变得近乎不可能。比如试图向百度的Ernie聊天机器人询问关于中国领导层的一些简单问题，可能会导致对话立即终止。<br />
<br />
在秋季，中国AI公司科大讯飞赴美上市后，由于其一款AI平板在帮助学生做作业时生成了含有对毛泽东的批评的文章，导致公司股票暴跌。这起事件给了科大讯飞的员工一记惩戒，也警告了互联网行业的其他参与者，他们的AI模型必须在中国严格管控的网络环境下，把所有操作都纳入规章制度之内。<br />
<br />
然而，这些举动是否意味着中国的AI革命开始失去势头呢？并非如此。<br />
<br />
不论是党派还是人民，不论是年轻人还是老年人，不论是城市还是农村，AI的进步都正在影响着全社会的方方面面。AI驱动的社交媒体、直播应用和电商平台在中国的数字经济中起着关键的作用。<br />
<br />
借助新的AI技术，老板们现在可以购买他们自己的数字人，不分昼夜地为他们工作并销售商品，给小型中国企业家带来了前所未有的机会。这些深度假冒者在电商平台上的热度在2023年爆炸。<br />
<br />
新的数字化员工不仅可以回答客户的问题，还可以感知他们是否在微笑，知道何时应该简短回答。一个这样的虚拟模型，被一家中国房地产开发商评为年度员工。<br />
<br />
百度最近公布了其宏大的计划——通过帮助十万名中国农民通过虚拟直播销售他们的产品，从而推动农村经济发展。<br />
<br />
与此同时，中国政府正在与大型科技公司合作，向各年龄段的中国人推广吸引人的共产党宣传。国家报纸《人民日报》引入了一位虚拟主播。<br />
<br />
尽管ChatGPT取得了成功，但过去一年已经明确表明，可能已经是时候脱离对西方和中国之间所谓"AI竞赛"的关注，而更多的关注他们各自不同的方法了。<br />
<br />
中国注重在经济增长和政治稳定之间取得平衡。由于中央政府对数字化发展的严格控制，使得关注点在于网络主权和集体支持，以及"国家和谐"和保留与党的权力。<br />
<br />
相比之下，西方则更加关注那些倡导个人主义、个人自主、去中心化和全球化的AI应用，这自然引发了要如何在个人权利和广泛的社会利益之间取得平衡的辩论。<br />
<br />
西方应用AI的方式并不一定适合中国市场，反之亦然。<br />
<br />
ChatGPT的到来将鹰与龙的独特道路暴露在世人眼前，他们分别在不同的道路上展开自己的竞争。这并不意味着他们无法从对方那里学习东西——我们只需要超越竞争的思维，跳出地缘政治一点看这个问题。<br />
<br />
<a href="https://www.theguardian.com/world/2024/jan/09/in-the-race-for-ai-supremacy-china-and-the-us-are-travelling-on-entirely-different-tracks">theguardian.com/world/2024/j…</a></p>
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0RZV29MWVdnQUFJMzFHLnBuZw==" />
<img src="https://nitter.cz/pic/enc/bWVkaWEvR0RZV3FfMFdrQUE2OUxyLnBuZw==" />
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1744561781144490345#m</id>
            <title>Mixtral 8x7B 论文来了</title>
            <link>https://nitter.cz/dotey/status/1744561781144490345#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1744561781144490345#m</guid>
            <pubDate></pubDate>
            <updated>Tue, 09 Jan 2024 03:28:35 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>Mixtral 8x7B 论文来了</p>
<p><a href="https://nitter.cz/dchaplot/status/1744547220983005478#m">nitter.cz/dchaplot/status/1744547220983005478#m</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://nitter.cz/dotey/status/1744507505575674062#m</id>
            <title>R to @dotey: 哈哈</title>
            <link>https://nitter.cz/dotey/status/1744507505575674062#m</link>
            <guid isPermaLink="false">https://nitter.cz/dotey/status/1744507505575674062#m</guid>
            <pubDate></pubDate>
            <updated>Mon, 08 Jan 2024 23:52:55 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    <p>哈哈</p>
<p><a href="https://nitter.cz/aigclab/status/1744506555066933674#m">nitter.cz/aigclab/status/1744506555066933674#m</a></p>
                ]]>
            </content:encoded>
        </item>
        
    </channel>
</rss>