<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title>AI探索站 - 即刻圈子</title>
        <link>https://m.okjike.com/topics/63579abb6724cc583b9bba9a</link>
        
        <item>
            <id>https://m.okjike.com/originalPosts/67347eca8d6dd8c09cfdf6bd</id>
            <title>AI探索站 11月13日</title>
            <link>https://m.okjike.com/originalPosts/67347eca8d6dd8c09cfdf6bd</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/67347eca8d6dd8c09cfdf6bd</guid>
            <pubDate></pubDate>
            <updated>Wed, 13 Nov 2024 10:26:18 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    秉承Build in Public，分享下使用Cursor实战开发一个前后端分离的网站的经验，希望对大家有帮助，有问题评论区留言，我看到会回复<br />✅1.明确技术栈<br />Cursor中模型我选的是cluade 3.5 sonnet，openai用过就知道根本没法比。拿到一个需求，首先让claude推荐能实现这个需求的技术栈，然后在cursor setting全局配置中的Rules（图1）和项目根目录的.cursorrules中包含对应的技术栈,这个网页中有很多cursorrule的模版，我就是在里面找的https://cursor.directory/<br />✅2.设计架构，逐一实现（图2）<br />就和写作文一样，你要先写一个大纲，然后根据大纲填入对应的内容<br />千万别上来就和cursor说我要你帮我实现一个文生图网站，人工智能不是神。<br />你就是架构师，cursor就是程序员，我通常会这样对cursor说：“好的，让我们一起来实现这个需求。你先把整体的架构列给我，先不要写代码”<br />然后cursor列出架构后，你根据自己的需要，增加或者减少<br />✅3.遇到报错保持耐心，运用好command+回车(macOS, windows我不知道是什么)<br />command+回车在cursor里面是可以让cursor阅读你当前项目的全部文件。像我这次项目代码特别多，光api的文件就7个还是8个。（图3）<br />我举个例子，比如有生成图片api,生成音频api，提取pdf文件api，如果你添加了某个功能代码开始报错或者进行本地调试怎么都运行不了，你可以这样子和cursor说:”现在我们遇到了一个报错，控制台日志如下：xxxx，你先不要急着写代码，先分析下可能是哪些文件中的代码出了问题，告诉我需要提供代码的文件，你再修改”<br />✅4.如果遇到要修改现有文件的代码，一定一定要给cursor这个提示：“先阅读一遍我目前的代码，再进行修改”，你不这样说，cursor可能不知道你目前代码的结构，把你关键功能直接改没了都可能<br />✅5.前端页面如何快速实现？<br />你可以选择上v0.dev或者别的文生图，生成一个界面的图片，再发给claude让你复刻。我对界面没什么要求，我就是这样提示cursor的：“我们的网站主题是ai播客生成，我希望整体的设计风格是充满活力和激情的，请你以此基础发挥想象力设计我的ui界面。<br />首页组件我要求包括但不限于：1.Hero 2.cta 3.faq 4.how it works....”<br />✅6.最重要的一点，你和cursor对话的时候通常会开多个聊天框（看图4右侧滑动按钮我完成这个项目开了多少聊天框），一个聊天框聊的东西多了就特别容易抽风，怎么保持让cursor的记忆同步呢？<br />每聊完一个聊天框，你要开启新聊天框的时候，就和cursor说：“请你回顾我们前面全部对话，总结更新我的项目架构文件，供未来别的开发人员使用“<br />✅7.总结：<br />cursor很强大，也很弱，取决于你会不会使用。<br />我前端是用next.js,后端用python，中间还涉及一些我从来没有接触过的服务器，命令行等运行命令。你一定要把前提和背景告诉cursor，举个简单的例子，我要在hugging face space上部署项目，但是发现服务器启动的时候日志疯狂报错，你千万不要直接把报错日志丢给cursor，这样子解决不了问题，你要这样说:“这是我部署到hugging face space服务器的时候的错误日志，请你看一遍，然后你告诉我可能是哪里出了问题，需要我提供哪些代码文件给你，我嗯先不急着写代码，先一起讨论下”<br />希望对大家有帮助，以后还会继续分享我在实战中使用cursor的经验。我是完全0代码基础，我可以，你一样可以，不要对未知的技术畏惧，不懂的就耐心去问cursor
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/673449678d6dd8c09cfa054b</id>
            <title>AI探索站 11月13日</title>
            <link>https://m.okjike.com/originalPosts/673449678d6dd8c09cfa054b</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/673449678d6dd8c09cfa054b</guid>
            <pubDate></pubDate>
            <updated>Wed, 13 Nov 2024 06:38:31 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    土耳其老师根据学生未来想成为的职业，生成对应职业的 AI 照片打印出来给他们。
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/673402fbf0513f1316c9ff6f</id>
            <title>AI探索站 11月13日</title>
            <link>https://m.okjike.com/originalPosts/673402fbf0513f1316c9ff6f</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/673402fbf0513f1316c9ff6f</guid>
            <pubDate></pubDate>
            <updated>Wed, 13 Nov 2024 01:38:03 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    我的第一个产品:Ai播客生成器现在上线了！<br />地址 https://mypodmates.com/<br />这是一个你可以放入PDF或网页，自动生成双人对话的播客。你会看到有两个ai机器人在对你输入的内容进行聊天和讨论<br />✅核心内容：<br />1.PDF分析：目前最高支持上传15-20页，5M以内的文件<br />2.网页分析：上传网页链接，分析网页内容<br />3.问题导向：可以输入你想重点聊的话题，比如放入一篇关于苹果简介的pdf文档，想重点关注苹果的生产地有哪些，播客内容会重点围绕这部分<br />❌待提升：<br />1.目前只支持英文，多语言(包括中文)未来可能放入，主要看用户反馈，不知道中文需求多不多<br />2.语音生成能力待提高：现在已经找到了更好的语音生成模型和解决方案，打算先收集一下用户反馈<br />3.PDF更长的文件支持<br /><br />由于成本问题，我自己也是今年刚毕业，没什么储蓄，所以目前新用户免费赠送2次生成音频的额度，如果有更多的使用需求欢迎付费。关于产品的任何反馈或者疑问也欢迎向我提出<br /><br />最后感谢：<br />GitHub开源库：https://github.com/meta-llama/llama-recipes<br />感谢豆哥的社群技术支持@艾逗笔 <br />感谢飞哥的社群seo支持@哥飞 <br />还有感谢一些路上为我排忧解难的朋友，太多了就不一一艾特了。
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/6733f0ea8dc1346967ab8852</id>
            <title>AI探索站 11月13日</title>
            <link>https://m.okjike.com/originalPosts/6733f0ea8dc1346967ab8852</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/6733f0ea8dc1346967ab8852</guid>
            <pubDate></pubDate>
            <updated>Wed, 13 Nov 2024 00:20:58 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    Bolt New 的产品和销售数据出来了！<br /><br />- 4周时间，从0到400万美金的 ARR！<br />- 使用的 Claude API 消耗量每天翻倍式增长<br />- 每周有十万人持续使用<br /><br />这种爆发式的增长，核心是因为它解决了一个一直以来的行业难题：<br />Web 是世界上使用最广泛的平台，但开发者却无法在浏览器中构建 Web 应用。<br />通过开创性的 WebContainers 技术和先进的 AI Coder 解决了这个问题。<br /><br />Bolt 认为未来人人都是开发者，十亿级别的开发者！<br />一个现实的例子是，一位用户在 Upwork 上获得了 5000 美元的报价和 2-3 个月的时间来打造她的 MVP。几天后 Bolt 发布，她购买了 50 美元/月的计划，并在不到 2 周的时间内构建并推出了她的产品。<br /><br />引用链接：https://www.anthropic.com/customers/stackblitz
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/6733e488cc17b0c5d347260b</id>
            <title>AI探索站 11月12日</title>
            <link>https://m.okjike.com/originalPosts/6733e488cc17b0c5d347260b</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/6733e488cc17b0c5d347260b</guid>
            <pubDate></pubDate>
            <updated>Tue, 12 Nov 2024 23:28:08 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    我回来了~<br /><br />因为一连贯的原因，在去年11月脱离了AI这股浪潮<br />甚至为了节约精力，主动切割了和这个行业的联系<br /><br />期间的忙碌和疲惫尚可切磋，但时不我与的感觉可真不好受<br />沉舟侧畔千帆过，不是沉舟竟过千帆，而是千帆已过，你却陷于沉舟<br /><br />好在还有病树床头万木春的下半场，还能有杯酒长精神的意气<br />重新入学，重新开始，马丁3.0<br /><br />顺便，谁能告诉我，最近一年，AI最大的进展是啥？<br />除了字节杀入了几乎所有领域以外（这一年里最放不下我的就是字节的猎头了）
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/6733406e19169db2df9633c8</id>
            <title>AI探索站 11月12日</title>
            <link>https://m.okjike.com/originalPosts/6733406e19169db2df9633c8</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/6733406e19169db2df9633c8</guid>
            <pubDate></pubDate>
            <updated>Tue, 12 Nov 2024 11:47:58 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    文字是有力量的。<br /><br />写prompt之后，才真正理解了什么是「一字千钧」。<br /><br />请尊重文字，LLM会感受到。
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/6732d597f028aec83d5a0e33</id>
            <title>AI探索站 11月12日</title>
            <link>https://m.okjike.com/originalPosts/6732d597f028aec83d5a0e33</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/6732d597f028aec83d5a0e33</guid>
            <pubDate></pubDate>
            <updated>Tue, 12 Nov 2024 04:12:07 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    Anthropic CEO 接受了  Lex Fridman 长达五个小时的访谈。里面的信息非常丰富，老哥真的实诚。<br /><br />整理了一下笔记，内容包括：<br /><br />- AGI 何时到来<br />- Scaling Hypothesis的定义以及是否结束<br />- Anthropic的产品策略<br />- LLM可解释性研究<br />- AI发展时间线的介绍和预测<br /><br />长文内容：https://mp.weixin.qq.com/s/OClP9QhQUGAp5DHZ9zh3jQ
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/6731edb09c3d17b69b20b79d</id>
            <title>AI探索站 11月11日</title>
            <link>https://m.okjike.com/originalPosts/6731edb09c3d17b69b20b79d</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/6731edb09c3d17b69b20b79d</guid>
            <pubDate></pubDate>
            <updated>Mon, 11 Nov 2024 11:42:40 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    原来我在 GPT 眼里已经这么老了，好奇大家的<br /><br />prompt ：<br />based on what you know about me. draw a picture of what you think my current life looks like
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/672f671bc826ffe910c30f00</id>
            <title>AI探索站 11月09日</title>
            <link>https://m.okjike.com/originalPosts/672f671bc826ffe910c30f00</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/672f671bc826ffe910c30f00</guid>
            <pubDate></pubDate>
            <updated>Sat, 09 Nov 2024 13:43:55 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    核心辐射学习法<br /><br />这是我常用的一种学习和思考方法。<br /><br />学习一项新知识，新技术的时候。如果直接面对一整个庞大的系统性知识，容易产生畏难心理、记忆负担、认知迷茫等问题，同时容易陷入知其然不知其所以然的地步。<br /><br />为了让自己更快更深的理解掌握一项新知识，我会希望尽可能的抛弃掉所有的复杂性，先从最小核心出发，再慢慢掌握基础，然后实践，然后提升，然后拓展。<br /><br />以 RAG为例 (个人不专业的回答，欢迎批评指正):<br /><br />1. 最小核心:  知识 + 指令 构成的提示词。 最简单的做法就是我们读文献的时候，手动将知识复制粘贴给AI (人工检索知识)，然后要求AI 根据知识回答问题。<br /><br />2. 基础层。人工检索效率低，所以最小核心的人工检索知识变为机器检索知识。<br />知识太多，无法一次输入，所以需要对知识进行分片，于是有了知识切片的各种方法。<br />为了检索的准，于是有了关键词检索，语义检索等技术。<br />为了进行语义检索，需要将文字转换为向量，所以有了转换的embedding 模型，要对这些向量操作，所以需要向量数据库。<br />机器将检索到的知识和指令结合构成提示词，引导模型生成回答。<br /><br />3. 实践层。基本上使用上面这些就能构建一个小的rag系统，花时间实验，试错，调优。在优化的过程中发现更多问题，检索不准的问题，生成不理想的问题等等。<br /><br />4. 提升层。为了优化检索效果，检索的时候使用各种混合方法，有些问题依赖的知识分布在多段内容中，因此使用多段内容。但是这些内容和问题直接的相关性等又有不同，希望筛选出最相关的，于是有了对检索得到的知识的排序，有了排序模型。为了进一步提升系统效果，使用更好的模型，更好的参数，对生成数据流优化，各个步骤上的参数测试优化等等。<br /><br />5. 拓展层。进一步进行系统层面的优化，对系统稳定性，易用性，产品设计等方面优化。比如在实际使用过程中发现很多问题是重复的，这时候就可以构建缓存系统，第一次回答之后下次类似问题进来直接使用缓存的已有答案。<br /><br />思考是这个核心辐射的逆过程，不断剔除掉外在的复杂性，观察事物是否成立，最后只保留下最小的不可去除的核心。<br /><br />个人按这个思路，Agent 和 RAG 如果不断去除掉复杂性，最终保留到最小核心的话，可以回退到 prompt 的构造法。
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://m.okjike.com/originalPosts/6724416cc5328b51c42a9f0c</id>
            <title>AI探索站 11月01日</title>
            <link>https://m.okjike.com/originalPosts/6724416cc5328b51c42a9f0c</link>
            <guid isPermaLink="false">https://m.okjike.com/originalPosts/6724416cc5328b51c42a9f0c</guid>
            <pubDate></pubDate>
            <updated>Fri, 01 Nov 2024 02:48:12 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                    🔍 ChatGPT Search 来了，初体验相当惊艳～<br /><br />看到 Sam Altman 罕见自荐了一个浏览器插件，令人感到十分好奇。 回想了下，Open AI到底还有哪些神秘产品没有发布？ <br /><br />打开ChatGPT 网页，原来Search 正式登场了。快速测试后，不得不说新产品的体验确实令人惊艳：<br /><br />-  首先是产品形态的惊喜。在输入框下方，多了个小小按钮——「搜索」。（这个登场大大超出了预期， 因为我们都是在等一个独立Search GPT） <br />- 然后，搜索的质量。快速测试一些实时性较高的搜索内容， 例如， 夏威夷冲浪🏄‍♀️，上海台风🌀 ，以及任天堂新App🎵； 每次查询的结果，都相当不错。 <br />- 即使对我这个Perplexity 深度用户来说，从性能、易用性以及美观性，ChatGPT Search都做到了一流的体验。 <br />- 最令人印象深刻的是输入框这里的设计，将聊天和搜索如此自然的融合，这种无缝感知是点睛之笔。 <br /><br />ChatGPT 再次将AI 的打开方式带到了新高度， Bravo 👏<br /><br />🧩 One More Thing：<br /><br />推荐尝试下这个Chrome小插件， ChatGPT Search 。我在随附的截图（5～6）中展示了用法：在浏览器输入框直接，输入搜索内容，直接进入结果页。 相信你多试几次，可能就会离不开了。  <br />https://chromewebstore.google.com/detail/chatgpt-search/ejcfepkfckglbgocfkanmcdngdijcgld
                ]]>
            </content:encoded>
        </item>
        
    </channel>
</rss>