<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title>少数派 -- Matrix</title>
        <link>https://sspai.com/matrix</link>
        
        <item>
            <id>https://sspai.com/post/87846</id>
            <title>Essential Meets Expression——聊一聊Nothing Phone(2a)</title>
            <link>https://sspai.com/post/87846</link>
            <guid isPermaLink="false">https://sspai.com/post/87846</guid>
            <pubDate></pubDate>
            <updated>Sun, 07 Apr 2024 01:29:05 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: Matrix, 写作社区, 产品体验, 观点
<br>
<br>
总结: Matrix 是一个写作社区，主张分享真实的产品体验和观点。文章代表作者个人观点，少数派仅对标题和排版略作修改。 </div>
                        <hr>
                    
                    <p style="margin-left: 0px;"><strong>Matrix 首页推荐</strong>&nbsp;</p><p style="margin-left: 0px;"><a href="https://sspai.com/matrix">Matrix</a>&nbsp;是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&nbsp;<br />文章代表作者个人观点，少数派仅对标题和排版略作修改。</p><hr /><h2>Intro. (2a)? or (2e).</h2><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/4b467e42620dbd8da0dea7ddcf471282.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>性价比机型似乎总要加几个不痛不痒的字符来给正代旗舰的纯数字作区分，而 a 这个字符，26 字母中的第一个，就如同当代旗舰子集一般，恰到好处的比纯血弱一个档次但又不会因为选用其他字母而显得差距过分的大，就好比 2a 之于 2，既可以自信的与正主同台竞技又适时低了低头表明自己的次旗舰的身份，冰冷且有机。</p><p>但是，（2a）这种刻意设计出来的刚刚好的圆滑的名称，是不是过于无聊了？不如去寻找一些有趣的字母，比如（2e），如何？e 既可以指带其实用性为主的内核，即 Essential，又可以指其张扬不羁的外在，即 Expression。而这台 Phone (2a)，或者我更喜欢称之为 (2e)，是否可以经得起这种推敲，且简单一聊。</p><h2>Pt1. The Design, The Expression? The Compromises.</h2><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/5abc092299da29a4bca297bd86aaf7e9.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>不出意外的，这次的设计依旧是争议的焦点所在。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/26cfa69b91a7424769474b0e561d277e.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>Phone (2a) 的后盖设计可以说是割裂的：上半部分是高度集中的纯粹功能区，横向放置的两颗摄像头如双瞳般窥探外界，以镜头模组为中心的 CD 纹层层叠叠构建出 NFC 区域，与环境来个近距离接触，环绕在周边的三个灯条闪闪烁烁，依靠明暗变化与他人沟通，整体表现出一种不属于数码产品的有机质感；</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/10103f9f3c958e26f4cd247aa3f7da78.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>下半部分的 PCB 排线弯弯曲曲，构建出从末端延伸至核心的意向，整体呈现出一种属于平面设计的秩序感，想到其产品设计助理人曾提到过设计灵感来自于平面设计大师 Massimo Vignelli，多少赋予了这种难以解读的设计语言一种学院派的逻辑和艺术感。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/075edc30a39c9056ce207150a4f651cd.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>从侧面来看，半透明的塑料后盖将一切元素包裹其中，而这一点点带有灰度的透明的白正好给予了整个设计一些整体性，抵消了部分割裂感。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/f9df4de4b4b6751535141659d6408426.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>但其中有多少有一些不对味：既然要通过产品对话 Vignelli，而将「传达」作为第一要务的平面设计在 Phone (2a) 上的体现是否达标呢？</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/af14d8929979893c63fc366e281debd5.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>不少人会认为艺术设计是一个高度抽象且难以理解的概念，尤其是步入现代和后现代思维浪潮后，艺术家在平面上实现了各种元素的高度抽形亦或者是纯粹的心理可视化，观众也进入了一种我必须要看懂不然就是不懂艺术的偏执中，故艺术可以不必看懂，只要感受就好。</p><p>但是，平面设计不属于这一类型，平面设计的意义从一开始就是「传达」，传递设计者向观众表达的信息以及一定的交互作用，比如田中一光给日本舞蹈表演所绘制的海报中所采用的高度几何化的日本艺伎，原研哉经典的无印良品标签等等，都是在传递信息。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/68d254b8d6277e6682ee1e5ef18e8466.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>而在 Nothing Phone(2a) 的宣传海报构成上其实就能看到这些小心思：黑色底板上两个白色的同尺寸圆形，或者白色底板上两个同尺寸的黑色圆形，交叉排列形成了一种诡异的波普艺术，并且鼓励看到的人自行创作，给海报画上眼睛。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/5c0a11dc4db8cff431a9c1b0553a543a.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>刨去图形，文字/字体也是沟通的一环，而字体的设计恰好也是能够展现品牌/设计实力或者审美体系的重要一环，所以 Nothing 很聪明，做出来了一圆点为文字构成的 Nothing Font，即 N Dot，并不吝惜大力推用。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/6a0e1ea5c22da7bd107dd43b2b09d772.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>这两者共同构建了品牌设计的审美环境，以及最重要的，品牌传承性。这种传承定调与文字设计与排版中，二维平面对三维空间的交互里。</p><p>那么，Phone（2a）的后盖设计体现 Nothing 的品牌审美和传承性了吗？我认为是的，无论是标志性的透明设计和多种材质拼贴，亦或者是灯条，这些 Nothing 基础元素都有，但是它是好的设计吗？目前看来不是，在点出设计灵感来源来自 Massimo Vignelli 后，感觉更不是。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/cfba56fe0bece629382ba2fb3fd8b82c.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>虽然 Phone(2a) 在一定程度上展现了 Design is One 的原则，即做好一个设计就能做好多个设计，而且其单一背板构成元素，例如机身下半部分类似 PCB 的曲线也很漂亮的实现了背板的填充和品牌形象构建，但是，缺乏了整体的和谐度和力量感。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/bf879fee106dd94dd02dd983a2fbb5e8.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>既然是致敬 Vignelli，那就以他的作品来做对位，其线条的设计大概是来源于 1970 年纽约地铁示意图，即 45° 与 75° 的线条构成与多种色彩运用，而其拼叠重复的曲线灵感恐怕来源于类似 Knoll International 的多色叠印，看似很好的致敬了其中的元素，实则忽略了色彩的运用。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/04/06/d1eba991ff1cb51131118ab5270bc89b.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/04/06/588513e3f0447f4e8b33274a115517b2.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>和 Vignelli 常在设计中使用的 Helvetica 字体带来的丰富字重变化一样，单一多种颜色的组合运用也能体现设计的严肃性或者活泼性，以及内在的调性和象征，比如 American Airlines 使用的红蓝两色来呈现品牌背后的象征意义，或是 Richard Meier Architect 中标红的 Architect 所代表的方向性等等。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/04/06/d8086c6b61effdfd8ba649307ed3645e.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/04/06/ff1af7c5059c8adf9d5b76b6e7526ebd.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>但是 Phone (2a) 背板贫瘠的白色并没有这种感觉，这其实也类似于 Nothing 品牌色彩调性的作茧自缚，其设计团队也曾说过不会在 Nothing 的产品上大规模地采用较高饱和度的色彩而将其仅仅作为点缀色，比如 Phone (2a) 上的红色小方块，而隔壁 cmf 就没有这种限制，以更跳脱的色彩来迎合大众。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/29ac034ffacd20287edb514df807e592.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>故，恰好够用的三个灯条所构成的 Glyph Interface，高度集成的功能区，与缺乏重量的个性表达远不能称得上是 Expression，更多的是刚刚好够用的 Essentials。</p><h2>Pt2. The Performance, The Essentials, The Trade-offs.</h2><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/2d783463f675c8db45dfa55a49bad3d7.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>忘掉虚无缥缈的艺术，将手机翻至正面，来聊一聊枯燥无味的现实参数。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/6c2734bba1835b51225a7472abd2a310.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>相比于 Phone (1) 上较为难看的参数，Phone (2a) 显得相当有说服力。核心 SoC 采用联发科天玑 7200 Pro，类似于红米所定制的 Ultra，同为基于 7200 的改型。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/3900f435e055fd4f627da2384922676d.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>而存储配置，基于本人玩一玩的心态自然是拿了基础中的基础版 8GB 运存配合 128GB 的存储，在作为副手机日常使用且不运行国产 3A 大作的情况下性能自然不必担心，丝滑顺畅。当然这个性能也仅仅是卡在 Essential 的门槛上，简单游玩蔚蓝档案和明日方舟这一类对于性能配置要求不是很高的游戏尚可，但假如头铁游玩崩铁等游戏，表现可以说是过分恐怖但又在意料之内。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/caa0203384226baa443f8e64a39a6c47.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>作为 Nothing 用户日常交互第二多的选项：屏幕，自然也是给了不小的升级。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/d1596525d4f3add8d5b4d3f96c4d961f.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>四边等宽 6.7”FHD 柔性直屏，120Hz 刷新率，居中挖孔设计，并且十分讨巧的用中框将屏幕盖板包裹起来，就这一点点的白色，视觉上消减了屏幕边框的宽度，圆角呼应和谐舒适。可惜这块屏幕依旧有不容忽视的问题，即便官方宣称其典型亮度为 700nits，户外亮度为 1100nits 甚至峰值亮度来到了 1300nits，但是在户外强光条件下依旧是难以看清屏幕的显示内容，当然或许 Nothing 也料准的英国的天气一向不盛行艳阳天，用户大可以自适应一下。另外，也是得益于优良的成本控制，Phone (2a) 有且仅有一个前置光线传感器，故在室内点光源下会肆意的切换亮度，好在是柔和的缓慢增减而并非跳跃式的大开大合，多少也算是抚慰人心。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/397b64ed76a0a9ddcd6ba7faae94d815.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>硬件奠定体验的基础，而系统则能决定交互的上限。Nothing OS 来到 2.5 版本后，做出了不小的改动，在可用性以及个性化的呈现上大有改进。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/26ab11891e92fb668555a2838679ea62.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>Nothing 的图标包在持续地扩充，文件夹也可以自定义成三种大文件夹的样式以及用 Emoji 替换其显示内容，增强了一部分界面的趣味和整体的和谐度。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/ce4f0f71906ad398527c8613ed43890b.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>锁屏界面引入了有限的小组件并可以配合 AOD 使用，让不适应将手机翻至背面欣赏灯条的用户享受掌握信息的快乐。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/8fdc30500c88fab2f9272a344224fea5.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>桌面小组件也丰富了不少，并且推出了录音机小组件，曲线救国般的实现了通话录音。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/def2ead32149485065798fe7bc401db4.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>不只有类原生做不到的小窗，更是加入了全局长截屏等实用小功能，壁纸同样引入了 AI 生成 aka 关键词排列组合，虽不如 Pixel 上的选词填空但实际成效意外的不错，配合 Nothing 自家的长虹玻璃效果也算是相得益彰。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/be03808fe295952f28e20dab7e127aa4.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>续航和充电则是有舍有得。Phone (2a) 给到了 5000mah 电池，代价则是牺牲了无线充电，换来了 45w 有线快充，虽然失去了随放随充的爽快感，但是 45w 快速补电也算是适时的补偿。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/501b502fd9920608645541bd10a1afc7.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>最后，翻回背面，看一看这炯炯有神的双瞳和以三个灯条构成的 Glyph。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/c39bbd3097823924c4178e07f5fa6fb3.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>两颗镜头是平平无奇为成本而妥协的 50MP 三星全家桶，但 Nothing 似乎并不满足于此，十分邪门的在发布会上讲了影像算法，引入了 Ultra XDR，夜景优化，人像优化等一系列功能，可惜对于实际成片的帮助极为有限，整体依旧是令人没有什么拿起来进行创作的欲望的机子。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/04/06/4199bb83d73468e8694c0104b15fc031.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/04/06/7cbfdb780af40fb6777268a778eca89e.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/04/06/ecc7ac76fcc2fc4eb214cbef64a14952.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/04/06/cf5f998f498a7ee6ef8220e42857015e.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>而 Glyph Interface，Nothing 的核心所在，虽做出了简化成三条灯带的妥协，颇有一种浪子回头的低调收敛，但该有的功能一个不少。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/253abacce9a5892ab089990b48662f29.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>抛开在 Phone (1) 中所提及的铃声和通知灯效以及音频可视化外，这次 Nothing 引入了谓之 Essential Glyph 的通知选项，替换掉原来的通知灯效改为仅亮起竖向灯条 ，直到用户拿起手机阅览通知后才会熄灭，给了用户更充分的将手机倒扣在桌子上的理由。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/2e561520835fe7fbe47bfe2651b0ae72.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>此外还有些不痛不痒的小功能比如音量调节可视化，即调整音量按键时灯效会如同进度条一般增减，而 Glyph Timer 则是将倒计时转化为逐渐缩短的灯条，实现了另一种呈现方式的实况信息。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/7a31d3c60c9131337c65827d1a04b04d.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>同时 Nothing 也开放了 Glyph 的 API 接口并加入了 Glyph Progress 这类状态指示的功能，现阶段仅有 Google 日历，Uber 和 Zomato 接入了，期待未来更多应用接入这一 API，实现以 LED 光污染为载体的实况信息，真正做到 Essential，扭转 Glyph 中看不中用只能作为其他用户或者大厂后盖贴纸灵感的评价体系。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/a845b7d1450b2d04df9f5dd83e3cc500.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2>Pt3. The Overlooked Now, The Underestimated Future.</h2><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/87927edb84bcf3ee58ae17c8cf9c75f2.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>在历经两代手机的沉淀后，Nothing 似乎变得更加务实了一点，从 Phone (1) 的 Glyph 概念高于一切到 Phone (2) 的双管齐下，再到现在 Phone (2a) 在部分妥协设计语言以更加有性价比的配置佐以简化但又没有简化的 Glyph 成功斩获大量用户并且做出了白色依旧绝赞缺货中的优异成绩，更是依托高度活跃的社区文化稳步向前，以 Phone (2a）为原点推出了 Community Edition Project 持续探索前进的方向。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/c6fbb723b8647cce6f4af22fa9209ee5.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>海外市场并不如国内般一片红海，有卷到极限的硬件配置和令人不寒而栗的价格，更多的则是一潭死水与各种德不配位的配置高价格更高的中端产品，Nothing 的意义不仅在于追求张扬的自我，同样也在通过以一种不讲道理的方式将不属于这个价位的配置拉到可以接受的水平，并取巧的通过设计手段赋予用户更多的获得感，既是一些实用的小功能也是一份让他人眼前一亮的谈资。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/06/45712661bdf83193aa7c0c59c4a4b9c0.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>回到最初的字母之争，a 和 e 的区别度真的有那么大吗？以 a 为众字母之开头，Phone(2a) 的确起到了排头兵的作用，以此为根本 Nothing 高调进入了中端机市场并积极拓展海外份额， 谓之 ace，而隐藏在 a 之下的两个 e，Essential 和 Expression，才是用户接受的根本，以高调的个性迎接务实的生活，透过明亮的双眸观察世界，用闪烁的光点映照前路。</p><p style="margin-left: 0px;">&gt; 下载少数派&nbsp;<a href="https://sspai.com/page/client">客户端</a>、关注&nbsp;<a href="https://sspai.com/link?target=https%3A%2F%2Fwww.xiaohongshu.com%2Fuser%2Fprofile%2F63f5d65d000000001001d8d4" target="_blank">少数派小红书</a>，感受精彩数字生活 🍃</p><p style="margin-left: 0px;">&gt; 特惠、好用的硬件产品，尽在&nbsp;<a href="https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc" target="_blank">少数派 sspai 官方店铺</a>&nbsp;🛒</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87847</id>
            <title>读完《人人都能用英语》，我开发了一款产品有效积累词汇量</title>
            <link>https://sspai.com/post/87847</link>
            <guid isPermaLink="false">https://sspai.com/post/87847</guid>
            <pubDate></pubDate>
            <updated>Sun, 07 Apr 2024 01:27:35 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 英语学习, 积累词汇, 阅读, Siphon
<br>
<br>
总结: 通过大量阅读和频繁使用消化词汇是正确积累词汇量的方法。持续阅读英文内容是提高英文阅读能力的有效途径。Siphon是一款产品，旨在简单愉悦地帮助人们通过英文阅读高效积累词汇。 </div>
                        <hr>
                    
                    <h2 style="margin-left: 0px;"><strong>正确的积累词汇量的方法是什么</strong></h2><p style="margin-left: 0px;">李笑来老师写过一本书叫《人人都能用英语》，我觉得他把“英语学习”这件事说得非常透彻了，建议想学好英语的同学可以读一读。书中有一段话，我认为就是“有效积累词汇”的秘诀：</p><blockquote><p style="margin-left: 0px;"><i><strong>各种各样背单词的“神技”几乎都没有多大用处。最好的、最有效的是最朴素的方法：通过大量阅读积累词汇，通过频繁使用消化词汇。这也是不二法门。</strong></i></p></blockquote><p style="margin-left: 0px;">从书名也能看出，它强调“用”英语，而不是一直“学”英语。道理很朴素，和掌握其他技能一样，无非是熟能生巧，你不去“用”就不会“重复”，没有“重复”就是记不住、不熟练。对多数人而言，“用英语”就是持续地“阅读英语”，比如程序员读英文技术文档、技术书籍，学者读学术文献等等。</p><p style="margin-left: 0px;">所以积累词汇量和提高英文阅读能力的唯一有效方法就是：<strong>持续大量地阅读英文内容</strong>。和所有需要积累，需要“厚积薄发”的事情一样，一开始会慢，但会逐渐变快，无他，惟手熟尔！并且英文阅读这件事真的没想象中那么难，也许坚持一个月就会发生质的飞跃。我清晰记得，我英文阅读能力有明显提升是大三的时候用一个月的时间看完了第一本英文原版书《Beyond Feelings》。读完后真的有“重生”的感觉，一方面是理解了“critical thinking”，另一方面是显著提升了英文阅读能力。你看，这件事并不难，我只是花了一个月中的部分时间。</p><p style="margin-left: 0px;">当然，想要提高英文阅读理解能力，除了要积累词汇，还需要有好的语法基础和广博的知识储备，这些都需要下功夫，无须赘言。不过无论如何，词汇是基础。</p><h2 style="margin-left: 0px;"><strong>如何高效地通过英文阅读积累词汇</strong></h2><p style="margin-left: 0px;">但是，问题来了，究竟要“<strong>如何高效地通过英文阅读积累词汇呢</strong>”？</p><p style="margin-left: 0px;">过了这么多年，即便我每周都会阅读许多英文文章，自己的信息和知识获取一多半来自于英文内容，但我发现自己的词汇量似乎卡在了瓶颈中。反思后，我认为问题关键在于两个字：“<strong>刻意</strong>”。我有大量阅读，但并没有“刻意”积累词汇。每次遇到不熟悉的单词都是通过划词来查看解释，但这种方式似乎对于积累词汇量并没有太大的帮助，或者说效率太低。去年看《卡片笔记写作法》这本书，里面提到一个理论，大概是说，输入和输出的难度是成反比的，输入越简单输出越难。这个道理细想其实和熟能生巧是类似的，我没花什么力气去记忆，每次都依赖划词软件，自然不会真正记忆深刻，更谈不上输出了。</p><p style="margin-left: 0px;">那究竟要如何“刻意”，然后又能让“刻意”变得没那么刻意，不需要真的“头悬梁锥刺股”那般努力，因为我们都知道“靠毅力靠坚持”是靠不住的。如果这件事情真的需要投入很大的精力，那么对于大多数人而言，其实没有可行性。或许会继续像以前一样使用划词软件，然后阅读能力永远停留在一个不上不下的瓶颈期。</p><p style="margin-left: 0px;">好的产品就是要解决有价值的问题，我觉得以上的问题就是有价值的，<strong>我想让更多人“真正高效地通过英文阅读积累词汇”</strong>。也需要一些“刻意”和努力，但并不需要真的投入难以投入的时间和精力，从而让“通过英文阅读积累词汇”这件事真的可行真的有效。为此，我做了一款产品，叫 “Siphon”，Siphon 是“虹吸”的意思，我希望这款产品能帮助很多人高效地从大量英文阅读中“虹吸生词”，所以她的中文名叫“吸词”。</p><h2 style="margin-left: 0px;"><strong>Siphon 的产品理念</strong></h2><p style="margin-left: 0px;">以上铺陈了这么多，其实已经说明白了我做 Siphon 的初衷，Siphon 的产品理念可以概括为一句话：</p><blockquote><p style="margin-left: 0px;"><i><strong>用简单且愉悦的方式让“通过英文阅读积累词汇”这件事变得可行且有效</strong></i></p></blockquote><p style="margin-left: 0px;">如果把这句话拆开来，这款产品其实要回答三个问题：</p><ol><li>为什么要通过英文阅读积累词汇？</li><li>如何让这件需要“刻意”的事情变得简单愉悦以至于可行？</li><li>如何做到真的有效，要记住更要真的理解且会用？</li></ol><h3 style="margin-left: 0px;"><strong>1. 为什么要通过阅读积累词汇</strong></h3><p style="margin-left: 0px;">前面的文字已经回答了一半：</p><ul><li>我们要“用”英语，因为只有“用”才能重复遇到生词，才可能熟能生巧，而对多数人而言，“用英语”就等于“阅读英语”；</li></ul><p style="margin-left: 0px;">还有一个很重要的原因。很多人都“背单词”，但有多少人问过“背什么单词”。<strong>少楠在《笔记的方法》中提到，用好 flomo 有一个重要的理念叫做“以我为主”，说的就是要以对自己有用的方式来记笔记。不管是记笔记，还是记生词，我们最终的目的是为了以后能用到。</strong> 如果你不假思索，随便拿一本“红宝书”、“绿宝书”就开始背，你背的那些单词，你实际的工作中真的能用到吗？因为总的英文单词量有几十万，而你真的需要掌握的对你有用的可能只有一万。“对你有用的单词”仅仅是一个子集，而判断对你是否有用的一个很有效的办法就是看这个单词是否出现在了你日常的阅读中。从概率上讲，通过阅读积累的这些“单词”以后更有可能再遇到，也就是更有可能被你所用。所以“通过阅读积累词汇”的另一个理由是：</p><ul><li>通过阅读积累的这些“单词”有更大的概率在以后被你所用，能真的达到积累单词的目的。</li></ul><h3 style="margin-left: 0px;"><strong>2. 如何做到简单愉悦以至于可行</strong></h3><p style="margin-left: 0px;">不管是上学时候的学习，还是工作以后技能的训练，如果想要得到一个好结果，肯吃苦、下苦功是必要条件。我其实很早就明白这个道理，因为我早就意识到自己并没有比别人更聪明，但为什么从小学到高中成绩一直都是班里第一呢？无他，<strong>就如我们都喜爱的鲁迅先生说过，“哪里有天才，我是把别人喝咖啡的时间都用在写作上了”（这句话真的是先生说的）</strong>。我也只不过是在别人嬉戏的时候，还在解方程题。</p><p style="margin-left: 0px;">但“肯吃苦、下苦功”并不是真相，真相是我非常愉快地“下苦功”，对于当时的我而言，解方程画几何其实和玩任天堂游戏一样有趣：一张卷子就是一个游戏，做题从简单到难，一个个完成挑战，最后老师给你打个 120 分，满满的正反馈和成就感。</p><p style="margin-left: 0px;">我不想强调“天赋”或者“兴趣”，因为它们多少有一些宿命论的味道。我想说其中更本质的一点：如果要掌握一门比较难的技能，就应该多想想如何让原本看似困难、枯燥的事情变得相对简单且有趣，能让自己心甘情愿地甚至愉悦地去做这件事情。</p><p style="margin-left: 0px;">比如，我把“做卷子”变成“打游戏”，仅仅是这么一点观念上的改变就能带来很大的行动上的变化。虽然当时我并没有明确意识到这一点。</p><p style="margin-left: 0px;">回到如何让“通过英文阅读积累词汇”这件事变得简单愉悦以至于可行这个问题。</p><h4 style="margin-left: 0px;"><strong>2.1 如何做到简单</strong></h4><p style="margin-left: 0px;">首先，如何做到简单。</p><p style="margin-left: 0px;">以下是安装 Siphon 浏览器插件后双击网页中单词的效果：</p> <p>&nbsp;</p><p style="margin-left: 0px;">只要双击一下，就可以自动翻译并加入到你的生词库中，同时还会在单词下面自动划线。并且当你下次访问这个页面的时候，程序依然会帮你自动划线，让你有意识地去“刻意”复习一下这个单词，而这份“刻意”的成本只是把鼠标移入划线的单词，效果如下：</p> <p>&nbsp;</p><p style="margin-left: 0px;">记录生词，以及在以后的阅读中随时“刻意”复习生词就是这么简单！</p><h4 style="margin-left: 0px;"><strong>2.2 如何做到愉悦</strong></h4><p style="margin-left: 0px;">其次，如何做到愉悦。</p><p style="margin-left: 0px;">受到一些游戏化产品设计的启发，我开发了两种愉悦的复习功能：</p><ol><li>纸牌卡片复习</li><li>打字拼写练习</li></ol><p style="margin-left: 0px;">以下是纸牌卡片复习的录屏展示：</p> <p>&nbsp;</p><p style="margin-left: 0px;">以下是打字拼写练习的录屏展示：</p> <p>&nbsp;</p><p style="margin-left: 0px;">也许有王婆卖瓜的嫌疑，但我自己真的享受这些复习方式，每天定个小目标，然后只要 5-10 分钟，就跟随手打个小游戏一样轻松愉快，但不知不觉间就复习了十几个单词，每天 5 分钟，一年掌握 1000 个单词非常轻松。</p><p style="margin-left: 0px;">除了以上复习方式外，我后续也会考虑增加更多的游戏化的让人愉悦甚至“欲罢不能”的复习功能。</p><h3 style="margin-left: 0px;"><strong>3. 如何做到真的有效</strong></h3><p style="margin-left: 0px;">这是最后但也许是最重要的一个问题。我开发这款产品，以及未来可能成为用户的你，我们都需要投入很多时间在这件事上。做这款产品是否真的有意义，而你作为用户是否真的值得投入时间用这款产品？这是我一开始就思考的问题，即如何做到真的有效。</p><p style="margin-left: 0px;">我现在很坦诚很自信地说，在我自己实际使用了一段时间后，我相信 Siphon 真的有效，真的有用。她能做到有效，背后有几个原因：</p><h4 style="margin-left: 0px;"><strong>3.1 除了积累生词，也会积累使用场景</strong></h4><p style="margin-left: 0px;">如果要想真的理解一个单词，光记住单词其实还不够，我们还需要记住它的使用场景，知道别人怎么用这个单词我们才会知道如何用，这就是学习中很重要的“模仿”。为此 Siphon 在记录生词的同时，也会记录生词所在的句子和来源，这样你在复习生词的时候，可以同时复习它的用法。并且，因为这段文本你之前看过，再次阅读明显能加强你对生词的记忆，同时还能强化你对相关文本内容的理解，一举两得。以下是演示：</p> <p>&nbsp;</p><h4 style="margin-left: 0px;"><strong>3.2 工具只是一部分，另一部分是习惯</strong></h4><p style="margin-left: 0px;">这似乎超出了工具的功能范围，我们知道习惯的培养非常重要，但养成好习惯并不是一件容易的事，养成好习惯需要一些小技巧，其中有一些技巧，比如：</p><ul><li>让要做的事变得可见和唾手可得；</li><li>让要做的事变得简单愉悦有吸引力；</li></ul><p style="margin-left: 0px;">这些技巧在 Siphon 产品的功能和形态设计上都有一些考量，我希望尽可能帮助用户培养记录和复习生词的习惯。关于“简单愉悦”前面已经有论述，而“让要做的事变得可见和唾手可得”，我主要做了两件事：</p><ol><li>基于 Tauri 开发了 Siphon 的桌面端，方便用户一键开启复习；</li><li>开发了 Siphon 微信小程序，可以随时随地复习生词；</li></ol><p style="margin-left: 0px;">桌面端展示：</p><figure class="image ss-img-wrapper"><img alt="桌面端" src="https://cdn.sspai.com/2024/04/06/article/d6840a766347bab6fd2ae23f865dec0b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>桌面端展示</figcaption></figure><p style="margin-left: 0px;">小程序展示：</p><figure class="image ss-img-wrapper image_resized" style="width: 430px;"><img src="https://cdn.sspai.com/2024/04/06/article/1fa091a3e5c243b543a2a6f18212eb89.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>小程序展示</figcaption></figure><p style="margin-left: 0px;">因为可见和唾手可得，又因为记录很简单，复习很愉悦，养成随手记录阅读中的生词以及每天花 5-10 分钟时间复习生词的习惯真的变得非常简单，我可以，你肯定也可以。</p><p style="margin-left: 0px;">值得一提的是，《掌控习惯》这本书把“习惯”这件事说得非常清楚明白，十分推荐。让我们一起通过养成好习惯来让自己变成自己想要的样子。</p><h4 style="margin-left: 0px;"><strong>3.3 Measure What Matters</strong></h4><p style="margin-left: 0px;">OKR 的核心思想是 “Measure What Matters”。在积累单词这件事上也不例外，我们需要有量化和统计。所以，通过 Siphon 记录的所有的单词都会有痕迹，你可以看到自己一年记录生词的轨迹，以及每一天究竟记录了多少生词，记录了哪些生词：</p><figure class="image ss-img-wrapper"><img alt="单词统计" src="https://cdn.sspai.com/2024/04/06/article/ee59749184d1865d4487ee126081a707.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">另外，所有的复习也都有记录，你可以看到你复习的轨迹，以及究竟复习了多少次，复习了多少单词：</p><figure class="image ss-img-wrapper"><img alt="复习统计" src="https://cdn.sspai.com/2024/04/06/article/aa934ca2bc9630c2a779e3d808047c14.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">这些量化的数据可以给你反馈，让你知道自己究竟走了多久多远，究竟记录和掌握了多少单词。</p><h2 style="margin-left: 0px;"><strong>最后的话</strong></h2><p style="margin-left: 0px;">积累词汇也好，学习英语也罢，最终的目的是为了成为更好的自己。英语和阅读都是一个人最基础的“元能力”，这些“元能力”越强，自己也就能走得更远，探得更深，也更有可能走出一个充满收获和有意义的人生。我希望 Siphon 能帮助很多人更顺畅地从英文世界中获得许多有价值的信息和知识，希望 Siphon 能为很多人把这扇语言之窗推得更大一些。真心期待“很多人”中也有你！如果你对 Siphon 感兴趣，欢迎<a href="https://siphon.ink/downloads" target="_blank"><u>下载使用</u></a>，官网地址：<a href="https://siphon.ink/" target="_blank"><u>https://siphon.ink</u></a>。</p><p style="margin-left: 0px;">如果你对我有兴趣，想认识我，可以加我微信，我的微信号：<code>xc_siphon</code> 。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87839</id>
            <title>为你的钱包节流，本地部署 LLM code assistant</title>
            <link>https://sspai.com/post/87839</link>
            <guid isPermaLink="false">https://sspai.com/post/87839</guid>
            <pubDate></pubDate>
            <updated>Sun, 07 Apr 2024 01:27:18 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: LLM, 微调, 语境, 量化
<br>
<br>
总结: 本文记录了一个小白如何在本地部署LLM并在编写代码的工作流中应用，介绍了LLM的基本概念，微调的重要性，语境的作用以及量化技术的应用。 </div>
                        <hr>
                    
                    <h2>前言</h2><p>LLM 当前可以说渗透到了工作、生活中的方方面面，但是我一直都只用过在线提供的 LLM，钱包实在负荷不住了（说的就是你 Copilot），本文主要记录了一个纯小白如何摸索本地部署 LLM 并在编写代码的工作流中进行应用。</p><blockquote><p>⚠️ 注意：本身纯小白一枚，主业是嵌入式开发和 AI 完全不搭边😂，如果文章有错误或者更好的实践请指教谢谢～</p></blockquote><p>硬件环境，以下是我尝试比较「可用」模型尺寸与环境：<br />- 3B 模型：Ubuntu22.04 + GTX 1060 6G<br />- 13B 模型：Macos + M1 Max 32G</p><h2>基本概念</h2><p>文章编排其实与我实际摸索顺序是有区别的，我一向习惯是不求甚解先玩起来再说，而本节主要介绍一些在使用大模型过程中会遇到的特别概念，感觉太枯燥了可以跳过，后边遇到了回来再看也行。</p><h3>LLM</h3><p>大语言模型（英文：Large Language Model，缩写 LLM）是当前 AI 实际的“大脑🧠”。我们可以在本地运行并使用的模型主要是 <a href="https://llama.meta.com/llama2/">Llama 2 (meta.com)</a>，其由 Meta 提供其是 Llama 的继任者，其他在网上可以看到的绝大多数模型都是基于 Llama v1/2 的 “微调”（<strong>Fine-Tune</strong>）或修改版本。</p><p>而由 <a href="https://mistral.ai/">Mistral AI | Frontier AI in your hands</a> 发布的 Mistral 则是新晋的挑战者，当前在非代码微调领域也在快速发展，后续肯定能看到很多衍生版本。</p><h3>Fine-Tune 微调</h3><p>微调的目的是通过给模型增加更多某个领域数据使得其在某些事上做的更好，可以是对话、翻译、数学等等领域，有时看到很多不同名称的模型很多都是「微调」出来的版本，例如由 Meta 提供的 <a href="https://github.com/Meta-Llama/codellama">codellamaa models (github.com)</a> 就是基于 Llama 2 微调的编码助手模型。</p><h3>Context 语境</h3><p>Context 我们可以理解为语境或者是上下文，由于 LLM 是无状态保留的它不会记得历史对话，因此你需要将历史对话都要输入给它才能使其理解并给出正确的回复。例如你在对话开始给 LLM 设定了一个角色「你是一个全栈工程师尤其对于 C++ 精通」，在后续对话中需要你讲这个角色信息都要发送给 LLM，否则它会忘记自己的角色。</p><h3>LLMs Size</h3><p>模型有大小之分，通常会看到最多的数字是 3B、7B、13B、20B、30B、33B、34B、65B、70B。「B」表示 <strong>billions of parameters</strong> 即十亿参数单位，通常认为参数越多模型的效果则会越好，例如 ChatGPT4 则宣称有 100 万亿。如下图 Llama2 提供了 7B、13B、70B 尺寸的模型：</p><figure class="image ss-img-wrapper"><img alt="Pasted image 20240405181707.png" src="https://cdn.sspai.com/2024/04/06/article/4070084f543ae410786d28cac66099d8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>Quantized 量化</h3><p>以全尺寸模型是每个参数占用 2 个字节为例，这意味着 3B 模型的实际大小是 6GB。这对于我们本地部署来说负担太大了，你需要足够的显存或者内存来运行模型，以我的搭载 GTX1060 旧笔记本来说想要跑起来 3B 模型都很困难，并且由于参数量过小实际模型效果也很差。</p><p>这时「量化」则可以帮助我们获取「压缩」版本的模型，一般量化模型有 q2、q3、q4、q5、q6 和 q8。数字越小同样可以简单理解模型「越笨」，但是好处也是显而易见的 34B 模型经过 q3 量化只有 17GB！这与 68GB 的全尺寸相差甚远。</p><p>至于量化的原理有很多专业的文章讲解，简单来说一个模型的权重数据本来需要使用 float32 表示，量化后只需要使用 int8 来表示，仅仅这一个操作，本来需要 4 字节的权重数据缩小到 1 个字节。</p><blockquote><p>经验法则：一般来说，运行一个大模型的小 q 比运行一个小模型的大 q 更好。总的来说，34B q3 将比 13B q8 更聪明、更好。</p></blockquote><figure class="image ss-img-wrapper"><img alt="Pasted image 20240405200211.png" src="https://cdn.sspai.com/2024/04/06/article/eadfb09a661706b80da606e7b70f78ce.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>"K" Quantized</h3><p>此外，除了量化 「q」，你可能还会看到 「K_M」或 「K_S」。这些是 K 量化，S 代表“小”，M 代表“中”，L 代表“大”。</p><p>所以 q4_K_S 小于 q4_K_L，两者都小于 q6。</p><h3>LLM 文件格式</h3><p>当前 LLM 模型文件主要有以下几种格式：</p><ol><li>GGML（Georgi Gerganov Machine Learning）：由 Georgi Gerganov 开发的一个张量库，为大型语言模型提供了基础设施，GGML 本身是一个 C 写的库，用<strong>它转换的大模型文件结果就是 GGML 格式的大模型文件</strong>，通常是原有的模型名 +GGML。它的目标是让大模型在消费级硬件上产生高性能的工具，其支持在 CPU/GPU 上运行。</li><li>GGUF（GPT-Generated Unified Format）：在 2023 年 8 月份，Georgi Gerganov 推出了 GGUF 作为 GGML 后续的替代者，用以作为 llama.cpp 的主要文件格式。GGUF 在二进制格式、数据结构、内存映射兼容性、数据压缩、索引与访问等方面均有优化，其同样支持在 CPU/GPU 上运行。</li><li>GPTQ（Gradient-based Progressive Tensor Quantization）：一种动态量化方法，它通过在训练过程中逐渐增加量化的严格程度来实现量化。与传统的静态量化方法不同，GPTQ 允许模型在量化过程中调整其权重，以最小化量化带来的性能损失。当前只能在 GPU 上运行，速度很快，可以使用 AutoGPTQ 或 ExLlama 运行。</li><li>EXL2（exllamav2）：用于在现代消费级 GPU 上本地运行 LLM 的快速推理库，其速度更快但是只能在 GPU 上运行。</li></ol><p>以当前基础设施支持情况来看，GGUF 是最推荐使用的模型格式。</p><h2>部署工具</h2><p>前文我们已经了解了一些模型文件的基础知识，但是光有一个模型文件是没有用的，想要实际使用需要一个可以部署大模型的推理工具，本文主要以 GGUF 格式为主，因此这里介绍的更多是方便使用的部署工具，推理框架其大多基于 llama.cpp：</p><h3>llama.cpp</h3><p><a href="https://github.com/ggerganov/llama.cpp">ggerganov/llama.cpp: LLM inference in C/C++ (github.com)</a></p><p>可以在消费级硬件上部署模型所使用的推理框架 llama.cpp 是绕不过的，前文介绍大模型格式时也提过，作为当前大模型「基础设施」之一，其被很多工具使用作为推理框架。</p><p>llama.cpp 的特点在于其使用 C/C++ 重写了推理代码，既避免了 PyTorch 引入的复杂依赖，又提供了更为广泛的硬件支持，包括纯 CPU 推理、Apple Silicon 在内的各类底层计算架构都得以充分发挥对应的推理加速，并且由于当前很多模型均基于 Llama 架构因此其支持的模型非常多。</p><p>当然你也可以直接使用 llama.cpp 进行模型格式转换与推理使用，使用步骤太繁琐了可以参考其 github 主页教程。</p><h3>ollama</h3><p><a href="https://github.com/ollama/ollama">ollama/ollama: Get up and running with Llama 2, Mistral, Gemma, and other large language models. (github.com)</a></p><p>ollama 作为一个开源大语言模型服务工具，提供了模型下载、管理、推理一体化的功能，并且其可以作为服务端提供 API 供其他程序调用，当前有着非常繁荣的生态。</p><p>如下为 Ubuntu22.04 环境安装并运行模型：</p><ol><li>执行命令安装：<code>curl -fsSL https://ollama.com/install.sh | sh</code></li><li>安装模型，<a href="https://ollama.com/library">支持的模型</a>：<code>ollama run starcoder:3b</code></li><li>查看服务端运行状态，可以看到日志信息：<code>systemctl status ollama.service</code></li><li>默认其监听端口：<code>127.0.0.1:11434</code></li><li>测试 API 运行情况：<code>curl http://127.0.0.1:11434</code></li></ol><p>调整 ollama 监听端口，并开放监听局域网内请求：</p><ol><li>修改 ollama.service：<code>sudo vim /etc/systemd/system/ollama.service</code></li></ol><pre class="language-text"><code>Environment="OLLAMA_HOST=0.0.0.0:8080"
Environment="OLLAMA_ORIGINS='*'"</code></pre><ol><li>重启 ollama.server: <code>sudo systemctl daemon-reload;sudo systemctl restart ollama.service</code></li><li>测试 API 运行情况：<code>curl http://127.0.0.1:11434</code></li><li>为 ollama 客户端增加环境变量：<code>export OLLAMA_HOST=0.0.0.0:8080</code></li></ol><p>运行效果如下，可以看出基本代码是可以给出，但是 3B 模型对话来说效果就很差了：</p><figure class="image ss-img-wrapper"><img alt="Pasted image 20240406103755.png" src="https://cdn.sspai.com/2024/04/06/article/3f259530c9bee4a10901ba683149f176.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>ollama 基本使用也都是在终端中进行，但是得益于其提供 API 与繁荣的生态，当前有很多 WEB UI 类工具可供使用，具体安装方法这里就不再展开：<br /><a href="https://github.com/open-webui/open-webui">open-webui/open-webui: User-friendly WebUI for LLMs (Formerly Ollama WebUI) (github.com)</a><br /><a href="https://github.com/ollama-interface/Ollama-Gui">ollama-interface/Ollama-Gui: A GUI interface for Ollama (github.com)</a></p><h3>LM Studio</h3><p><a href="https://lmstudio.ai/?ref=aitoolnet.com">LM Studio - Discover, download, and run local LLMs</a></p><p>ollama 很不错但是对于普通用户来说使用起来还是太麻烦，而 LM Studio 工具是一个自带 UI，开箱即用的工具，<strong>但是注意其并不开源，当前免费使用</strong>。</p><p>LM Studio 支持查找模型、下载、管理、推理运行一体的工具，不仅仅支持 Chat，还提供多模型会话以及 <a href="https://lmstudio.ai/docs/local-server">Local LLM Server</a>，主要支持的模型格式同样为 GGUF：</p><figure class="image ss-img-wrapper"><img alt="Pasted image 20240406104827.png" src="https://cdn.sspai.com/2024/04/06/article/79e621d595db0f3ed3b92f2853605547.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>工具下载安装都是 UI 界面这里就不详细介绍，非常好上手。</p><h2>代码补全</h2><p>作为程序员在使用大模型不仅仅想要 Chat，更想要在写代码过程中提供自动生成代码功能，类似 github copilot，这一节是介绍如何将本地大模型用在编写代码相关领域：</p><h3>模型选择</h3><p>其实前文都没有介绍过模型选择相关，因为我认为当前本地部署模型没有通杀的，你应该选择 " 尺寸 + 领域（聊天、通用、编码、数学等）" 多尝试选择适合自己的模型。</p><p>到了编写代码领域也是同理，对于代码进行微调过的模型往往要表现的比通用模型要好，例如 codellama 与 llama2 的关系。并且在代码补全时速度也是要考虑的，否则它生成的时间比我们自己写还要久也太鸡肋了。</p><p>因此模型选择上建议，代码 Chat 相关使用特化的模型参数量可以大一些，例如 codellama 7B/13B，保证对话质量，速度慢一些也可以接受。但是代码生成补全上建议 starcode 3B 保证速度（如果性能实在不够还可以选择 deepseek-coder:1.3b-base）。</p><h3>Prompt</h3><p>对于编码领域 Prompt 也是有些特别，尤其是对于代码补全需要支持 FIM（Fill-in-the-middle），这块易用性比较好的是 ollama，很多插件工具都支持 ollama 协议进行代码 chat 与补全。</p><p>至于详细关于 Prompt 相关信息参考如下文章：<br /><a href="https://ollama.com/blog/how-to-prompt-code-llama">How to prompt Code Llama · Ollama Blog</a></p><h3>Vscode</h3><p>虽说我用 Vscode 不多，但是生态好啊，啥插件都有，先介绍下 Vscode 如何使用本地大模型，这里我主要使用的插件是 <code>Continue</code>：</p><figure class="image ss-img-wrapper"><img alt="Pasted image 20240406111828.png" src="https://cdn.sspai.com/2024/04/06/article/573281e2f7735b735f68e94e68da5042.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>他支持 ollama、LM Studio 服务端 API，这里我演示如何 LM Studio 部署 codellama13B，ollama 部署 starcode:3b 分别提供 chat 与 代码补全功能：</p><p>LM Studio 加载 codellama 模型并 Start Server：</p><figure class="image ss-img-wrapper"><img alt="Pasted image 20240406112026.png" src="https://cdn.sspai.com/2024/04/06/article/25bb0248a08835598db989b4317b3d71.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>ollama 则是加载 starcode:3b 模型，详见前文这里就不复述了；</p><p>continue 插件在 vscode 中的设置很少，其主要配置都是在 <code>~/.continue/config.json</code> 配置文件中，主要关注如下配置项，models 中配置 Chat 的模型信息，tabAutocomplete* 中则是代码补全相关配置：</p><pre class="language-json"><code>{
  "models": [
    {
      "model": "AUTODETECT",
      "title": "LM Studio",
      "apiBase": "http://localhost:1234/v1/",
      "completionOptions": {},
      "provider": "lmstudio"
    }
  ],
  "tabAutocompleteModel": {
    "title": "Tab Autocomplete Model",
    "provider": "ollama",
    "model": "starcoder:3b",
    "apiBase": "http://ubuntu.lan:8080"
  },
  "tabAutocompleteOptions": {
    "useCopyBuffer": false,
    "maxPromptTokens": 400,
    "prefixPercentage": 0.5
  },
  "allowAnonymousTelemetry": true
}</code></pre><p>最终效果如下：</p><p>对话：使用 @ 还可以添加某个文件，非常好用😂：<br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="Pasted image 20240406113537.png" src="https://cdn.sspai.com/2024/04/06/article/ed95f4dd3fd7b37046d602a29d2273fd.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>补全：实在不好截图用个插件主页的例图，个人使用效果差不多：<br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="Pasted image 20240406113838.png" src="https://cdn.sspai.com/2024/04/06/article/306a2e0e0b0bd69239a316837c5cac42.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>其他：还支持选择代码进行描述修改，例如增加个注释等等：<br />&nbsp;</p><figure class="image ss-img-wrapper"><img alt="Pasted image 20240406114022.png" src="https://cdn.sspai.com/2024/04/06/article/cc80d2104691ba4a4a6fe2c886b7676b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>Neovim</h3><p>作为 nvimer 主要工作流都是使用 Neovim，这里介绍下可以使用本地大模型进行代码 Chat 与补全的插件：</p><figure class="image ss-img-wrapper"><img alt="Pasted image 20240406114449.png" src="https://cdn.sspai.com/2024/04/06/article/f8b40cf167172284dac36d0454c76e40.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><a href="https://github.com/jackMort/ChatGPT.nvim">jackMort/ChatGPT.nvim (github.com)</a>：看名字就知道主要使用 ChatGPT 的插件，但是很巧我们 LM Studio 提供的同样是 openai 格式的 API 可以直接接入，配置如下：</p><pre class="language-lua"><code>tool["jackMort/ChatGPT.nvim"] = {
    event = "BufReadPost",
    lazy = true,
    config = function()
        require("chatgpt").setup({
            api_host_cmd = "echo http://localhost:1234",  -- 主要是这里配置为 LM Studio
            api_key_cmd = "echo 'lm-studio'",
            edit_with_instructions = {
                diff = false,
                keymaps = {
                    close = "&lt;C-q&gt;",
                    accept = "&lt;C-y&gt;",
                    toggle_diff = "&lt;C-d&gt;",
                    toggle_settings = "&lt;C-o&gt;",
                    toggle_help = "&lt;C-h&gt;",
                    cycle_windows = "&lt;Tab&gt;",
                    use_output_as_input = "&lt;C-i&gt;",
                },
            },
            chat = {
                keymaps = {
                    close = "&lt;C-q&gt;",
                },
            },
        })
    end,
    dependencies = {
        "MunifTanjim/nui.nvim",
        "nvim-lua/plenary.nvim",
        "folke/trouble.nvim",
        "nvim-telescope/telescope.nvim",
    },
}</code></pre><ul><li>使用效果：<br />&nbsp;</li></ul><figure class="image ss-img-wrapper"><img alt="Pasted image 20240406115137.png" src="https://cdn.sspai.com/2024/04/06/article/1ac82b5cce9c197ccb7f8a29befc7671.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p><a href="https://github.com/huggingface/llm.nvim">huggingface/llm.nvim (github.com)</a>：由 huggingface 提供的插件，专注于代码补全，配置如下（注意你要知道使用的模型 fim 该如何配置，否则效果会非常差）：</p><pre class="language-lua"><code>    tool["huggingface/llm.nvim"] = {
    event = "BufReadPost",
    lazy = true,
    config = function()
        local llm = require("llm")
        llm.setup({
            api_token = nil, -- cf Install paragraph
            model = "starcoder:3b", -- the model ID, behavior depends on backend
            backend = "ollama", -- backend ID, "huggingface" | "ollama" | "openai" | "tgi"
            url = "http://ubuntu.lan:8080/api/generate", -- the http url of the backend
            tokens_to_clear = { "&lt;|endoftext|&gt;" }, -- tokens to remove from the model's output
            request_body = {
                parameters = {
                    max_new_tokens = 60,
                    temperature = 0.2,
                    top_p = 0.95,
                },
            },
            -- set this if the model supports fill in the middle
            fim = {
                enabled = true,
                prefix = "&lt;fim_prefix&gt;",
                middle = "&lt;fim_middle&gt;",
                suffix = "&lt;fim_suffix&gt;",
            },
            debounce_ms = 150,
            accept_keymap = "&lt;C-l&gt;",
            dismiss_keymap = "&lt;C-\\&gt;",
            tls_skip_verify_insecure = false,
            -- llm-ls configuration, cf llm-ls section
            lsp = {
                bin_path = nil,
                host = nil,
                port = nil,
                version = "0.5.2",
            },
            tokenizer = nil, -- cf Tokenizer paragraph
            context_window = 8192, -- max number of tokens for the context window
            enable_suggestions_on_startup = true,
            enable_suggestions_on_files = "*", 
        })
    end,
}
</code></pre><h2>总结</h2><p>这篇文章主要是记录了最近几天假期再折腾如何学习大模型本地部署，并如何在常用的工具中使用。</p><p>作为非专业人士，感觉能够部署使用也就差不多了，更多还是要考虑如何利用好 LLM 提升工作流，后续会继续探索如何利用 LLM 更快、更好的执行 TDD，感兴趣的同学留言交流哦～</p><h2>相关资料</h2><p><a href="https://sspai.com/post/79443">AI 时代，重识羊驼 - 少数派 (sspai.com)</a><br /><a href="https://sspai.com/post/85193#!">用 Ollama 轻松玩转本地大模型 - 少数派 (sspai.com)</a><br /><a href="https://www.datalearner.com/llm-blogs/deep-dive-into-large-model-quantization-technique-gptq#:~:text=%E6%9C%AC%E6%96%87%E5%B0%86%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%B8%80%E7%A7%8D%E5%85%88%E8%BF%9B%E7%9A%84%E9%87%8F%E5%8C%96%E6%8A%80%E6%9C%AF%E2%80%94%E2%80%94GPTQ%EF%BC%88Gradient-based%20Progressive,Tensor%20Quantization%EF%BC%89%EF%BC%8C%E5%AE%83%E8%83%BD%E5%A4%9F%E5%9C%A8%E4%BF%9D%E6%8C%81%E6%A8%A1%E5%9E%8B%E6%80%A7%E8%83%BD%E7%9A%84%E5%90%8C%E6%97%B6%EF%BC%8C%E6%98%BE%E8%91%97%E5%87%8F%E5%B0%91%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%AD%98%E5%82%A8%E5%92%8C%E8%AE%A1%E7%AE%97%E9%9C%80%E6%B1%82%E3%80%82">深入浅出：大模型量化技术GPTQ详解 | 数据学习者官方网站(Datalearner)</a><br /><a href="https://www.datalearner.com/blog/1051705718835586">GGUF格式的大模型文件是什么意思？gguf是什么格式？如何使用？为什么有GGUF格式的大模型文件？GGUF大模型文件与GGML的差异是啥？ | 数据学习者官方网站(Datalearner)</a><br /><a href="https://www.datalearner.com/blog/1051705715975975">大模型领域的GGML是什么？GGML格式的大模型文件与原有文件有什么不同？它是谁提出的？如何使用？ | 数据学习者官方网站(Datalearner)</a><br /><a href="https://www.reddit.com/r/LocalLLaMA/comments/16y95hk/a_starter_guide_for_playing_with_your_own_local_ai/">(2) A Starter Guide for Playing with Your Own Local AI! : LocalLLaMA (reddit.com)</a></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87809</id>
            <title>这才是真的自动记账，颠覆式记账完整教程</title>
            <link>https://sspai.com/post/87809</link>
            <guid isPermaLink="false">https://sspai.com/post/87809</guid>
            <pubDate></pubDate>
            <updated>Sun, 07 Apr 2024 01:17:39 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 自动记账, 快捷指令, 短信监听, 多维表格
<br>
<br>
总结: 通过iPhone快捷指令实现自动记账，利用短信监听匹配内容，将信息记入多维表格，实现100%自动化记账。 </div>
                        <hr>
                    
                    <figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/article/33bf0618fbbee6c81ca21fbebc7596df.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>这才是真的自动记账，颠覆式记账完整教程。终于写出来了。绝不鸽。</p><p>我分享的不仅是思路，更是一种原理。这种思路也能应用到生活中的其他场景。</p><p>前情提要：</p><p>前段时间分享了iPhone快捷指令记账，特别受欢迎，已经<strong>2000</strong>多人在使用了。确实好用，好评如潮，速度快、无广告，敲击手机背面两下实现快捷记账。</p><p>利用多维表格的能力，还能实现记账可视化，通过图表分析自己支出、收入的情况。</p><p>手机端效果如下。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/article/422f1f0ee02b50e39cd29c0a51290672.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>电脑端效果：</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/article/a8466f9018f3e07a34ce76298402436e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>但在使用的过程中，我又突然来了一个新灵感。</p><p>能不能通过监听短信，自动匹配短信中的内容，实现100%自动记账，都不用敲击手机就能完成记账。</p><p>研究了好一会儿，我还真实现了。</p><p>比如收到腾讯打钱的一条短信，iPhone自动化自动触发快捷指令，匹配金额、分类和备注。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/article/c8eaf9a0ac192de2cb557fa23625e7b5.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>然后直接记账到记账多维表格。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/article/4a5605c592cf2f6e97ecde236827639d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>这应该是自动化程度最高的记账工具了。实现了100%自动记账。不过缺点就是依赖于短信通知，必须有短信通知才能触发自动化。</p><p>跟着教程一步步走，都能实现。</p><p>先说下原理</p><p>原理：</p><p>1、iPhone快捷指令有一个自动化功能，可以一直监听自己手机收到的短信。</p><p>2、设置短信过滤条件，如果短信中有字符 . ，就执行快捷指令。</p><p>3、通过正则匹配，获取到短信中的金额，还有谁发的短信。</p><p>4、根据谁的短信，在字典中映射出记账备注。比如我匹配到了「财付通支付科技有限公司」，这条记录就会映射成为：收入 281.71元，备注：腾讯结算</p><p>5、把金额、备注通过飞书机器人助手记账到多维表格。</p><p>教程：</p><p>打开iPhone快捷指令App，进入自动化创建页面。</p><p>1、点击➕号图标，创建一个新的自动化</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/article/a1378dc8e14ae0dfa447a1fa83e254ce.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>2、选择「信息」自动化。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/article/2b65a6a8b1653a7f496037ba23709020.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>然后信息包含 . 时，触发自动化操作，选择立即运行。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/article/066dfdd36236bda1e22b6b327976a1d6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>3、新建空白自动化，实现具体的记账操作</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/article/6456a3ded7c712795aa432ee4961412f.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>4、</p><p>（1）词典，用于配置发信人关键词和记账备注的映射关系。</p><p>比如：「财付通支付科技有限公司」映射的就是「腾讯结算」</p><p>（2）文本，文本中的关键词才能生效。多个关键词用 ｜ 分割</p><p>比如：工资|周口|公积金|财付通支付科技</p><p>（3）设定变量，将短信内容添加到变量message</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/article/98b3f33853b8e569bbf3a345d92d9e3f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>5、</p><p>匹配message中的金额，添加到变量 monneyold 。（这里可能匹配到多个金额，后边会做处理）</p><p>匹配message中的发信人关键词，添加到变量 class</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/article/5d5f6ca5464389667102c0f68e69433c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>6、通过发信人关键词class，映射出记账备注 remark</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/article/e6e13b5626ce4062fd87ce520005bcc8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>7、计算moneyold的数量，如果有多个金额，只取其中一个，把最终金额添加到变量 money</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/article/01df285885543f9fe2356436df0eb069.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>8、如果成功匹配到了记账备注 remark，就记账到飞书多维表格</p><p>（1）文本，存放自己的飞书机器人webhook地址。如何获取webhook地址，往期记账教程有，就不重复赘述。</p><p>（2）获取url内容，把金额、分类、备注同步到多维表格</p><p>（3）显示提醒，在手机上也提醒一遍记账记录。确保记账成功。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/article/ac74b46df9439cba324d4b45f07550de.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>至此，教程完结。快去实践一下吧。</p><p>如需小组交流，可加cloudspeakpro。</p><p>写这种教程巨累无比，要个一键三连不过份吧。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87822</id>
            <title>带壳截图神器NiceShots重磅更新🎉</title>
            <link>https://sspai.com/post/87822</link>
            <guid isPermaLink="false">https://sspai.com/post/87822</guid>
            <pubDate></pubDate>
            <updated>Thu, 04 Apr 2024 14:29:37 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 优化更新, 设计简洁, 高效功能, 用户体验
<br>
<br>
总结: 本文介绍了NiceShots新版本的优化更新内容，包括增加iPhone 15系列、保存为模板功能、混合颜色背景图片等，设计原则简洁高效，旨在提升用户体验。通过简化操作流程、隐藏不必要功能、优化背景设置等方式，不断改进NiceShots App，提升整体体验。 </div>
                        <hr>
                    
                    <h3 style="margin-left: 0px;"><strong>虽迟但到！🥳</strong></h3><p style="margin-left: 0px;">其实NiceShots的这个新版本已经打磨很久了。从年前一直都在考虑新版本需要优化更新的地方，还有一些朋友也给NiceShots提出了非常好的一些建议。因为我是个人开发，没有设计师，所以很多交互和样式都是我一个人独立完成。在计划每一项更新的时候，我会参考致敬一些觉得在设计上比较优秀的设计和交互方式。然后做个半成品给媳妇看一下，说一下我这么做的想法，让他提提意见。然后我自己再多次实际用一下，真实的感受感受。</p><p style="margin-left: 0px;">其实原则只有一个：<strong>简洁、高效</strong>。简洁，就是设计上面看着清爽，毕竟NiceShots只是一个工具类的APP，解决<strong>带壳截屏</strong>这个具体问题的，一些不相干的任何东西都尽量去掉。</p><p style="margin-left: 0px;">高效，就是需要哪个功能，只需要直达那个功能即可，能少点击一次就少点击一次。这一点在这次更新的内容上面也有体现。</p><h3 style="margin-left: 0px;"><strong>更新内容：</strong></h3><p style="margin-left: 0px;">⭐️ 首先第一个的更新内容，就是增加了iPhone 15系列！这个确实是很多朋友提出意见了，因为在一些情况下iPhone 15 Pro的顶部灵动岛和原来NiceShots里带的手机壳会有些错位。</p><p style="margin-left: 0px;">这次我依然使用从底部弹窗的方式进行展示所有模型，并且把手机壳的颜色使用彩色圆点的方式展示，这样更加直观。之前的是放大的手机壳+文字描述的方式。现在使用的依然是这种把机型和颜色一体显示的方式。</p><p style="margin-left: 0px;">参考了别的应用，操作流程是：1点击弹出机型列表 &gt; 2选择机型 &gt; 3选择手机壳的颜色。，换个手机模型需要点击三次。我这个方式就相当于简化了一步，从弹出的列表里直接选择手机壳颜色即可。所以这个更新内容是为了【高效】</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/8e07845f6b61f9afe856bba939776415.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: center;">&nbsp;</p><p style="margin-left: 0px;">在首页的地方还有一点变化，不知道大家留意了没。就是原来有个“圆角” ，那个功能只有在选择卡片、手机卡片的模式下才有用到。所以这次我默认把它隐藏掉了，只有在选择“卡片或手机卡片”的时候才会显示。这样整体上面的预览图片窗口就会有更大的空间，首页看起来也简洁一些。</p><p style="margin-left: 0px;">⭐️ 第二个增加的内容就是“保存为模板“ 的功能。尽管上线才一天，我自己就已经先用上了😏，每次打开就是上次保存用到的模板配置，很方便。不用每次都去选择背景样式和比例了。</p><p style="margin-left: 0px;">这个功能其实也是一个朋友提出来的，他经常发小红书，用的最多的是3:4的图，而且喜欢用某个固定的背景，还有某个指定的设备模型，比如iPhone 15Pro窄边框。但每次打开的时候除了选择图片之外还要把背景、模型、比例都选择一下，还是有点麻烦的。</p><p style="margin-left: 0px;">现在我都有点后悔晚上这个功能了，因为我自己在用的时候发现这个确实好用。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/e156a43e9d1057130db99df99d12bd51.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">⭐️ 第三个就是增加了混合颜色的背景图片，这次我专门找了一些配色比较舒服好看的颜色，用的是一个工具网站：<a href="https://meshgradient.in/">https://meshgradient.in/</a> 做出来的渐变混合背景。</p><p style="margin-left: 0px;">也增加了一些背景图片，都是一些简约的风格，可以更加方便的进行设置背景。当然了，如果你想使用自己的本地图片，或者自定义背景图片也是可以支持的。并且支持背景模糊效果，可以进行手动控制。</p><p style="margin-left: 0px;">另外这次一个小小的优化就是，当你选择了底部的图片的话，再次点击打开的时候，会自动滚动到选择的那一个区域附近。在选择手机型号的时候也是这样，这也是一个小小的细节，省的用手指进行滑动了。还是为了遵循“高效”这个原则。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/b0a46b79e65f82fa30e90c3eb20f020c.JPG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">虽然每一步改进都是很微小的工作，但放这种微小的改善加起来也会让 NiceShots App 的整体体验更好用。这也是我做这个工具最初的心愿，因为最初我就是自己有这个需求，方便自己作图分享用到的。 记得在和朋友聊天的时候，朋友说了一句话我很认可，大概意思是：一个软件的交互、Ui和功能调性，就决定了这个软件能达到怎样的高度。 运营推广很重要，它只是加速了达到这个高度的速度。</p><p style="margin-left: 0px;">最后：NiceShots 还是有很多细节方面需要优化，需要沉下心来观察，体验。</p><p style="margin-left: 0px;">NiceShots: https://apps.apple.com/app/niceshots/id6450619697</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87819</id>
            <title>用Quicker复制6种软件的回链</title>
            <link>https://sspai.com/post/87819</link>
            <guid isPermaLink="false">https://sspai.com/post/87819</guid>
            <pubDate></pubDate>
            <updated>Thu, 04 Apr 2024 11:05:32 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: Quicker, 回链, 软件, 摘录
<br>
<br>
总结: 介绍了使用Quicker实现复制6种软件的回链的方法，包括BookxNote、Zotero、Eagle、PotPlayer、PowerPoint、Xmind，通过自动快捷键获取信息并处理为回链写入剪贴板，提供了制作Quicker动作的思路和调试详情，虽然不是普遍适用的动作，但可以参考实现自定义软件带回链和跳转。 </div>
                        <hr>
                    
                    <p>前6篇文章，我分别介绍了用Quicker实现BookxNote、Zotero、Eagle、PotPlayer、PowerPoint、Xmind的摘录动作。有一些时候，我们希望仅仅复制回链，其他东西比如文字、图片不需要，因此这篇文章介绍一下复制6种软件的回链。</p><p>BookxNote、Zotero、Eagle在安装软件时，会在注册表里注册回链。PotPlayer、PowerPoint、Xmind则需要自己添加注册表，可以看我之前的3篇文章。</p><p>该Quicker动作的原理，就是自动快捷键，获取需要的信息，如文件路径、时间戳等，然后将这些信息处理为回链，并写入剪贴板。</p><p>复制BookxNote回链：</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/5d2a597430c383bc52793b9619bb4a50.gif" /></figure><p>复制Zotero回链：</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/11d7a266ac829dea2463d026c085a63e.gif" /></figure><p>复制Eagle回链：</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/e36db06352d9fbe63be2aaf19e0c0b5e.gif" /></figure><p>复制PotPlayer回链：</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/a30d39eb452bb6ffcc29b69efea32bfd.gif" /></figure><p>复制PowerPoint回链：</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/ffe1f40c3016458c3834a3f3c678ac99.gif" /></figure><p>复制Xmind回链：</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/d7ca20440abbd930170a60208db73d6b.gif" /></figure><p>制作Quicker动作的思路：</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/04/69c2d1857b0be5238a7e1e2284772724.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>其中最下面的关于Xmind的标题看起来很奇怪，这是因为不同软件需要按的快捷键不同，因此需要识别当前是哪个软件，并按相应快捷键。但是当获取Xmind软件的窗口标题时，只能得到xmind文件的名称，因此无法直接判断当前软件时Xmind。只能用排除法，排序是其他软件的可能。</p><p>我将该Quicker动作、不同的摘录情况的调试运行详情放到了<a href="https://github.com/operations4304/Six-BackLink">github仓库</a></p><p><strong>但不幸的是，如果您直接用肯定是没法用的</strong>。因为时间精力有限，没法做成普遍适用的动作。</p><p>所以这里提供的是实现的思路，以及可以参考的某些步骤的动作的写法。</p><p>到这，关于回链，我想介绍的就全部介绍完了。一共7篇文章，前6篇介绍具体软件摘录到Obsidian的思路，第7篇，即本篇，介绍复制6种软件的回链的思路。</p><p>大家完全可以自定义任何软件，使之带回链、可以跳转。</p><p>谢谢观看！</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87817</id>
            <title>何为教育：读《你当像鸟飞往你的山》</title>
            <link>https://sspai.com/post/87817</link>
            <guid isPermaLink="false">https://sspai.com/post/87817</guid>
            <pubDate></pubDate>
            <updated>Thu, 04 Apr 2024 09:44:19 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 教育的意义, 成长与羞耻感, 原生家庭, 关注美的事物

总结: 这本书讲述了一个女孩从没有受过教育的家庭成长到自我觉醒的心灵成长之旅，强调了教育的重要性、成长与羞耻感的挑战、原生家庭对个人发展的影响以及关注美的事物对心理世界的映衬。 </div>
                        <hr>
                    
                    <h2>这本书讲了什么？</h2><p>最近看完了一本脍炙人口的书：《你当像鸟飞往你的山》，讲述了一个关于一个女孩的自我重塑之旅。主角塔拉从完全没有受过教育的家庭里成长，对事物的认知完全扭曲，到不断地学习和自我觉醒；从考上大学到考上剑桥大学。这不是一篇爽文，这是一篇关于作者塔拉的心灵成长之旅的真正体现。</p><hr /><p>以下三个部分可能是我对这个故事最受共鸣的部分。</p><ul><li>教育的意义</li><li>成长与羞耻感</li><li>原生家庭</li></ul><h2>教育的意义</h2><p>书的英文标题就是 Educated（受教育的 adj.），其实本书都贯彻了这一个主题，也就是教育的意义到底是什么。</p><p>首先，一旦话题谈及意义，我们就会对此进行某种解析，解读等手法来体现出我们的思考。可是，如果说我只是因为从自己一个受过良好教育的人的角度去思考所谓的意义话题，我是否因为自己已有的某种已经刻在脑子里的回路而受限。我觉得这是值得反思的。</p><p>书中塔拉的教育之路是非常令人震惊的，从体力劳动者到脑力知识人，这一路上肯定需要付出大量的努力和坚持。</p><p>教育在人类社会之所以重要，我认为关键在于其包含了人类之间的深度连接，也就是知识的传递与思考。因为我们身边的人，也就是教育者，才有教育的存在，我印象最深的就是支持着塔拉上杨百翰大学的一个摩门教主教还有大学里的博士一直不断地支持塔拉成长。</p><p>教育也在于找到自己的能力所在，从而更好的发挥自己所长，创造价值。</p><blockquote><p>先找出你的能力所在，然后在决定你是谁</p></blockquote><p>我相信每一个人都有自己定义自己的能力，因为我们有着塑造自己的能力。但是，前提是我们要知道自己到底擅长什么，每一个人都有着独特的基因和认知回路，这些使我们独特的东西也会反过来影响我们。而教育之路，就是一条发现自己所长的道路。</p><p><strong>教育的关键是培养，不是筛选。</strong>塔拉的教育之路，无疑是成功的，因为这一个故事本身就映射出了教育其本身。或许教育的意义于每一个人都不同，但也正是不同，才锻造出了我们的独立思考，自我反思的能力。我一直在不断地提及这两种能力，因为其实我不相信绝对天赋论，通过训练和努力，我们完全可以掌握任何一项技能，而良好的教育，应该是从心理上让我们认同自己，而不是因为要通过考试而学习。</p><h2>成长与羞耻感</h2><blockquote><p>过去是一个幽灵，虚无缥缈，没什么影响力。只有未来才有分量</p></blockquote><p>成长会使我们收获力量，羞耻之心会不断地让我们质疑力量的存在。其实在整本书中，花费大量的篇幅讲述塔拉的哥哥姐姐们，因为这个家庭充满暴力冲突与扭曲，所以塔拉自然而然的会对此感到自卑。塔拉对自己的家庭和出生感到羞耻，即使是考到了剑桥大学还是觉得自己不是其中的一员。</p><p>其实我们每一个人在成长的路上，多多少少都做过很多蠢事。我承认，因为自己的不成熟和幼稚，我也做过傻事，问题在于，我们是否接纳之前那个愚蠢的自己，接纳之前自己的自卑，从而不断的向往美好未来而不断努力，才是关键。过去的事情已经过去了，如何看向前方，稳住自己的脚步，才是最重要的当下。</p><h2>原生家庭</h2><p>原生家庭是每一个人都挥之不去的一件重要事情。有一句话：有的人的家庭治愈他 / 她一生，有的人花一生时间治愈家庭给他 / 她带来的伤害。原生家庭会影响我们的世界观、人生观还有最重要的爱情。<strong>获得健康的爱可以让我们更加勇敢的成长并完善自我。</strong></p><p>塔拉的家庭绝对的扭曲和极端，偏执狂怒的父亲，懦弱胆小的母亲，还有哥哥肖恩一直虐待她。小塔拉真的很勇敢，与自己的家庭对抗，与自己不堪的过去对抗。最让人触动的还是书中的最后一部分情节，到底是放弃自己的家庭来拥抱全新的自我，还是回到那个虽然扭曲，但终归是自己的家的地方。当塔拉开始颓废，逃避，我看的也非常的心痛，当姐姐奥黛丽开始放弃斗争，我能想象塔拉在此刻有多么的绝望和痛苦，自己生长的家庭无论如何都是自己的源头，放弃自己的过去又谈何容易。</p><blockquote><p>就在这一刻，她意识到抽身离开是多么的轻而易举：用整个家庭来交换一个妹妹是多么差劲的交易。</p></blockquote><p>我难以想象一个正常人生活在这样的家庭里会怎么样。塔拉真的很幸运也很独特，她与生俱来的好奇心驱使她去探索世界与真理。</p><p>当然，书中也有帮助她的哥哥泰勒，可是归根结底，真正治愈我们的只有我们自己。书中最难过的是，到最后，连塔拉也认为一直支持引领塔拉的泰勒也放弃了她。可是，其实泰勒一直也很纠结，泰勒也很想帮助她，支持她，爱她。我们常说：家庭是我们背后的支柱，家庭是我们温柔的港湾，可是如果家庭都变得扭曲，充满操控，虐待，我们又该如何寻找自我。</p><blockquote><p>我们的父母被一连串虐待、操纵和控制所束缚……他们视变化为危险，不管谁要求改变，都会遭到驱逐。这是一种扭曲的家庭忠诚观念……他们称其为信仰，但这不是福音所教导的。保重。我们爱你。</p></blockquote><p>无疑，治愈自己需要勇气，需要经历磨难。而且很多时候，治愈自己真的需要机缘巧合，和福祉。很多时候我们碰上了某一个人，某一本书，然后生活就不是以前的生活了，看世界的角度从此发生了改变。</p><p>每个人肯定都有自己的缺陷，如何发现缺陷，知道缺陷的来源，接受自己的缺陷也是教育的一部分。</p><blockquote><p>泰勒步入了一片虚空。我不知道他为什么怎么做，他也不知道。他无法解释它是如何发出明亮的光。</p></blockquote><h2>关注美的事物</h2><p>通常来说，我们会关注于美的事物，可是我们没有意识到的是，正是我们对与美的热烈追求，映衬出多多彩缤纷的心理世界。</p><p>书里面也有很多句子很美。</p><blockquote><p>秋日的阳光透过薄纱窗帘洒在金盏花瓷砖上，让整个房间发出琥珀色的光芒。</p></blockquote><p>世界不一定充满美，很多时候我们遇到的困难可能永远大于我们的想象，事情也不一定顺利，真正的美是在知道真相后仍然热爱生活。我不一定感谢我遇到的重重困难，但我感谢遇到困难的那些瞬间时勇敢面对的自己。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87794</id>
            <title>用Quicker设置Obsidian到PotPlayer的跳转、回链动作</title>
            <link>https://sspai.com/post/87794</link>
            <guid isPermaLink="false">https://sspai.com/post/87794</guid>
            <pubDate></pubDate>
            <updated>Wed, 03 Apr 2024 08:41:52 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: Quicker, PotPlayer, 回链协议, 视频截图
<br>
<br>
总结: 本文介绍了如何使用Quicker软件完成将PotPlayer视频截图复制到Obsidian文件夹，并制作回链，使得点击Obsidian中的链接能自动打开PotPlayer并跳转到视频的截图时间戳位置。同时，讨论了回链协议在软件安装时的注册情况，以及如何修改PotPlayer路径和设置快捷键来实现这一功能。 </div>
                        <hr>
                    
                    <p>用Quicker可以帮助我们完成一些繁琐的、需要多个操作步骤的动作。</p><p>这篇文章中，我用Quicker将的PotPlayer视频截图复制到到Obsidian文件夹、并制作回链且按照callout格式复制到Obsidian笔记中，使之点击Obsidian中的链接能自动打开PotPlayer，并跳转到视频的截图时间戳位置。</p><p>之前的三篇文章，我介绍了BookxNote、Zotero、Eagle中Quicker完成跳转链接的思路。它们三者的共同点是，在软件安装时，就已经在注册表中注册了相关的回链协议。</p><p>例如当链接为<code>eagle://</code>、<code>eagle://item/LUJ9441DVAFRL</code>，系统能识别并自动打开Eagle软件。前者代表只打开Eagle软件，后者带item参数，能打开Eagle软件同时跳转到对应的图片位置。BookxNote和Zotero同理。</p><p>但是PotPlayer安装时没有注册回链协议。</p><p>前几天，我在刷B站视频时，看到了大佬一鸣惊人_001的视频：<a href="https://www.bilibili.com/video/BV1qH4y1j7Q6/?spm_id_from=333.999.0.0">摘录视频、PDF、PPT到Obsidian和Excalidraw的配置教程 -- 一键摘录内容，点击回链跳回原文_哔哩哔哩_bilibili</a>，里面详细介绍了生成摘录信息、处理摘录信息、响应回链三个部分。由于生成摘录信息和处理摘录信息我用Quicker替代了，因此大家只需要下载响应回链部分就可。这是大佬的github仓库地址<a href="https://github.com/Bowen-0x00/CustomProtocolHandler/releases">GitHub - Bowen-0x00/CustomProtocolHandler: CustomProtocolHandler是一个用于处理自定义协议的工具，旨在实现处理自定义协议链接回链。方便通过笔记软件进行知识管理。如点击自定义协议链接时能够跳回原位，包括但不限于视频、PPT和PDF。</a></p><p>大家下载好后config.conf里修改PotPlayer路径为你自己的安装路径（这里的路径一定是安装版PotPlayer的路径，便携版PotPlayer无法自动启动；但平时可用便携版PotPlayer进行摘录）。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/03/7cfeba0be542729288fda62d5439d022.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>修改路径：</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/03/9381bcbf43742e7bf985f73d8db4dd65.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>然后右键以管理员身份运行“设置注册表.bat”，在电脑的注册表里添加自动以回链协议。在运行前，把这几个文件放在一个固定位置，移动过的话需要重新以管理员身份运行一下（我是小白，也不太清楚，一般不会出问题）。</p><p>PotPlayer的回链：<code>ymjr://open?app=potplayer&amp;file=视频地址&amp;seek=时间戳</code>，点击后就能打开PotPlayer、并且打开视频、并且跳到对应的时间戳，如果上一步响应回链部分配置没问题的话。而且如果<strong>源视频的路径</strong>移动过的话，也是无法打开视频的。</p><p>摘录PotPlayer图片到Obsidian中Markdown的样式：</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/03/82ab1a0497cc7ebc378521267ded8212.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>摘录PotPlayer图片到到Obsidian中Excalidraw的样式：</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/03/2d8633b2966056cf7841621fdba975e5.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>点击Markdown或Excalidraw中的链接能跳转到PotPlayer视频对应时间：</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/03/6a7865a1e1979399ba604d922b924373.gif" /></figure><p>制作Quicker动作前，需要设置复制视频路径的快捷键、复制当前时间戳的快捷键，可自定义，但需要与Quicker动作里相应的步骤一致。截取当前视频图片好像默认是ctrl+c，这个不用设置。</p><p>设置快捷键详情可以看大佬的视频：<a href="https://www.bilibili.com/video/BV1qH4y1j7Q6/?spm_id_from=333.999.0.0">摘录视频、PDF、PPT到Obsidian和Excalidraw的配置教程 -- 一键摘录内容，点击回链跳回原文_哔哩哔哩_bilibili</a></p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/03/512949515da38730676799b218c64bfb.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>制作Quicker动作的思路：</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/03/e1e6abcef0972d966f6dd776fc34032b.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>使用的方法：选中标注的文字或框起来的图片，点击Quicker动作，到Obsidian里点击剪贴位置，然后按ctrl+v就可以了。我平时用Obsidian和Typora编辑文档，因此动作中加了识别Typora窗口的部分。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/03/280f86b102c3f5bc885e1f192696fc02.gif" /></figure><p>我将Quicker动作、不同的摘录情况的调试运行详情放到了<a href="https://github.com/operations4304/PotPlayer-Obsidian">github仓库</a></p><p><strong>但不幸的是，如果您直接用肯定是没法用的</strong>。因为时间精力有限，没法做成普遍适用的动作。</p><p>所以这里提供的是实现的思路，以及可以参考的某些步骤的动作的写法。</p><p>如果你对图片的复制方式不清楚，可以查看这篇文章，<a href="https://zhuanlan.zhihu.com/p/690376509">附件管理方式</a>，介绍了附加的储存情况。</p><p>谢谢观看！</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87755</id>
            <title>如何不编程用 ChatGPT 爬取网站数据？</title>
            <link>https://sspai.com/post/87755</link>
            <guid isPermaLink="false">https://sspai.com/post/87755</guid>
            <pubDate></pubDate>
            <updated>Tue, 02 Apr 2024 07:01:15 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 大胆设想, AI 时代, 数据获取, GPT 应用
<br>
<br>
总结: 在 AI 时代，敢于大胆设想是提出好问题的关键。很多人需要获取数据，而现在可以利用 GPT 应用来简化数据处理过程。 </div>
                        <hr>
                    
                    <p style="margin-left: 0px; text-align: justify;">敢于大胆设想，才能在 AI 时代提出好问题。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/787daf8c87dc51e3c02a006f0f04ad11.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h2 style="text-align: justify;"><strong>需求</strong></h2><p style="margin-left: 0px; text-align: justify;">很多小伙伴，都需要为研究获取数据。从网上爬取数据，是其中关键一环。以往，这都需要编程来实现。</p><p style="margin-left: 0px; text-align: justify;">可最近，一位星友在知识星球提问：</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/684a48fdf03e6764140357ab1728812b.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">这里涉及到一些个人隐私，我就打了码。他的意思很清楚：</p><p style="margin-left: 0px; text-align: justify;">第一，他不想编程；</p><p style="margin-left: 0px; text-align: justify;">第二，他要获取数据。</p><p style="margin-left: 0px; text-align: justify;">在以前，这基本上算是空想。但现在可就不一样了。我觉得敢于设想，是很必要的。<strong>这是个好问题</strong>。</p><p style="margin-left: 0px; text-align: justify;">我之前在知识星球里就为你写过一篇相关的文章，叫做《<a href="https://articles.zsxq.com/id_p7982zsrnpg7.html">如何用 ChatGPT 的 Advanced Data Analysis 帮你采集数据</a>》。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/6fd56aac7b9fce01601bd43ff27f7307.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">ChatGPT 的 Advanced Data Analysis 模式（也叫做 Code Interpreter）可以自动编程并执行程序，曾经是数据分析的不二之选。好在现在我们有了更多选择。那篇文章对应的是一个活动网站的爬取（见下图），感兴趣的朋友 <a href="https://articles.zsxq.com/id_p7982zsrnpg7.html">可以去看看</a>。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/89ec3aa3d5a0990d7fc096e6c164ba55.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">只不过，当时这篇文章里，咱们处理的方式，还少不了跟技术打交道。例如你需要获取一些文本的路径信息。</p><p style="margin-left: 0px; text-align: justify;">时隔数月，我在想，现在是不是有更简单直接的方法来处理数据呢？</p><h2 style="text-align: justify;"><strong>工具</strong></h2><p style="margin-left: 0px; text-align: justify;">我就到 OpenAI 的 GPTs Store 查看一番。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/0cb32f3325d9a20919c7f798d9b05d24.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">这里汇集了许多人创造的各种 GPT 应用。你能想到的很多目标，都可以直接利用别人定制的 GPT 来完成，没必要重复发明轮子。咱们今天直奔主题，搜索 "Scraper"。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/e9c9195766d0571d55f1f6ed69f2ed3d.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">搜索结果中，我选择了排名第一的工具。你可以看到它的对话数量已经超过 1 万次，这是相当厉害的数据了。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/5e0e9aeed3ba19999ef93ce6400cdc57.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">从右上角的数据统计可以看出，Scraper GPT 的评分是 3.9 分，有 430 人参与评分。页面上还列出了一些默认问题，可以帮助你了解它的工作方式。我选择了第一个问题：「我如何从网站获取数据？」</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/2e271c0ecf946bd4cfd8a6989a443c4f.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">根据回答，我们可以利用 Scraper GPT 获取三类不同的数据：文本、链接和图像。只需告诉 Scraper GPT 网站地址就可以抓取内容，非常简单。</p><h2 style="text-align: justify;"><strong>目标</strong></h2><p style="margin-left: 0px; text-align: justify;">我们需要一个目标网站来进行抓取。本文我选择了我所在的天津师范大学管理学院数据科学系的 <a href="https://glxy.tjnu.edu.cn/szdw/sjkxx.htm">师资介绍页面</a>。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/5ab6a87e6ade3063ce5b1b7a09150ce8.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">往下翻，你还能看见我，哈哈。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/9e4c7bcce5a6c107367ae5a3e205f0a8.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">目标网站准备好了，<a href="https://glxy.tjnu.edu.cn/szdw/sjkxx.htm">你把链接拷贝下来</a>，就可以开始尝试了。</p><h2 style="text-align: justify;"><strong>文本</strong></h2><p style="margin-left: 0px; text-align: justify;">把页面网址复制粘贴到Scraper GPT对话框，我首先请求它帮我抓取网页中的<strong>文本</strong>。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/a26f963308b5d917de3998c32614eaf9.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">很快，Scraper GPT 就把页面上所有文本都提取出来了，包括导航栏、页眉页脚等位置的文字，以及页面上每位老师的姓名、职称、联系方式等信息。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/537beb42a28a70ef96d50a0bd2ce3d4f.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">最后 Scraper GPT 还表示，如果需要更进一步的信息，随时可以告诉它。真是服务态度一流。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/32cf9d3a2e548307568e98ce115c42c6.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">怎么样？是不是不用编程，直接搞定文本获取？</p><h2 style="text-align: justify;"><strong>图像</strong></h2><p style="margin-left: 0px; text-align: justify;">接下来咱们来试试获取网页中的全部图像。我把相同的网址发送过去，请求它抓取其中的图像。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/5280f7d070c65e58cb0a7ea1cba41084.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">这次它一共找到了 12 张图片，但在对话界面里<strong>都无法正常显示</strong>。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/9654d4c06bfcc38d89cd1c986c736304.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">起初我觉得很失望，但马上意识到它已经成功获取了图片链接。我把链接复制到了 Visual Studio Code 里面，你可以看看它抓取到的内容。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/ffdde40bb543d8eb791b11317c459aac.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">链接有了，如何正常显示呢？简单，咱们把所有内容复制到 Markdown 编辑器 Typora。你可以看到，所有老师的照片都依次展现出来了，很完美。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/0f11f72f7ecdaeea3d46b7e392712bfe.gif" /></figure><h2 style="text-align: justify;"><strong>链接</strong></h2><p style="margin-left: 0px; text-align: justify;">最后我要求Scraper GPT提取页面中的<strong>所有链接</strong>。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/95030f1ab08d62e611d3bcef118406f4.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">从结果可以看出，Scraper GPT 找到了导航栏、学院简介等页面链接，以及三位老师的个人主页链接。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/38d77e02909f65fd01861a3f2de1b2e0.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">我觉得这个结果并不完整。不过仔细一看 Scraper GPT 自己已经表示，这「只是链接的一部分」。如果我需要某个特定区域的链接，尽管告诉它。</p><p style="margin-left: 0px; text-align: justify;">那我就不客气了，指明它需要给我显示所有「教师」部分的链接。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/15305b01cbf78f6d4a3cd3e254bff7a9.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">于是全系所有 9 个老师的页面链接就都出现了。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/48597f21b0e78fbf714c565091ae214e.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">我把抓取到的链接内容复制到编辑器中，你可以清楚地看到每个链接。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/db2ca56a0a59e436eb34164f62f74848.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">当然了，你一般不会满足于只获得某个网页上的内容，而是希望「顺藤摸瓜」。没问题，链接在手，你可以进一步要求Scraper GPT访问这些链接，<strong>抓取二级页面</strong>的内容。</p><h2 style="text-align: justify;"><strong>深入</strong></h2><p style="margin-left: 0px; text-align: justify;">这里我以 <a href="https://glxy.tjnu.edu.cn/info/1076/2823.htm">翟羽佳老师的个人主页举例</a>。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/11c6a8ae966dc894446d9957018ca6eb.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">进入页面后，你可以看到翟老师的个人介绍、学术成果、研究课题等丰富信息。我用提示词让 Scraper GPT 把页面文本提取出来。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/4844a2af2fe4e8125d457c1485077829.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">Scraper GPT 把翟老师的职称、联系方式、研究领域等内容都抓取到了。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/0e6bbd2ea8f24e9752f714f2d2147094.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">更进一步还抓取了翟老师的教育背景、工作经历、研究生指导等。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/1c93c4b7c6a91fd477fd2b5551ddf6d5.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">在翟老师的个人主页上，这些信息位于默认页面底部。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/a0cc7fcb23dde95953233be53de25f02.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">但对于那些需要点击展开才能看到的内容，比如学术成果、研究课题、讲授课程等，Scraper GPT 则没能捕捉到具体内容。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/9cb2e263719609487c09c7b92573519b.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">我要求 Scraper GPT 抓取学术成果这个部分。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/2b66f1b4d97ba031e1ddc4b6f23edeca.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">结果 Scraper GPT 表示，无可奈何。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/129a55c4f1e63e996b7e20ce23a1098e.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">翻译过来就是：</p><blockquote><p style="margin-left: 0px;">之前提供的内容没有具体说明翟羽佳老师的「学术成果」部分的详细信息。看来这一部分的具体细节没有包含在抓取的文本中。这可能是由于网站内容的布局或动态加载方式造成的，单次抓取可能无法准确捕捉某些特定部分的详细信息。</p></blockquote><blockquote><p style="margin-left: 0px;">&nbsp;</p><p style="margin-left: 0px;">如果您需要这一部分的详细信息，我建议您直接访问该网页。如果还有其他我可以协助您的地方，请告诉我！</p></blockquote><p style="margin-left: 0px; text-align: justify;">我自己手动查找到翟老师学术成果第一条的 xpath 链接。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/6773715a8de294f36dcaa5740b258df7.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">然后我把这个 xpath 地址扔给了 Scraper GPT 。但是它还是告诉我，这些它处理不了。</p><figure class="image ss-img-wrapper"><img alt="" src="https://cdn.sspai.com/2024/04/02/article/3f9796217943a67f5e2fe81b6c730a53.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px; text-align: justify;">翻译过来，就是：</p><blockquote><p style="margin-left: 0px;">我无法直接执行或解释 XPath 查询，也无法像浏览器或支持 JavaScript 的专用网页抓取工具那样与网页进行交互。我的能力集中在处理页面由服务器提供的静态内容中的文本、链接或图像，而不是在客户端脚本运行之前。</p></blockquote><blockquote><p style="margin-left: 0px;">&nbsp;</p><p style="margin-left: 0px;">如果有 JavaScript 生成的内容或信息是动态加载的，我可能无法直接通过简单的抓取访问到它。对于动态加载的内容或需要交互或特定查询 (如 XPath) 的部分，我建议使用专门设计用于动态网页抓取的工具，如 Selenium 或 Puppeteer，它们可以像浏览器一样与网页的 DOM 进行交互。</p></blockquote><blockquote><p style="margin-left: 0px;">&nbsp;</p><p style="margin-left: 0px;">但是，如果您需要的信息可以通过网页的静态 HTML 访问，请随时提供网址并描述您感兴趣的信息，我会尽力帮助您！</p></blockquote><p style="margin-left: 0px; text-align: justify;">这样看来，如果你希望抓取动态网页内容，恐怕目前 Scraper GPT 无能为力，或许你还真的无法摆脱编程的必要步骤。</p><h2 style="text-align: justify;"><strong>小结</strong></h2><p style="margin-left: 0px; text-align: justify;">通过咱们的演示你可以看出，这款名叫 Scraper 的 GPT 工具非常方便好用。文本、图片、链接这些信息类型，Scrapper GPT都可以根据你提供的链接轻松获取。因为有了链接，你还可以进一步抓取二级页面的信息。重要的是，<strong>整个过程完全不需要编程</strong>。</p><p style="margin-left: 0px; text-align: justify;">当然Scraper GPT也有局限性，就是<strong>无法准确处理动态网页的内容</strong>。对于这些高阶操作，你目前可能还是需要借助 Selenium 等工具，通过编程来实现。但是我相信，随着 AI 能力的进一步提升，以及应用集成度的改进，这些强烈的用户需求，应该在不久后就有免费便捷的工具可以满足了。生活在这样一个人工智能快速进展的时代，真的很容易激动啊。</p><p style="margin-left: 0px; text-align: justify;">如果你觉得本文有用,请<strong>充电</strong>。</p><p style="margin-left: 0px; text-align: justify;">如果本文可能对你的朋友有帮助,请<strong>转发</strong>给他们。</p><p style="margin-left: 0px; text-align: justify;">欢迎<strong>关注</strong><a href="https://sspai.com/column/245">我的专栏「科研利器」</a>,以便及时收到后续的更新内容。</p><p style="margin-left: 0px; text-align: justify;"><a href="https://sspai.com/prime/subscription?referral=314606736">点击这个链接加入少数派会员</a>,立享 9 折优惠!获得专属会员内容、会员播客以及会员定制周边。在更多的领域和方向帮你打开脑洞,找到新的兴趣点,与少数派一起洞悉当下,探索新知。</p><span class="ss-paidSection" type="paidsection">&nbsp;</span><p>&nbsp;</p><h2 style="text-align: justify;"><strong>延伸阅读</strong></h2><ul><li style="text-align: justify;"><a href="https://mp.weixin.qq.com/s/nJZkaSb4RQoHGgFsvnpUJQ">如何用 ChatGPT 的 Advanced Data Analysis 帮你采集数据？</a></li><li style="text-align: justify;"><a href="https://mp.weixin.qq.com/s/DrdZ8NAms7i9spjArPWmiw">如何不编程，采集网站评论信息？（视频教程）</a></li><li style="text-align: justify;"><a href="https://mp.weixin.qq.com/s/BjULBfwVPO73Hk4lw1S_mQ">如何用 Python 爬数据？（一）网页抓取</a></li><li style="text-align: justify;"><a href="https://sspai.com/post/79800">如何用 ChatGPT 帮你自动分析数据？</a></li><li style="text-align: justify;"><a href="https://sspai.com/post/80135">如何用 ChatGPT 一句话生成 Web 应用？</a></li></ul>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87648</id>
            <title>为了记录生活大小事，我开发了 MarkTimes</title>
            <link>https://sspai.com/post/87648</link>
            <guid isPermaLink="false">https://sspai.com/post/87648</guid>
            <pubDate></pubDate>
            <updated>Mon, 01 Apr 2024 14:02:43 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 应用, 记录, 自定义, 提醒
<br>
<br>
总结: 本文介绍了开发一款记录生活大小事的应用的初衷和功能，该应用名为MarkTimes，可以帮助用户记录生活中的各种事件和健康问题，具有丰富的自定义功能和提醒功能，同时支持日历时间线和统计图表展示。用户可以通过该应用简单记录小事，也可以使用属性功能记录更丰富的内容，保证数据隐私与安全。 </div>
                        <hr>
                    
                    <h2>为什么想开发一款这样的应用？</h2><p>生活中经常会有一些疑问</p><ul><li>上次我脸部过敏是哪些区域，持续了几天好的？</li><li>上次什么时候洗牙的，有没有快到一年了？</li><li>上次色色有没有做好保护措施？</li><li>上次拉肚子是由于什么样的原因？</li></ul><p>每当我自己回想的时候，这些问题都不太清晰了，脑子里只剩下模糊记忆。</p><p>我尝试使用一些APP进行记录，市面上有很多习惯类APP，特别适合记录习惯和打卡，但是确实记录这些不定时的事情却不太合适。Notion和飞书确实挺适合记录的，拥有足够多的自定义内容，但是又过于臃肿，不适合随时随地想看一看，记一记的需求。</p><p>于是我决定开发一款单独的应用来记录这些事情，足够精简又有一定的自定义功能。</p><h2>MarkTimes ？！</h2><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/29/4cf43163d915a1f30a22c2ec7221f42a.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>在ChatGPT和朋友的帮助下，历经手绘产品搞、设计产品、写代码、测试，我顺利地手搓出了这个记录生活大小事的APP。可以帮记录你这些生活大小事和健康问题，可以轻松记录任何事件，可以丰富自定义，拥有定期提醒和未发生提醒，可以通过时间线和日历来查看记录历史，利用统计中的图表了解事件的趋势。</p><h3>丰富自定义</h3><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/04/01/d43663d7c6b31c0a867630c15c3348f2.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>丰富自定义分组的图标和颜色，事件的图标和颜色。事件详情页颜色也是根据事件的颜色来变化的。事件的顺序也能够在设置中进行变更。</p><h3>事件属性</h3><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/29/be5386f0bdc329779dd36466e26abc89.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>你可以为事件增加属性，自定义自己想要的记录项，目前支持数值类型和单选类型。比如记录奶茶的过程，想要记录每次喝的品牌则可以添加一个品牌的属性，并且添加若干个选项，列如一点点、喜茶。属性还可以选择必填和默认值。相应事件的记录页也会出现这些记录项，在记录这些属性之后，可以在时间线和统计图表中查看到它们。正因为有了属性，真的可以实现记录生活万事万物。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/29/49b9db299739cb59ea3cc5d8551aec07.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>快速打卡</h3><p>打开快速打卡后，可以不进入记录页面就进行打卡，打卡的日期为当前时间。快速打卡打开后，则不显示自定义属性。</p><h3>提醒</h3><p>你可以为每个事件单独增加定期提醒和未发生提醒，他们通需要你打开本地通知。</p><ul><li>定期提醒：可以督促你定期添加事件的记录，目前可以像设置闹钟一样设置周一到周日的某一时间通知。</li><li>未发生提醒：可以设定的一个未发生天数，比如设定洗头为四天，则在你记录后，四天后还没有记录，我们就会提醒你去洗头。</li></ul><h3>日历时间线</h3><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/29/669d0244060e468d0bcf5c678f346c1b.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>每个单独的事件都通过时间轴和日历的方式展示记录，你可以像使用日历一样使用它，可以迅速和清晰明了查看、编辑和删除某一天任意时间段的记录。</p><h3>统计图表</h3><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/29/d8e5093a0bb8096edeac79d95d8412a4.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>每个单独的事件都有独单的数据统计。清晰地在图表中查看你的事件发生的频率如何随时间变化，可以按日、月或年来查看比较和回顾趋势。会根据事件的属性相应自动生成对应的图标。</p><h3>多彩小组件</h3><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/29/6896f337585ed3e21e13b794480c2d63.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>多彩小组件可以自由设置为某个事件，方面你不用进入APP，就能查看该事件的上次发生和日历图。后期会加入更多的小组件方便大家使用。</p><h3>隐私与安全</h3><p>因为涉及到您私人生活的记录，对应数据也特别敏感。你的所有数据只存储于本地，或者其他你主动开启 iCloud 同步服务的设备之中。</p><h2>最后</h2><p>以上就是MarkTimes的所有功能，你可以用来简单的记录小事，也可以使用进阶用法「属性」来完善你事件的记录项，记录更丰富的内容，希望大家能够喜欢。</p><p>为了感谢少数派读者的支持，<strong>将在本文评论中随机选取一位幸运儿，赠送一个 MarkTimes 终生会员兑换码，</strong>有任何想法也可以在评论区说！我们会多优化，让MarkTimes更好用～</p><p>&nbsp;</p><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87694</id>
            <title>我如何管理自己的「数字资产」</title>
            <link>https://sspai.com/post/87694</link>
            <guid isPermaLink="false">https://sspai.com/post/87694</guid>
            <pubDate></pubDate>
            <updated>Sun, 31 Mar 2024 07:54:26 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: Matrix, 内容创作, 数字资产, 信息管理
<br>
<br>
总结: 本文主要讨论了如何管理个人的数字资产，包括信息的获取、管理和分享。作者分享了自己在数字资产管理方面的经验和思考，强调了信息管理的重要性和挑战。文章提到了数字资产管理的难点在于数量庞大，但管理是必不可少的。通过对不同类型信息的管理，可以让生活更为自己所掌握。 </div>
                        <hr>
                    
                    <p style="margin-left: 0px;"><strong>Matrix 首页推荐&nbsp;</strong>&nbsp;</p><p style="margin-left: 0px;"><a href="https://sspai.com/matrix">Matrix</a>&nbsp; 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&nbsp;</p><p style="margin-left: 0px;">文章代表作者个人观点，少数派仅对标题和排版略作修改。</p><hr /><p>本文实际上算做 PIM 领域的内容，但首先笔者并不是从事有关研究的学术人员，其次这个话题的庞大程度也远远不是一篇文章可以说的清的。因此在这里仅仅可以浅显地分享一些个人经验，聊聊我是如何管理自己的「数字资产」的，也就是特别分享我如何管理我的狭义的数字信息而不涉及更广泛的含义。既为自己梳理自己目前的管理思路，也希望通过提供我个人的具体思考和做法，在与大家的交流中得到启发、碰撞出些新观点，能对读者产生些帮助就更好了。希望题目并没有把调定得太高了些。</p><p>另在开始之前想说的是，工具只反映个人偏好，一切信息组织的分享都基于我个人的经验。工具或许与你输出的效率相关，但与你输出的质量不会有非常明显的关联。使用纸笔写作的莎士比亚不也至今都没有人超越吗？选取工具时，也一定要确保它的退出机制是完善的。如果你现在就离开它，不会受到很大的阻力。这能保证当你可因为各种原因弃用当前工具时，不至于产生持续和无可挽回的损失。</p><p>另外本文分享主要基于 Apple 平台，因此部分提及的软件可能不提供全平台支持。但我想管理的思想是互通的。本文中提及的软件与作者无任何利益关系，本文未提及的软件也因为篇幅以及作者并无深度体验，盲目给出意见可能不合适。</p><h2>进行「数字资产」管理 —— 让生活更为自己所掌握</h2><p>我们在数字世界中的信息、我们能够掌控的部分，仅限于本文将要讨论的范围内，总的来说有四类：一是外界对我们产生的信息（例如一场安排在明天上午的会议）、我们向外界提供的信息（例如在社媒上披露的自我信息）和我们从外界获得的信息（我们阅读的文章、获取的知识等等），以及我们自我产生的信息（例如这篇文章）。</p><p>其实有关的方法论已经非常多，但是无论哪种方法论，如果无法应用到自己的工作流中，不能把它具体化，相应地就不会那么好执行。如果不想让自己的数字世界陷入一片盘古开天地前的混沌状态下，我们总需要适当的对自己的「数字资产」进行管理。</p><p>我们在和个人数字终端交互时，如果你不是一名命令行拥趸的话（当然相信我派应该有不少极客），大概率使用的是一套图形界面。因此本文也是从图形界面入手，几乎没有什么涉及命令行的部分。即使是 PKM 领域，无论我们如何组织文件路径、双向链接、标签，其实本质上反映出来我们对信息的一种思考和安排。</p><p>总体上我偏向认为人们没办法真正井井有条地组织和管理与自己有关的信息。因为这类信息实在是太多了，无论从获取、管理还是干涉中的哪一个纬度上，我们都没办法把事情完全掌控在手中。但是完全不进行管理也是不太现实的。</p><p>个人信息管理最大的难点其实是数量。如果现在有一名喜好读书的个体 A，在 A 拥有 300 册纸质书之前，可能他的管理都是比较轻松的。他几乎可以随意放置他的书籍，随后仅仅通过自己的记忆力就找到对应书籍的位置。但当这个数字扩大 100 倍，当 A 拥有 30000 册书之后，他的图书管理就变成了一件非常必要的事情了。假使不对这 30000 册书进行管理，除非拥有超绝的记忆力，他几乎不可能在 30000 册书中迅速找到自己需要的那些。</p><p>而涉及到数字资产上，由于数字资产获取和储存的天然便利性，你的数字资产库可能会相当庞大。只需要简单查看一眼自己的电脑硬盘或移动硬盘、网盘等，我们就能发现不使用的软件安装包、过时的截图、学生时期的课业论文、上个月的业绩报告、结束的恋情证明（误）等等。如果你恰好在某一领域是一名爱好者，那你可能还会拥有巨量的 4K 影视数据、无损音乐文件、高清图片等等。</p><p>在今天的数字生活中，仅仅是从外界获取到的信息一部分规模就已经无比庞大。读者甚至只需要简单查看一下自己关注的公众号数量和这些公众号近三个月以来发送的推文量就能直观地感受到信息的膨胀程度。我们当然可以通过筛选优质信息源来实现信息管理的精简，但是时间一长，信息依然会越积越多。</p><p>所以除非不做管理——只要你希望对内容进行简单梳理，确保它们不只是「过江之鲫」，信息管理就几乎是必须要进行的。</p><p>我们每个人的数字资产和所需要管理的范围是不同的。对于一个喜好电子游戏的个体而言，他可能会希望可以合理地管理他拥有的不同平台上的不同的游戏，自己对游戏的偏好设置，游戏的存档和备份、账号和密码的管理等等。</p><p>总的来看，四类信息中，<strong>我们接收的信息</strong>相对应该是大部分人都需要管理、规模也比较庞大的一类，下文也会相应重点提及这类信息的管理。</p><p><strong>我们向外界提供的信息</strong>则相对没有那么好管理，尽管现在各类互联网平台的个人数据<a href="https://www.gov.cn/xinwen/2021-06/11/content_5616919.htm">处理</a>和<a href="https://www.gov.cn/xinwen/2021-08/20/content_5632486.htm">保护</a>大都有有关法案提供依据，但这类资产的管理难度对普通用户还是有一定挑战，导出也不能说是非常方便。我们这里不对这类信息资产的管理作过多讨论，也可参阅站内的这几篇文章：</p><ul><li>《<a href="https://sspai.com/post/44715">Apple 和 Google 保存了哪些个人数据？现在你可以把它们下载下来看看</a>》</li><li>《<a href="https://sspai.com/post/44706">关于 GDPR 你需要了解的一切</a>》</li><li>《<a href="https://sspai.com/prime/story/apple-data-export">啃了一口的苹果可以打包带走吗？——Apple 数据导出功能观察</a>》</li><li>《<a href="https://sspai.com/post/73809%20https://sspai.com/post/73809">互联网时代下的个人信息保护——与数据合规</a><a href="https://sspai.com/post/73809">律师</a><a href="https://sspai.com/post/73809%20https://sspai.com/post/73809">对谈</a>》</li><li>《<a href="https://sspai.com/post/65277">如何更好地保护手机数据隐私？这 10 款 App 你可能用得上</a>》</li></ul><p>另一类重要的信息是<strong>外界向我们产生的信息</strong>，单这样说起来可能显得有些抽象。落实到具体的情境下，其实就是如一些需要参加的会议安排、协作进程时安排给自己的任务等等。这类信息很容易需要与外界信息管理产生联系，后者我们这里不做过多讨论了，笔者个人的观点还是尽量让工作的归工作、个人的归个人，这与下文我将要提到的分 Profile 来管理内容也算相似的思想。工作需要的一些不过仅仅是个人观点，读者还是要选择适合自己的管理思路和模式。</p><p><strong>个人产生的信息</strong>中，即使你并不是一个创作者，不讨论艺术作品、文章、摄影作品等内容的情景下，你发布的博客、朋友圈内容和记在某些应用内的私人日记也都可以算在内。如果涉及发布的话，笔者以为在这里的一条基本原则还是两者应该分开保存，原始的创作内容和稿件还是尽量要做好整理和安排。在不是创作者的情况下，据我观察，多数人的主要内容还是集中在社媒平台上的，对于这类内容，我认为采取下文说到的库型管理的方式，就把它们放置在应用本身内即可，重点是做好原始文本的备份（作为个人产生的信息而不是向外界提供的信息，同时也减少从大都封闭的社媒中导出的心力）。</p><p>在积累之前，我们的数字资产是从一片混沌中出发的。有的人会完全安排妥当自己的日程、待办事项、笔记和知识系统、文件归档。有些人则完全不做安排，拉好清单就行动。对是否需要管理或调整管理方法，我认为读者在数字生活中如果遇到下面这两个问题，那么就有必要尝试一下了：</p><ol><li>你现在的工作流紊乱不堪，影响到你的正常工作效率乃至情绪状态</li><li>你常常无法合理安排事项并因此带来过多的失误乃至影响生活质量</li></ol><p>如果没有遇到问题，那么其实笔者认为或许你并不是那么需要调整目前的管理方式，尽管我们强调对未来风险的承受能力，但过度杞人忧天亦是一种失位。适合自己的才是最好的，当一套系统在目前能够满足需求时，还是应该先分清楚在当前进行管理方式调整是否影响自己正在专注的领域和项目。</p><p>希望大家的管理都是需求驱动的。</p><h2>PARA 的启示 —— 认识到自己的有限</h2><p>我们先从 PARA 说起。PARA 为 Project、Area、Resource 和 Archive 四个词的缩写，是由 Tiago Frote 提出的一套数字资产组织方法论。</p><figure class="image ss-img-wrapper"><img alt="image" src="https://cdn.sspai.com/2024/03/30/article/35c7692f5be072d6f32ef6fcbb0b726d.tiff?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>PARA 的示意图，来自 Tiago Forte 的<a href="https://fortelabs.com/blog/para/">文章</a></figcaption></figure><p>PARA 的提出者 Tiago Forte 在<a href="https://fortelabs.com/blog/para/">他的文章</a>中提到：</p><blockquote><p>如果你的管理系统和你的人生一样复杂，那可能光是维持它就足以耗尽你用以生活的时间和精力了。</p></blockquote><p>同时他特别强调了「项目」和项目分割的重要性：</p><blockquote><p>无论你的职责有多广泛，你总可以把它们拆解成更小的项目。如果你想知道你是否真的在朝着目标前进，你就必须这么做。</p></blockquote><p>我认为这两句引自 Tiago Forte 的话一方面说明了 PARA 方法的真谛，同时也说明了个人数字资产管理的真谛—— <strong>足够简单和易维护</strong>、<strong>明确专注领域</strong>。</p><p>我们都是有限的人，不是无限的人，过度复杂的系统设计所带来的时间与精力的损失和生活中真正有价值、需要我们专注的部分——陪伴家人、提升自我、享受生活是有冲突的，是得不偿失的。过多的专注领域带来的精力分散也可能导致我们最终无法从事或完成我们真正偏好想去完成的任务。</p><p>因此在数字资产管理方法上笔者的基本观点就是这套系统一定需要足够接近直觉，这个直觉未必是符合所有人的直觉，但一定要符合你本人的直觉，那么它对你来说就是易维护和相对足够简单的；另一点在于一定要明确专注领域，我们需要找到当前希望专注的领域有哪些，然后尽量缩小这个范围，从中选取出目前最被偏好的一到两个无论社会意义还是个人意义都很必要的领域进行专注，这当然不是说应该放弃其他的领域，但是只有明确了所有关注领域中最重要的那部分，我们才能更有效率的做到自我提升或其他目标，以尽量减少不那么偏好的领域的干扰。毕竟世界上鲜少有人能在同一时间学习算法、金融知识、工程水利、乐器演奏和影视制作等相对差异比较大的领域、还在每一项上都取得成功的。</p><p>你应该要把你目前的事情拆分成一个个可执行的目标，具象到文件中其实就是 Project 式的组织方式。这是很自洽的。所以其实好的个人管理系统应该是像数学那样，可以在自己的舒适范围内自洽的。它当然也可能遇到「无理数危机」，但重点是能够被迅速的修复。它要是动态的、不能一成不变的。它应该是帮助我们聚焦于自己的人生和目标，而不是为了为自己建立一套机械式行为准则的。它需要是可定制化的，服从个体不同需求的。</p><p>另外很重要的一点是，我们需要能分清楚什么是哪些资产是「负面资产」，在容易处理的情况下，我们应该尽可能地清理掉它们，而不是一昧留存着这些内容占据。关于这类内容的认定我想不同的人会有不同的观点，通常来讲你删去过去自己发布的现在认为会很尴尬的帖子等行为就可以被认定为一种清理负面数字资产的行为。它可能是和你的负面情绪相绑定的，清理掉这类内容会带来一种心理和情绪上的释放。</p><p>就我个人而言，引入工具时，工具的存在感尽量低一些会比较轻松（当然这个存在感高低可能不同的用户也会有不同的想法，像我的话，如果 UI 做的比较难看，它在我眼里会非常突出），因此才能把目光聚焦在自己要做的事情之上而不是额外的去关注其他内容，这也是给自己的心智减负。如果后期仍然有其他的需求，也可以基于原来的设计慢慢进行添加和调整。这种选择中所做的工具权衡就要看每个人差异化的偏好了。</p><h2>基于项目和库的「数字资产」管理 —— 我个人的组织方法</h2><p>PARA 的核心是以项目组织，着眼于重要的领域。我使用的管理方法虽然吸收了有关想法，但没有完全按照 PARA 来进行，这里大量引用的主要原因是希望去强调一些它的方法论。在具体应用上，我想分享一下我个人的思路。</p><p>总体来看，目前 Apple 平台的信息组织上，如果不引入其他方式，大致是以纯文件夹进行组织的形式和以 Apple 的利用「资源库」思路组织信息的形式。这类「资源库」往往是基于某个具体软件的。那么基于这两种组织形式大概就有以下两种管理方式：</p><p>一是纯粹使用文件夹来组织，最大化文件夹使用以减少对具体软件特色功能的依赖，这种方式通常提高了兼容性和安全性，但相对的会对使用软件特色功能的便利性造成损失。同时实质上还是过去那一套对内容进行管理的思考，很容易重新陷入对不同方法论的思考和斟酌中。如果引入「项目」概念进行组织，我们可以参考编程项目的分类方法或者参照工程文件、引用（参考）、手册、笔记、素材（附件、资源）等种类划分，在自己的具体的「项目」文件夹内存放所有与此项目相关的资产。在不引入其他方式的情况下，这种做法会让文档的复用性变得比较低。另外，当项目太多或者某个项目特别大时，识别项目和查找可能依然会成为问题。</p><p>二是使用资源库黑箱式的管理方法，也就是充分发挥软件本身的特点来管理内容。以 Apple 原生应用为例，在 Photos 中就使用 Album 和 Album Group 来管理，在 Music 中就使用 Playlist 和其他提供的 View 来管理，Reminders 中则是 Group 和 List 来管理等等。这可能会造成对软件的强依赖，但好处是更加灵活、更容易发挥软件自己的优势。</p><p>我在「数字资产」管理上的习惯，基本上算是对上面两种方法的糅合。不过关于在使用具体哪种方法进行组织上，还是认为适合自己的才是最好的。</p><h3>使用「资源库」进行管理</h3><p>这一点上，我吸取了浏览器 Profile 的特点。当你在浏览器中建立一个不同的 Profile 时，你的 cookies 和书签等等，都可以是不相同的。在<a href="https://sspai.com/post/84931">介绍 Arc 的文章</a>中提到过我习惯使用不同的应用实现 Profile 上的隔离，因此在软件使用上我也结合软件特色基本采取了这种方式。这里我就只说说我如何实现阅读内容的管理的，或者广义一些，算是开头提到的「我们从外界获取的信息」。</p><p>在文章上，当阅读公众号时，其他应用的抓取会非常困难，因此我习惯使用 Cubox 来实现公众号的阅读；Net News Wire 则用以阅读娱乐性的 RSS 内容，即使我不记录这些内容，对我个人偏好而言也没有任何损失。最重要的文章则应该尽快阅读，实在当下没有时间读的的则添加到 Safari 阅读列表来促进我尽快阅读。其他文章我则直接在网站上阅读或添加至 Readwise Reader 阅读。</p><p>书籍的话，抛开纸质书不谈，Calibre 和 Apple Books 是我主要的阅览工具。PDF 的话也可以考虑 Margin Note，不过协同起来相对麻烦。我更倾向于直接存到 Apple Books 中，在需要的时候随时取用即可，不需要的情况下也可以直接进行归档流程（归档是我稍后会讨论的另外一个简单的话题）。我选择 Apple Books 主要是因为它的 UI 非常简洁，在多端设备上的同步和查看都比较方便（PDF 还是会用 PDF 的阅读器来看的）。不过需要注意的是，似乎从 Apple Books 中导入再导出的 EPUB 文件常常会遇到解析问题。Calibre 则为应对这些问题做准备，主要充当一个资源库作用。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/03/30/00c08f14213a0025d029353333a24400.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/03/30/a2237cb4bd20ffdf9c47f5dc33b56a34.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>这个阅读流程看似引入了非常多的软件，但因为非常契合我的需求，实际使用上倒很有效，帮助我读完了大量的文章和作品。另外很大的一个原因在于上面提到的大部分工具都可以通过 Readwise 的高亮导入得到同步，利用 Readwise，基本上能完全实现对「从外界过去的信息」内容的整理。我也可以通过 Readwise 直接扫描纸质书的摘录并在后面的工作流中同步至我的笔记软件 Obsidian 中，进而在笔记软件中把信息化为知识。</p><figure class="image ss-img-wrapper"><img alt="image" src="https://cdn.sspai.com/2024/03/30/article/0903a16455135db875599bedc1ccaa13.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Readwise 生成的纸质书摘录分享卡</figcaption></figure><p>这些自动化操作减少了我的操作步骤，基本上我只需要点击文章，阅读、高亮、添加思考和笔记即可，因此尽管看似引入了不少应用，操作起来却很适合我个人。</p><h3>整理上以项目为中心</h3><p>因为其实主要的资源都几乎交给了具体软件的「资源库」来管理，所以其实在「资源库」之外主要就是建立「项目」相关的文件夹了。需要注意的是，只有使用「资源库」管理时没有那么方便的时候，我才会建立「项目」文件夹。这两种方式是相辅相成的。项目文件夹我通常直接建立在桌面，完成后直接移到统一的位置即可，这里我个人习惯是压缩后直接归档。</p><p>举一个具体的例子来说，假定我现在有一个报告项目，那么我需要搜集与这个项目有关的法规、数据报告、进行数据分析、收集有关图片并且制作演示文稿。可能还需要再导出一份 PDF 版的文档。在这种情形下，我们就可以使用项目来组织内容，并且为这个项目建立一个具体的文件夹。但如果这是一个短片的剪辑，那只需要简单的把有关文件导入到 Final Cut Pro 的资源库内进行统一管理。当然版本备份和有关文档也可以再存到一个包含了上面资源库的项目文件夹内，就实现了两者的统一。</p><p>如果在我们进行的这个报告项目中，需要使用到过去积累到的一些内容或者文件呢？并且这些文件还需要进行复用。目前看来，在不引入其他工具的情况下，最好的办法可能就是直接从你的「资源库」中复制一份需要使用的文件添加到项目文件夹中作为素材使用。</p><p>如果不愿意这样做，目前笔者推荐两种方法来应对这种情况。一种是使用 Hookmark，它能将 macOS 中所有的文件互相引用和链接到一起，也就轻松解决了这类问题。另一种方法是使用 DEVONThink，在 DEVONThink 中建立有关的项目文件夹，然后通过 DEVONThink 提供的 Replicate 功能使得一份文件同时出现在两个位置，在这种情况下，项目文件夹和资源文件夹中的共同存在就实现了。总的说来笔者个人还是更偏好从「资源库」中拷贝出来的做法的，简单高效。Hookmark 虽然灵活一些，但容易形成依赖。</p><p>通过各个软件各司其职的做法，在事实上减少了自己的数字资产管理需求，我能够在需要某些内容时直接打开对应的软件，即可查找和使用对应的资产。因为各个软件的需求不同，所以当某一个软件不符合我的需求时，我可以直接丢弃掉它而进行切换。当然这需要你选择的软件不具备强依赖性。像一些完全无法导出/导出数据非常困难、使用独有格式且开发历史短、大型公司非核心业务类软件通常都不是特别好的选择。抛开云盘归档和不重要的文章外，我个人也不太喜欢使用纯云端的应用，最好我现在需要的应用和内容我都可以通过我的 Finder 和应用访问到。</p><p>下面说说一些让管理更舒适一些的内容。</p><h3>模块化的管理</h3><p>笔者一直认为没有一套管理方法能完全适应每个人的需求的，一如没有完全相同的两片树叶一样。因此一套用以管理自己数字资产的方式最好是模块化的、可定制化的。这也是我偏好使用「资源库」方式管理的原因，你可以随时替换掉自己不需要的部分。当然完全封闭的资源库（不对外开放接口，无法通过检索工具检索内部内容）型软件是不建议选择的。</p><p>如果你是一个音乐爱好者，那么你可能听说过 Roon；如果你是摄影师，那可能会选择使用 Eagle、Adobe Lightroom；如果你是影视爱好者，可能会选择 Infuse。但是对于大部分人来说，可能内置的《照片》应用已经足以管理图片，Apple Music 上传音乐后多端同步的功能也已经足够聆听自己喜欢的音乐了。因此模块化的关键在于不满足自己使用需求的部分，就可以随时使用其他的软件替换掉它，以拓展开更大的使用空间。</p><p>关于提到的应用，可以参见这些介绍：</p><ul><li>《<a href="https://sspai.com/post/68706">也许是 Apple 平台最全能的视频播放 App：Infuse</a>》</li><li>《<a href="https://sspai.com/post/80051">一个月测试 7 种音乐服务，我在建立数播系统的过程中遇到了哪些坑？</a>》</li><li>《<a href="https://sspai.com/post/73795">进一步巩固「最强」素材管理工具地位：Eagle 3.0 大更新</a>》</li><li>《<a href="https://sspai.com/post/66756">东西我都装好了 | 如何用 Lightroom 更高效整理与归档照片</a>》</li></ul><p>但是我们经常会担忧如果未来数据量变大后的迁移问题，总想着一劳永逸的解决问题，为未来的自己减负。首先现在使用着的应用，未来是否仍然存在，还是一个未知数；另一个是我们很难设计出一套一劳永逸的解决所有自己未来可能需求的系统。即使是人类社会的各种学科，也是在不断实践中优化、进步的。我们只能在起初尽量选择自己对其未来有信心、且迁移友好类型的软件，并且尽量不过度集中，以免增大潜在风险。相对来说，可以直接索引（index）自己数字资产并在自己的资源库内显示（而不是完全彻底导入）的应用会更好一些，但是只要导出和迁移是足够方便的，依然可以尽管使用。</p><h3>强大的检索功能</h3><p>检索是非常重要的一个功能，一个好的检索工具有时候能省下不少麻烦的事情。通过检索工具，查找和使用数字资产往往能变得更为简单和方便。这与上面的部分也产生呼应，我们应该尽量选择能被检索工具检索到的资源库型软件，而不是使用封闭性库的。因为篇幅原因，我这里就不展开介绍了。在 macOS 上，Raycast、Alfred、LaunchBar 都是很好的选择，内置的《聚焦搜索》也可以处理绝大多数的基础需求了。</p><p>DEVONThink 也可以提供非常强大的检索能力，而且可以避开 Finder 中系统文件的干扰，可以说作为个人数据管理中枢其实是很不错的选择。可以参见站内的这些介绍：</p><ul><li>《<a href="https://sspai.com/post/79769">Raycast 该怎么用？我们帮你准备了一份实用指南</a>》</li><li>《<a href="https://sspai.com/post/43973">总是在 Mac 「装机必备」看到的搜索利器 Alfred，究竟是怎么用的？| 新手问号</a>》</li><li>《<a href="https://sspai.com/series/28">LaunchBar：全方位优化你的 macOS</a>》（这是一套付费专栏）</li><li>《<a href="https://sspai.com/post/54552">界面重新设计、中文支持更佳，DEVONthink 即将迎来 3.0 更新</a>》</li></ul><p>除了使用检索工具以外，我个人也喜欢针对我比较感兴趣的主要领域单独建立一个 Excel 或 Numbers 文档来进行处理。这类应用将提供更便利和直观的数据查看和检索能力。</p><h3>归档和备份</h3><p>数字资产管理的最后一步自然是处理一些无需再用但也不希望删除的内容。这一步我通常在我的云盘和移动硬盘内进行。这种使用上我个人同样是分开使用场景的，例如工作有关的往往可以在 OneDrive 内找到，而个人相关归档则存在 Dropbox 中。那么需要寻找某些对应文件时，只需要打开对应的云盘应用即可。</p><p>如果你有更高阶的需求，也可以引入 NAS。这里有一些有关的介绍，也可以在站里搜寻，有大量有关的内容：</p><ul><li>《<a href="https://sspai.com/series/182">家用 NAS 入门指南</a>》（这是一套付费专栏）</li></ul><p>这类内容展开来说需要非常多的篇幅来讨论，我们这里就暂时不做更深入的探讨了。</p><h2>结语：接受失去</h2><p>我觉得特别重要需要学会的一点就是要接受失去。我过去就常常会因为觉得既然技术如此发达、可以轻易捕获绝大多数我所需要的内容并储存起来的话，我就应该尽可能的把信息都储存起来。再加上时不时有些信息会失效，让我更想把它们都 duplicate 到本地。大量信息的分门别类和归置导致哪怕是打个标签或链接、在信息量大时也是很浪费时间和精力的。</p><p>在一些著名的审计事件中，可以看到即使会计所这样的大型专业机构，在审计公司财务时依然会不时出现审计失误。我们如何确保自己可以始终如一的维护好一套复杂而一成不变的 PIM 系统呢？这显然是几乎不可能的事情。况且信息有其时效性，绝大多数的信息在一定时间之后，通常都变得不值一提（信息变得过时了，或者我们不需要它了）。人类在过去几千年的文化历史中产生了多少信息？真正留存下来、依然有价值的有多少？即使今天是信息大爆炸的时代，高质量的信息也依然相当罕见。</p><p>去年年底的时候我比较焦虑，对未来的不确定感特别强，在回到家休息了几个月之后心态慢慢地健康了很多。最大的收获或者说改变就是「接受失去」。我不再纠结大量信息的何去何从和完善系统的设计、不那么因为未来计划的不明确而烦恼不已了。很多信息也许确实会有用处，然而为此过度劳心劳力，反而得不偿失了。人生中总在失去一些事情、得到一些事情。人类数据量那么大，总不至于真到要用时就掘地三尺、查无此人吧？</p><p>所以偶尔也会反思，也许 PKM/PIM 的真谛其实是学会不管，GTD 的真谛是学会放弃不该做的。没必要的知识和信息可以不管，没必要的事情也无需硬是浪费自我气力。做到应该管理的信息管理好，无需管理的信息不烦忧。PARA 的方法也是一同，归档本身就是在暗示自己、为自己的心理减负。其实用久了，会觉得它是在告诉你专注于当下，哪些事情该做，哪些事情不该做。不该做的事情，就随风飘去吧。</p><hr /><p style="margin-left: 0px;">若你有兴趣，可以阅读我的前几篇文章：</p><ul><li><a href="https://sspai.com/post/86478" target="_blank">《自由人生，张弛有度。分享心得一二》</a></li><li><a href="https://sspai.com/post/84931" target="_blank">《使用 15 个月后，再来看看 Arc》</a></li><li><a href="https://sspai.com/post/84240" target="_blank">《集思广益？简单聊聊「协作」》</a></li></ul><p style="margin-left: 0px;">感谢你的阅读，有任何意见、批评请在评论区指出，我积极改正；有任何想与我分享的，也欢迎评论。只是时间所限，回复可能不及时，还望大家见谅。</p><p style="margin-left: 0px;">&gt; 关注 <a href="https://sspai.com/s/J71e">少数派公众号</a>，解锁全新阅读体验 📰</p><p style="margin-left: 0px;">&gt; 实用、好用的 <a href="https://sspai.com/mall">正版软件</a>，少数派为你呈现 🚀</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87646</id>
            <title>我的笔记流，基于dailynote和双链的无压记录</title>
            <link>https://sspai.com/post/87646</link>
            <guid isPermaLink="false">https://sspai.com/post/87646</guid>
            <pubDate></pubDate>
            <updated>Fri, 29 Mar 2024 03:24:41 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 作者经历, 脑海中的想法, 笔记流, 定期回顾
<br>
<br>
总结: 作者分享了自己的亲身经历，探讨了脑海中的想法如何产生和记录，以及如何通过笔记流和定期回顾来管理和利用这些想法。 </div>
                        <hr>
                    
                    <p>有一本书叫《清醒地活》，里面有有一个关于作者的亲身经历非常有趣。</p><p>他说他患病了：“我脑子里一直有一个声音，它一直在叭叭讲个不停，而我又没有任何办法让它停止说话。这个声音简直快把我烦死了！这个声音要把我弄崩溃了！”</p><p>猛的一想，我们每个人大脑里也有一个这样的声音，每天不断地自言自语。其实这就是我们脑海中的想法。这些想法可以是阅读产生的，可以是突然冒出的想法，可以学习到新经验的记录，可以是当下的情绪。很多好的想法往往就是在不经意从脑海中冒出来，尤其是我们没有在干什么的时候（比如散步、无所事事、开车等等）。无论是否成熟，先不要让它溜走，一定要及时记录下你的想法，再慢慢地看看它可以用于哪。</p><p>于我而言，笔记不仅仅说是一种学习方式，我更愿意理解为一种生活方式（思考流，工作流），只是它展现的式是笔记。就像flomo的slogen——“持续不断记录，意义自然浮现”。真的太喜欢这一句了。</p><p>无论它是什么，就记录下来吧！随时随刻的记录，不要有压力地记录。</p><h2>记录</h2><p>记录是一切的开始，一定不要复制粘贴。非必要情况一定用自己的话再复述一下。记录也不等于剪藏。剪藏的内容并不属于你，你也用不上。做笔记的目的不是记录别人的信息，也不是搬运内容到笔记本中。而是寻找更有效的解决问题的思路，结合自身的问题，记录现状和改进的方向。</p><p>随时随地记录下想法，任何想法都可以，不要怕写下的内容不够好，先走出第一步，先写下第一个字。</p><p>我需要把我内心的想法，念头无时无刻，随时的记录下来。所以，于我而言记笔记不是单纯的记录信息和学习知识。更多的也是一种心理上的疗愈。如果你正处于某种情绪之中（悲伤、烦躁、痛苦、纠结），写下来在这些情绪之中你脑海中的想法，相信我，这会让你好很多（情绪书写练习）。</p><p>我的笔记流的源头就是今日笔记（dailynote)。无论何时何地，我脑海里冒出的一些想法或者情绪我都会立刻记录下来。主要比较常见的有三类卡片（段落），一是闪念笔记，就是大脑中随时随地冒出的想法，当我捕捉到时，我就记录下来。二是阅读笔记，阅读一些信息内容产生的想法，三是情绪卡片，当我承受压力时，当我焦虑时，当我懊悔时，当我开心时，我都会记录下来当时的情绪，一方面是清空大脑，另外也是进行情绪复盘。</p><p>我刚开始时记录是，就是完整只是情绪或者一些很随意的想法。后来再回顾的时候我就发现，再看笔记时并不知道自己在记录时候什么，后来在记录笔记的时候，我会有意提醒自己，遵循5W1H原则，尽量记录信息的完整性，此外还要时刻思考记录这个信息可以用于哪，如何使用。</p><p>我在手机端写了方便自己输入的IOS快捷指令，我在PC端基本24小时开着笔记软件，而且自己写了一个quicker动作。保证当我脑海中有想法的时候可以第一时间记录下来。这样第一时间都可以快捷地写入到每天的日记（Dailynote）中。</p><p>为什么我要花费如此多的篇幅说记录，就和种树一样，种下一棵树最好的时候就是现在。笔记只有写起来、记起来，这样笔记才能慢慢成长为一篇森林。没有记录，何谈后续的整理、链接、输出。</p><h2>链接</h2><p>很多笔记法和学习方法都提到了organize（或者说组块）。落于笔记软件的实操层面，组块就是双链。</p><p>关于链接（组块）我是怎么做的，我每写下一条dailynote，会判断是不是lifelog，如果不是单纯意义上的log，那一定是可以运用于某个主题的信息或者感触，我会直接打上双链（标签、或者其他任何的方法）。在写下的时候我一般不进行整理，只是打上双链，最后直接整理。</p><p>比如周报，周一到周五都是先在dailynote中记录当下完成的工作。打上Y24W14（2024年第14个周）。然后到了周五的时候，直接打开Y24W14这个页面，通过底部反链，直接一键移动到当前页面，适合整理一下，就可以提交工作周报了。整个写周报的过程不会超过10分钟。</p><p>比如情绪记录，每次遇到什么波动比较大的情绪时，我都会写情绪记录，我最开始是直接link到情绪记录这个页面。后来情绪记录的笔记也越来越多，我对于我自己的情绪观察也发现了几个特点。比如不好意思麻烦别人、比如失眠时容易暴躁。在情绪记录这个页面下，我又可以进一步划分出几个不同的情绪主题，进一步细化和整理。</p><p>在搭建体系的时候，建议要区分领域和兴趣。领域是以精进为目的的，是可以产生收益的，是需要不断精进的。而兴趣就无所谓了，只需要开心，可以产生情绪价值其实就足够了。所以人力资源技能和投资就是领域，需要持续给于投入和精进。</p><p>在这个过程中，我产生过几个问题或者说困惑。</p><blockquote><p>比如：我的这个页面放在日记下是不是不合适，不成体系？</p></blockquote><p>不必担心，先有笔记，先放在这，如果你研究的越来越深入，慢慢地整理后，自然而然的就会生长成森林。就是笔记法中所说的要种树成林，不要幻想这一天建房成楼。一天搭起框架是极其耗费心智的。我们在写笔记的过程中就是要减少一切的心智负担，先记录。</p><blockquote><p>比如：我打完标签或者链接之后，是不是要当时就整理？</p></blockquote><p>都可以，随你的心意。过去我也非常纠结于这点，是不是当时整理更好，这条笔记移动过去是不是更整洁？我有的时候看到了又喜欢鼠标点一点整理一下。后来我在思源用户群和一些朋友交流之后释怀了。随心而动，不要占据你的认知和心力。如果你看着不舒服，你就及时整理一下。如果你可以接受它现在的样子不整理也可以。</p><h4>定期回顾</h4><p>定期回顾的功能是受flomo的启发，当然其他笔记软件基本也有类似的功能或者插件。</p><p>很多人都有一个非常常见的问题是什么？笔记只收藏，不整理。无压笔记和dailynote笔记流是不怕杂乱的，但是对于笔记来说，定期回顾是非常重要的。写下的信息串联起来，才能转化真正有用的，可落于实践的信息和知识。一切的一切，以用为主。就像L先生说一样，阅读、笔记的核心原则是“以我为主，为我所用”。</p><p>可以通过定期回顾（漫游、回顾，随机）这样的方式回顾自己的笔记。回顾的时候，我们可以做这么几件事。</p><ol><li>整理笔记。可以回顾之前写下的笔记，有一些如果是记录或者情绪，或者适当删除。</li><li>温习笔记。或者当时只是记录下来了，现在回顾又有一些新的体会。这样就可以在笔记下方直接写下新的感触。</li><li>串联笔记。回顾笔记时，遇到了条都是关于#忍不住发脾气的的笔记，这样就可以把它们整理到一起。</li></ol><h2>输出</h2><p>输出我做的不好，所以其实没有太多需要和大家分享的。</p><p>在写这篇文章的时候，我关于输入和整理，我都有很多想说的。但是到了输出，我就写不出什么来。其实这就是对于这块的运用和理解还不够深刻。毕竟自己一共也没有输出过多少篇文章。</p><p>我这篇文章，就是事先定好主题，日常有关于笔记工作流的想法时就及时写下来，然后定好框架，填充内容，整理修缮的模式写作完成的。大概花了两周吧，中间主要因为输出这一块卡壳了，整理的时候也发现了，自己输出上做的不好。</p><h2>总结</h2><p>以上就是我非常个人化的一个笔记流程，核心观点还是无压输入和双链。</p><ul><li>每一个字都建议是你亲自写下或者敲入的，不要复制，不要复制，不要复制！</li><li>Dailynote的核心就是无压笔记（无压输入），不要有负担，不要怕制造垃圾。写下你大脑那个声音正在对你说的话。</li><li>方法是通用的，具体的笔记软件与一些流程可以根据自身的情况做一些调整和修改。</li><li>不要追求完美的工具，还是要掌握流程和内核。能满足80%的功能需求的笔记软件就很好了。</li></ul>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87620</id>
            <title>[送码] 2024年了，为什么还要做一个 Todo App</title>
            <link>https://sspai.com/post/87620</link>
            <guid isPermaLink="false">https://sspai.com/post/87620</guid>
            <pubDate></pubDate>
            <updated>Thu, 28 Mar 2024 04:08:40 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 独立开发者, 三件套, Todo App, CardList
<br>
<br>
总结: 文中提到独立开发者圈子流传着一个梗，即每个独立开发者都在做记账、日记、Todo这三种产品，称为独立开发者三件套。虽然市面上已有很多Todo App，但作者决定自己开发一个Todo App，即CardList，以卡片形式展示分组列表和重要待办事项，减少过期任务带来的压力，保持简洁好用。 </div>
                        <hr>
                    
                    <h2>一个梗：独立开发者三件套？</h2><p>不知你们是否听说过，独立开发者圈子时常流传着一个略带讽刺的梗：每个独立开发者都在做三件套产品：<strong>记账、日记、Todo，俗称独立开发者三件套。</strong></p><p>虽说这只是一个梗，但也从一定程度上反映出两方面的信息：一是独立开发者的产品普遍比较同质化，二是记账、日记、Todo 这类产品用户群体和市场需求也比较大。</p><h2>2024年了，为什么还要做一个 Todo App？</h2><p>那么，现在 2024 年了，且市面上已有这么多 Todo App 的情况下，作为一个业余独立开发者的我，为什么还要做一个 Todo App？</p><p>其实我用过各种类型的 Todo 产品，包括传统的微软 Todo、滴答清单、Todoist、Reminder、Any.do 等产品，也尝试过看板类产品 Trello，以及主打 all in one 的笔记产品 Notion。</p><p>它们有的功能很简单，有的功能很强大。例如滴答清单就加入了四象限、日历、打卡、专注等功能，Notion 更是基于 Block 集成了整个工作空间。</p><blockquote><p>当然，其实它们都很好，只是不太适合我，暂时还未能满足我个人的使用需求，因此我便决定自己做一个 Todo App。</p></blockquote><h2>我理想中的 Todo App 是怎样的呢？</h2><h3>1️⃣首页直接展示分组列表及其重要待办</h3><p>目前大部分 Todo App 首页都是只展示分组列表，查看待办需要进入下一个页面（下图左一、左二），这对我来说不够简单直接。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/23/6e37515f471d19393bf934c2d84e85e7.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>注：这些都不是我想要的首页展示</figcaption></figure><p>虽然滴答清单的侧边栏选择“所有”分类后，首页也可以做到同时展示分组列表和待办（上图右一），但我希望只展示我认为重要的待办，而不是全部待办。因为待办有很多，但最近需要重点关注的也就那么几个。</p><h3>2️⃣希望减少过期任务带来的压力</h3><p>我们在用 Todo App 时，过期的任务总是会越积越多，随着小红点数量不断增加，心理压力会越来越大。所以我理想中的 Todo App，希望能够减少过期任务的出现，从而减少心理压力。</p><h3>3️⃣基础功能齐全，同时保持简洁</h3><p>Todo App 作为一个生产力工具，基础功能体验需要完整。例如支持设置分组、标签、优先级、备注、提醒等，支持跨平台多设备终端使用。</p><p>此外，现在很多 App 都在追求 all in one，把所有功能都集中到一个 App 上面。当然这只是不同产品自身的选择，但我希望它只专注于待办事项，保持简单好用，而不一定需要日历、打卡、专注计时、笔记这些功能。</p><p>如上所述，由于目前没有任何 Todo App 可以满足我的使用需求（主要是第一、二点），我便决定自己动手开发一个。</p><h2>CardList 有哪些差异化体验？</h2><p>经过差不多2个月的时间进行设计和开发，CardList（顾名思义：卡片列表） 待办事项 App 终于成功上线啦✌️</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/23/fad2dbd6c2cdc2c7c1c8404f77cbaea1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>CardList：以卡片形式展示你最近关注的重要待办</figcaption></figure><p>CardList 是一个简单好用的 TodoList 待办事项 App，它最大的特点是以卡片形式展示你的分组列表和最近关注的重要待办事项，CardList 支持 iOS/iPadOS/macOS 三大平台，数据通过 iCloud 自动无缝同步。</p><h3>1️⃣首页卡片列表直接展示分组列表及其重要待办</h3><p>CardList 首页是以卡片形式展示你的分组列表和最近关注的重要待办事项，不重要的待办事项隐藏在分组列表里面，你也可以随时通过点击分组列表，把里面你认为重要的待办事项展示到卡片列表。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/23/3b921b2e28d763082af1d012ea0cde99.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>打开 App 时，就能立刻看到最近我需要关注的重要待办事项，点击分组列表也能快速查看该列表的所有待办</figcaption></figure><p>这一点于我是最重要的，卡片列表足够简单直接。因为我希望打开 App 时，就能立刻看到最近我需要关注的重要待办事项（注意：不是全部待办事项），而不必通过点击分组列表进入到待办事项列表。</p><p>当你发现某件事项推迟或最近无需关注了，你只需要点击右侧的卡片图标，就可以把它隐藏到分组列表，直到后续你认为需要开始关注它再把它显示到卡片列表即可。</p><h3>2️⃣极大减少过期任务带来的压力</h3><p>由于首页卡片列表核心定位为：以卡片形式展示你的分组列表和重要待办事项。<strong>这意味着，你无须通过为待办事项设置一个截止日期来体现其重要性，除非它必须要在某个时间点提醒你开始处理它。</strong></p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/23/3c0c5365aafd1e52d6dc82d62abae650.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>你无须通过为待办事项设置一个截止日期来体现其重要性，除非它必须要在某个时间点提醒你开始处理它</figcaption></figure><p><strong>基于我多年的实践，真正重要的事项反而没有明确的截止日期，</strong>或者说至少不是确定某一天内就必须完成。例如，本周我要写一篇文章，如果你把截止日期设置为周五，其实也不是太合适，因为它有可能提前完成或延后。最合适的做法就是，把它显示到卡片列表，因为卡片列表本身定位就是显示你最近关注的重要待办，而你最近需要着手处理它。那么即使过了本周你依然未完成，也不会产生由于任务过期带来的心理压力。</p><p><strong>这样一来，你就摆脱了截止日期的束缚，也就没有截止日期带来的压力。</strong></p><p>那么，什么样的任务适合设置截止日期呢？我的理解是，到某个时间点后，就必须开始做的任务。例如，一个产品评审会议，一个指定时间需要回复的客户反馈。而这种提醒，给你带来的其实是安心，而不是压力，因为你知道你不会遗忘它。</p><p>以上两点就是 CardList 最核心的差异化体验，<strong>通过使用 CardList，你可以专注于你最近关注的重要任务，而无须恐惧截止日期带来的心理压力。</strong></p><h3>3️⃣完整的基础功能体验</h3><p>此外，CardList 作为一个生产力工具，其基础功能体验也很完整。<strong>CardList 支持设置分组、标签、优先级、备注、提醒等，支持 iOS/iPadOS/macOS 三大平台，数据通过 iCloud 自动无缝同步。</strong></p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/23/5788854b7fe78d18be9296d9c47b3b9b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>支持 iOS/iPadOS/macOS 三大平台设备，数据通过 iCloud 自动无缝同步</figcaption></figure><p>自从 CardList 上线后，我已经开始使用它快一个月啦，目前来说完全符合了我个人的使用需求。<strong>每当我有好的想法时，就会拿出手机记录下来，但暂时不会把它显示到卡片列表。当后续准备处理它时，再把它显示到卡片列表即可。</strong></p><h2><strong>总结&amp;送码</strong></h2><p>最后总结一下，<strong>CardList 的设计理念是让你可以专注于你最近关注的重要待办，并尽量让你可以无压力去处理你的待办事项。</strong></p><p>为了感谢少数派读者的支持，<strong>我将在本文评论中随机选取一位幸运儿，赠送一个 CardList 终生会员兑换码，</strong>同时也欢迎大家体验和反馈哈😄</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87031</id>
            <title>30多岁帝都PE投资人，辞职去DIY造房车..</title>
            <link>https://sspai.com/post/87031</link>
            <guid isPermaLink="false">https://sspai.com/post/87031</guid>
            <pubDate></pubDate>
            <updated>Thu, 28 Mar 2024 01:34:12 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 股权投资行业, 裸辞, 房车, DIY设计
<br>
<br>
总结: 一位股权投资行业的从业者考虑裸辞，计划购买房车并进行DIY设计，以实现更多时间陪伴家人和追求自由生活方式的愿望。 </div>
                        <hr>
                    
                    <h2>一、基本情况</h2><p>简单自我介绍下，本人从事股权投资行业，人在帝都，这两年经济环境确实一般，虽然没波及到自己的机构（央企投资平台、区域金控平台都做过，其实还都挺稳定的），个人也算在上升期，但体制内时常出现些想做事而束手束脚、瞻前顾后的情况。我这个人做事儿比较投入，希望以结果导向，也有些自己坚持的价值观，这种情况下其实个人还比较心累。</p><p>正好2023年女儿出生，自己也内心希望能阶段性地花更多时间陪伴她成长，而不是将绝大多数时间精力投入在无休止工作的拉扯中，所以在一段复杂的工作任务完成后，自己萌生裸辞的想法：一方面是多花些时间陪伴家人；其次也算是犒劳一下自己、难得休息休息；再次就是自己也一直有想法折腾一下房车，正好利用这个机会可以大刀阔斧的实践一下。</p><p>自己从事投资工作，当然知道现阶段情况下做出裸辞决定是挺有风险的，身边的挺多朋友也是劝我，但我还算是了解自己的性格，也做了些充分的风险评估，还是在2023年底和家人沟通后做了这个决定。否则就也不会有这篇帖子正在记录、以及将要记录的事情。</p><h2>二、为何关注房车</h2><p>已经记不起自己是具体何时对房车这个概念比较感兴趣的，可能是自己一方面比较喜欢自由和旅行，有过好几次长途自驾旅行，但多数是飞机到目的地后租车自驾，总之感受上还是缺少一种安全感。而房车这个产品和自己的兴趣爱好很好契合，一方面可以享受驾驶的乐趣，另一方面也能让旅途多谢从容和温暖。所以很多次自驾旅行的时候就想如果有一辆房车的话，会是一种别样的风味。</p><p>关于折腾房车的另外一个契机上面也提及过，就是2023年自己生了宝宝，自己想过在她成长的过程中如果能在读万卷书的同时，引导她踏实地行万里路去多看看大千世界、风土人情，而不是把精力和心思困在商场里的游乐园、纷繁复杂的课外班。要达到以上目的，房车是一个很好的媒介。</p><p>总之就是自己对房车的价值是认同的，对这种自由的生活方式是向往的。</p><h2>三、房车的选择</h2><h3>3.1 车型选择</h3><p>房车分为很多类型，A型、B型、C型、拖挂式房车、第五轮拖车、背驮式房车等，前几年国内露营兴起后还衍生出了露营车、床车等“类房车”的概念，形态千奇百怪、可奢可俭。</p><p>自己比较喜欢户外运动、徒步越野、长途自驾，平日喜欢轻装简行，所以太大型的房车自己现阶段不需要（可能之后伴随娃的成长会有相关需求），并且从经济性的角度来说，越小型的房车通常价格越美好（仅仅是相对的），所以自己将目标锁定在B型房车和皮卡房车身上。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/08/689b4af21625dc279104af7df5d370a0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>房车类型</figcaption></figure><h3>3.2 独立设计</h3><p>自己是个工科男，比较喜欢折腾东西，家里装修就是自己从设计、建模、采购一条龙搞下来的，并且效果还不错。对于房车这种高度定制化的产品，自己当然是有很强意愿去DIY建造，或者至少是去DIY设计的。</p><p>所以我首先是去找几个房车厂聊，咨询可否自己出设计图，房车厂按图制造，问了一圈下来是很难达成，主要原因就是房车是一种很非标的产品，单独开模成本较高，并且独立设计如果想标准化建造是需要工信部出的房车车型公告的，这个对于单独一台车来说成本较高，划不来。如果直接买车自己动手改，经常会出现触碰“非法改装”的红线，未来行驶起来胆战心惊也是麻烦。</p><p>但自己DIY的想法还是很强烈，所以左思右想各种琢磨，终于找到了一种可行的模式——皮卡背驮式房车。<br />所谓背驮式房车，经常是和皮卡一起出现，即房车主体以房箱形态独立出现，和皮卡是分体式结构，相当于皮卡的一个货物。这样做的结果是房箱车体是可以进行独立设计的，可以满自己独立DIY的需求。当然这样做也有麻烦的一面，即毕竟基于皮卡底盘，空间有限；且高度、宽度均有限制，每年年检还要进行拆除，总之也是有麻烦的地方。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/08/f5f016632b2031c5052ad7274fbcb5a4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>背驮式房箱示意图</figcaption></figure><h3>3.3 要坚持DIY！</h3><p>有了政策法规的支持，自己可以有机会DIY房车内部（房箱），但既然做了就想做彻底一点，索性希望将整个房箱进行DIY设计、并且希望<strong>自己建造</strong>！这个其实是难度很高的，尤其是对于房车产业之外的人来说，在狭小的空间内进行水电路设计是很有难度的。建造难度也很高，包括场地、材料，都是需要重新置办，也是一笔不小的开支，不一定比房车厂做的便宜。</p><p>但这样做的好处也很明显，房车本身是一个不太透明的行业，和装修有一点像，自己DIY做的话，选用的零件、材料都会更有保障，建造的过程中伴随解决问题，也能逐步优化自己的设计，也会是一个不错的过程。</p><p>所以在敲定了皮卡背驮房箱这条路径之后，自己也是买了一款2023年新出的皮卡，江铃大道。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/08/ffce1c829d70e0156f4043a14556a912.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>2023年买的皮卡</figcaption></figure><h2>四、进度介绍</h2><p>我这个Chiphell的账号是在2023年底新注册的，起初想当时就把自己筹备房车的事情进行记录，但毕竟这件事对我来说是一件完全新鲜的事情，和自己之前从事的股权投资工作完全不同，实话实说自己也心里没底，怕虎头蛇尾。</p><p>到如今，研究了两个月下来，框架建模、水电路的相关设计雏形在过年期间进行了初步构建，现在自己对于房车的理解还是深化了不少；场地已经选好，并且前期重要原材料房箱面板经过了一个多月的沟通，终于由厂商发货。截止目前，自己终于还算是有点底气不会让这个自己建造房车的事情烂尾。所以兴奋地敲下了这些文字，记录这个过程，也供有需要的朋友了解。</p><p>我在<a href="https://www.youtube.com/@Mesas_CN/videos">YouTube</a>、<a href="https://space.bilibili.com/3493123034450687">B站</a>、<a href="https://www.xiaohongshu.com/user/profile/613bf6b90000000002026a0a">小红书</a>等平台有同名的频道（岩坪Mesas），会对这个过程进行视频记录，伴随这个过程更全面的文字记录更多会在少数派、Chiphell进行介绍，如果有朋友有更多的交流需求，也可发私信交流。如果有朋友在北京也在折腾房车或感兴趣，也欢迎找机会面基交流、提供建议！</p><p>总之就是先开个头，给各位看官拉平一下这两个月的信息，po个当前的结构图和最新的视频。后续有进展会随时更新哈！</p><p>&nbsp;</p> <p>&nbsp;</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/08/dd7ab6da51f0120c4d03c9da64ddad59.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>当前的房车结构图</figcaption></figure><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87583</id>
            <title>大模型时代，“开源永存”似乎成了一种奢望</title>
            <link>https://sspai.com/post/87583</link>
            <guid isPermaLink="false">https://sspai.com/post/87583</guid>
            <pubDate></pubDate>
            <updated>Wed, 27 Mar 2024 09:45:12 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 开源, 闭源, 大模型, 混乱
<br>
<br>
总结: 本文讨论了大模型领域的开源和闭源之争，以 Elon Musk 旗下的 xAI 公司和 Stability AI 公司为例，探讨了开源和闭源的优劣势。同时，也提到了 Stability AI 公司内部的混乱和不稳定情况。 </div>
                        <hr>
                    
                    <p>开源和闭源孰优孰劣是一个人们争论不休的话题。许多开源爱好者喜欢举着“开源永存”的旗帜为开源摇旗助威，令人充满激情。但现在看来，闭源好像是现阶段唯一的“最优解”。</p><p>注：本文为个人观点和想法的输出，如有不同意见，欢迎在评论区中友善讨论。</p><hr /><h2>引言</h2><p>近期，大模型领域关于开源的新闻可谓是铺天盖地。从 Elon Musk 旗下的 xAI 公司在<a href="https://x.ai/blog/grok-os">官网</a>宣布开源拥有 3140 亿参数的大模型 Grok-1，到研发出开源绘图模型 Stable Diffusion 的 Stability AI 公司 CEO 突然宣布辞职并退出董事会。这些新闻，一时间把开源大模型推上了风口浪尖。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/26/e6c465732e67159ee2d1545878023d78.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>xAI 官网对于 Grok-1 开源的报道</figcaption></figure><p><strong>但 Grok-1 开源之后，好像并没有想象中的那么“一呼百应”。</strong>根据 Google Trends 的<a href="https://trends.google.com/trends/explore?date=today%201-m&amp;geo=US&amp;q=Grok&amp;hl=zh-CN" target="_blank">数据</a>，在 3.18 日时，搜索指数达到了“100”，而到了 23 号时，搜索指数已经急剧下滑到了 14，甚至比宣布 Grok-1 开源前的搜索指数还要低。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/26/51e9c7c8ec1f0bcc19050163de2deb92.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>数据来源：Google Trends</figcaption></figure><p><strong>而在图像生成领域的“稳定AI”（Stability AI） ，好像也不怎么 Stable。</strong> 公司的领头人 Emad Mostaque，既不再担任CEO，同时也退出了公司董事会，并在 Twitter 上<a href="https://x.com/EMostaque/status/1771400218170519741?s=20">宣布</a>要投身于去中心化与 AI 开放（#decentralizeAI）的事业之中。</p><figure class="image ss-img-wrapper image_resized" style="width: 424px;"><img src="https://cdn.sspai.com/2024/03/26/be044d330ef3b770257695bf74467cee.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Emad Mostaque的推文</figcaption></figure><p>不过，Stability AI 的混乱远不止于此，据<a href="https://www.thepaper.cn/newsDetail_forward_26788621" target="_blank">澎湃新闻</a>统计，从去年3月至今，已有至少19名高管或关键人物出走。CTO 也也刚刚换新，据称随着新 CTO 的上任，公司战略可能向语言模型偏转。另有<a href="https://www.thepaper.cn/newsDetail_forward_26788621" target="_blank">消息</a>称，Emad 还被曝出过拖欠员工工资、诓骗投资人等“黑料”。&nbsp;其近期的混乱与不稳定，与名字的强烈反差倒是显得极为讽刺。</p><p>所以，作为观众的我们，应该尝试着在这场大模型领域的开源闭源之争保持理性。本篇文章，将会站在我个人的角度，尝试着去分析这个“争端”，并给出一个我认为的答案。</p><h2>开源与闭源</h2><p>要想聊大模型领域的开源和闭源，就先需要明白开源和闭源本身。</p><p>开源（开放源代码），根据<a href="https://zh.wikipedia.org/zh-cn/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6" target="_blank">维基百科</a>的定义，是一种在电脑程序出品前和开发中提供其内部代码的做法。开放源代码使得生产模块、通信管道、交互社群获得改善。<strong>一个开源软体开发的主要原则和惯例是易货贸易和合作的同侪生产。</strong></p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/27/article/c19f62074d4320914d9f4e8215113828.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Linux 系统：典型的开源产品代表</figcaption></figure><p>而闭源（另称“专有软件”），则是由于商业或其他原因，不提供原代码，只发布只有计算机才能读懂的程序（如二进制格式）。</p><p>用一张表格我们就可以清晰、明了的知道两者之间的区别：</p><figure class="table"><table><thead><tr><th style="text-align: center;">方面</th><th style="text-align: center;">开源</th><th style="text-align: center;">闭源</th></tr></thead><tbody><tr><th style="text-align: center;">定义</th><td style="text-align: center;">开源指软件的源代码是公开的，并且允许任何人查看、修改和分发。</td><td style="text-align: center;">闭源指软件的源代码是私有的，只有软件开发者能够查看、修改和分发。</td></tr><tr><th style="text-align: center;">商业模式</th><td style="text-align: center;"><p>资金来源主要包括风险投资、捐赠等；</p><p>开源软件主要通过为企业提供开源软件的咨询和解决方案，收取咨询费用，提供技术支持、培训、定制化开发等服务赚取收入。</p></td><td style="text-align: center;"><p>资金来源主要包括投资机构的投资或少数情况下的捐赠；</p><p>闭源软件通常采用许可证销售模式，用户需要购买许可证来使用软件。</p></td></tr><tr><th style="text-align: center;">优点</th><td style="text-align: center;"><ul><li>社区参与，代码透明，安全性高</li><li>成本低，可定制性强</li></ul></td><td style="text-align: center;"><ul><li>保护知识产权，控制软件使用权</li><li>技术支持可靠，稳定性高</li></ul></td></tr><tr><th style="text-align: center;">缺点</th><td style="text-align: center;"><ul><li><strong>商业化可行性较差，盈利模式不明确</strong></li><li><strong>维护更新依赖社区支持</strong></li></ul></td><td style="text-align: center;"><ul><li><strong>缺乏透明性，难以排查漏洞</strong></li><li><strong>依赖软件提供商，成本较高&nbsp;</strong></li></ul></td></tr><tr><th style="text-align: center;">典型案例</th><td style="text-align: center;">Linux操作系统、Apache Web服务器、MySQL数据库</td><td style="text-align: center;">Windows 操作系统、Photoshop 图像处理软件</td></tr></tbody></table></figure><p>从上表中可以看出，开源的优势在于<strong>社区参与度高、可定制性强</strong>，而缺点则在于<strong>商业可行性较差、严重依赖于社区</strong>；而闭源的优势则是<strong>技术支持可靠、保护知识产权</strong>，缺点则为<strong>缺乏透明性及成本较高</strong>。</p><p>在传统的产品和软件中，开源和闭源各有自己坚定的拥护者和“杀手级应用”。开源的拥护者们，例如 <a href="https://www.redhat.com/zh/topics/open-source/what-is-open-source" target="_blank">RedHat 社群</a>高喊着“开源万岁”口号，认为开源能够推动软件生态的健康发展，让开发者“少造无意义的轮子”；而最终选择闭源的开发者，例如<a href="https://www.zhihu.com/question/518237152/answer/2376819946" target="_blank">Elvic Liang</a>则认为开源软件的商业化模式是一个极其复杂且成功率极低的事情，选择闭源才是对自己和用户负责的最优解，不至于让一个产品因为开源导致了最终无人维护。<strong>两个方案在传统的产品和软件中都有一定的可取之处，至少无论选择哪种方案都不至于让自己的产品走向一条“不归路”。</strong></p><p>然而，到了大模型这个领域之后，一个值得注意的问题是：<strong>在其他软件类型或领域中开源的优点，在大模型领域中还是优点吗？</strong></p><h2>大模型的闭源，在现阶段或许是必然</h2><p>前文中提到，近期 xAI 开源了自己的语言大模型 Grok - 1。在第一财经关于 Grok-1 的<a href="https://www.stcn.com/article/detail/1150036.html" target="_blank">报道</a>中提到，大模型厂商开源的动力<strong>主要是招揽客户，做影响力。</strong>而其目的则是让企业免费试用一段时间后，引导其向市场发布包装后的功能或者服务，这个东西（大模型）也相当于汽车里的发动机，直接用不起来，需要包装成整车。</p><p>然而，开源自己的大模型对于开发厂商的不利之处也有很多，主要有三：</p><p><strong>首先，大模型产品 to B 的逻辑与传统软件有本质上的不同。</strong>在传统的 App 中，一个公司的产品对于开源软件的依赖，可能是由于底层使用了某个开源软件的代码；但在大模型领域中，唯一能够让闭源大模型被公司产生所谓“技术依赖”的，可能也就是公司自己使用大模型的训练集和代码进行进一步的“个性化”训练。</p><p>但这个“个性化”训练所产生的壁垒，也会随着通用语言大模型 Long Context （长文本） 能力的提高而逐步消失。<strong>这也就意味着，公司不会对某个特定的开源大模型产生强绑定式的依赖性。</strong></p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/27/9aa7847a080c4003101f51ade64a33be.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Kimi 智能助手近期支持 200 万字上下文，是典型的 Long Context 代表</figcaption></figure><p><strong>其次，现阶段大模型领域的商业化产品一般都是以调用大模型 API （程序接口）的 Token 数付费的逻辑，而非付费购买、使用产品的逻辑。</strong>而这就导致了公司极低的迁移成本：公司只需要发现性价比更高的API后，迁移所需的资料、Prompt 到新的平台上即可。因此，使用大模型的公司可以“货比三家”，选择最为合适的大模型，而开源对于选择的权重则会降低。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/27/2a9f060099d2b0deb0d901e430ea25f5.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>OpenAI API Platform 截图</figcaption></figure><p><strong>最后，现阶段的大模型主要比拼的是模型质量的提高，而模型质量的提高则是需要大量的金钱来堆砌的。</strong>开源软件由于其特殊的商业模式，有些甚至很难产生盈利，因此投资机构会较为谨慎。但闭源软件由于其商业模式较为清晰，较容易得到融资，因此大模型厂商的资金来源充足，可以将精力完全投入到模型的研发上，因此模型能力更容易快速提升。</p><figure class="image ss-img-wrapper"><img alt="元能力引擎，IDC Market Glance：中国AI大模型市场概览报告正式发布" src="https://cdn.sspai.com/2024/03/27/article/851d651f2ecb4e128e895b4509a4073c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>IDC：中国AI大模型生态图谱（V1.0）</figcaption></figure><p>目前的技术曲线还是线性上升的，而只要是线性上升的状态，那么开源大模型绝对追不上闭源。虽说如果未来碰到性能墙了情况就另当别论，但目前的 Scaling Law 还能到哪，目前无从知晓。</p><p>例如，现阶段的独角兽公司，如 Moonshot AI、MiniMax，和老牌的互联网公司的大模型产品，如文心一言、讯飞星火、腾讯混元等均为闭源模型。而例如像智谱 AI 这样的独角兽半开源（同时有开源模型和商业模型）大模型厂商，其 CEO 张鹏也在接受记者“AI 科技评论”的<a href="https://www.leiphone.com/category/industrynews/jSahNemV4Wj2kcPy.html" target="_blank">采访</a>时表示：</p><blockquote><p>Q：内部怎么看待开源？</p><p>A：开源是智谱重要的事情，最新成果都是以开源的方式放出来，再有商业的版本。符合开源先行的理念。</p><p>Q：如何看待开源与商业的关系？</p><p style="margin-left: 0px;">A：开源的目的和商业不要混为一谈，开源和商业化是整个生态版图里很重要的两块，这两块是有连接的，可以说开源充当着商业化的桥梁。</p><p style="margin-left: 0px;">Q：开源模型越来越多，对智谱有哪些影响？</p><p style="margin-left: 0px;">A：开源的多了，大家就多了一些选择。可以不用商用的版本，客户直接用开源的版本就好了，但这件事有好有坏。好处就是说可以低成本、快速地切入使用上大模型，但开发者也知道社区支持这个事情永远是一个雷，开源大模型在安全性、稳定性等方面很难得到保障，这也是商业版本能够与开源版本并存的原因。商业版本可以提供更多的服务，更多的保障以及更多后续的服务，这些开源版本不一定有。</p><p style="margin-left: 0px;">Q：对于开源和闭源大模型，用户应该如何选择？</p><p style="margin-left: 0px;">A：得看他的目的是什么。如果他只是想做一些实验和尝试，那选开源模型没问题，<strong>如果想要在上面做一些商业化应用，我觉得大部分人还是会选择商业化版本，因为有保障，能够提供更好的服务。</strong></p></blockquote><p>可见，其内部对于 AI 的开源和闭源的关系认知为：</p><ol><li><strong>开源与商业化的分离</strong>：他们认为认为开源和商业化是两个不同的领域，它们各自承担着不同的角色和目的。开源主要是为了分享技术成果、推动技术发展和创新，以及建立社区和生态。而商业化则是为了提供更加稳定、安全的服务，满足特定客户的需求，并确保公司的持续运营和发展。</li><li><strong>开源作为技术发展的桥梁</strong>：智谱将开源视为连接技术发展和商业化之间的桥梁。通过开源，智谱能够吸引更多的开发者和研究者参与到大模型的创新和优化中来，从而推动整个行业的进步。同时，开源也有助于提升智谱的品牌知名度和影响力。</li><li><strong>闭源满足商业需求</strong>：智谱认为闭源的商业版本能够提供更加专业和定制化的服务，满足客户在安全性、稳定性、技术支持等方面的需求。这对于商业客户来说是非常重要的，因为他们需要确保使用的技术能够带来实际的商业价值。</li><li><strong>开源与闭源的互补性</strong>：开源和闭源并不是对立的关系，而是相互补充的。开源可以促进技术的快速迭代和创新，而闭源则可以确保技术的稳定性和安全性，满足商业化的需求。两者共同构成了一个健康、多元的技术和商业生态。</li></ol><p style="margin-left: 0px;">如果用一句话总结智谱 CEO 张鹏的观点：<strong>开源和闭源不是对立的，而是相互补充的，开源推动技术创新和生态建设，闭源满足商业化需求和提供稳定服务，共同促进大模型行业的健康发展。</strong></p><p style="margin-left: 0px;">除此之外，年初以来大热的 AI 公司 —— Moonshot AI （月之暗面）的创始人杨植麟先生去年十月接受极客公园的<a href="https://www.geekpark.net/news/325738" target="_blank">采访</a>时也提出：<strong>“闭源是通往超级 APP 的唯一通路”</strong>。同时其认为，<strong>大模型领域的开源本质上是 ToB 的获客工具</strong>。<strong>现阶段面向于C端的头部 Super App 一定是基于自研的模型做出来的</strong>，Moonshot AI 用闭源的方式做，是持续演化的过程。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/27/article/a6f1a852b913b6e61a37028c0f405f08.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Moonshot AI CEO 杨植麟汇报 Kimi Chat 产品</figcaption></figure><p style="margin-left: 0px;"><strong>综上三点，从目前的情况来看，大模型的闭源在一定程度上似乎是不可避免的。尽管开源大模型可以推动技术的创新和生态建设，但闭源模型更能满足商业化需求，提供稳定的服务。</strong></p><h2>结语</h2><p>写到这，或许已经对大模型厂商开源与闭源的未来有了初步的判断。现在，中国的 AI 公司可谓“百花齐放”，而更为关键的是，目前对于公众来说，AIGC 领域也是一片蓝海。因此，正如之前的“单车大战”、“充电宝大战”、“团购大战”等一样，对于现阶段的每个 AI 厂商和它的竞品来说，用户的数量和模型的质量永远是排在第一位的存在。</p><p><strong>因此，虽然可能令人有些沮丧，但闭源的大模型似乎现在看来确实更有前景，而开源的大模型获得真正的成功，或许在当下，只是一种奢望而已。</strong></p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87150</id>
            <title>Android 的无障碍服务，让每个人体验精彩世界</title>
            <link>https://sspai.com/post/87150</link>
            <guid isPermaLink="false">https://sspai.com/post/87150</guid>
            <pubDate></pubDate>
            <updated>Tue, 26 Mar 2024 08:21:30 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: Matrix, 无障碍服务技术, Android, 视觉辅助
<br>
<br>
总结: 文章介绍了少数派的写作社区Matrix推荐的无障碍服务技术，包括针对残障人士的视觉、听觉和肢体障碍提供的多样化支持，以及Google为Android开发的无障碍服务应用，如实时转写、实时字幕和声音增强器等，旨在让每个人的世界变得更加丰富多彩。 </div>
                        <hr>
                    
                    <p style="margin-left: 0px;"><strong>Matrix 首页推荐</strong>&nbsp;</p><p style="margin-left: 0px;"><a href="https://sspai.com/matrix">Matrix</a>&nbsp;是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。&nbsp;<br />文章代表作者个人观点，少数派仅对标题和排版略作修改。</p><hr /><p>如何帮助残障人士使用 Android 手机等移动设备？</p><ul><li>对于视觉障碍人士，怎样为其提供其他媒介支持？如语音辅助、触觉感知……</li><li>对于听觉障碍人士，怎样为其提供其他媒介支持？如视觉帮助……</li><li>对于肢体障碍人士，怎样为其提供其他媒介支持？如追踪技术……</li></ul><p>无障碍服务技术应运而生，提供多样化的方式，让每个人的世界变得丰富多彩。</p><figure class="image ss-img-wrapper image_resized" style="width: 464px;"><img src="https://cdn.sspai.com/2024/03/13/8ed2420bbb662b49f169eaed82c89cce.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>无障碍服务背后的技术</figcaption></figure><p>话不多说，让我们来一起看看 Google 为 Android 开发过哪些无障碍服务应用。</p><h2>听觉辅助 —— 看见爱的分贝</h2><h3>实时转写</h3><p>🔗 链接：<a href="https://play.google.com/store/apps/details?id=com.google.audio.hearing.visualization.accessibility.scribe">实时转写和声音通知</a></p><span class="ss-application">&nbsp;</span><p>「实时转写」功能，在对话的时候，可以实时查看手机屏幕，「看见」对方说了什么。</p><p>打开应用，即可开启一场视觉交流。任何发出的声音，都会呈现在屏幕上。同时贴心地在屏幕上提供了输入框，供用户来回复他人。</p><figure class="image ss-img-wrapper image_resized" style="width: 320px;"><img src="https://cdn.sspai.com/2024/03/13/02f4244f14a8bbd56250a6ba2998d1cf.gif" /><figcaption>实时转写</figcaption></figure><p>由于应用会实时监听周围的环境声音，因此它还有一个功能是「声音通知」，即：对敲门声、烟雾报警器声、婴儿啼哭等声音发送通知。</p><p>当然你也可以设置任何事件，该事件被提起时，手机会震动。比如，找不到手机时大喊一声 ——「我的圣剑……」🗡️</p><h3>实时字幕</h3><p style="margin-left: 0px;">这是在 Android 10 (Q) 及更高版本中引入的辅助功能，可以自动为在手机上播放的视频、播客、语音消息和音频消息生成实时字幕。实时字幕功能不仅帮助听障用户在无法听到声音的情况下查看媒体内容，也方便那些母语非英文的用户观看不带字幕的英文视频。</p><figure class="image ss-img-wrapper image_resized" style="width: 451px;"><img src="https://cdn.sspai.com/2024/03/27/f8db35c04236542a7d2bfd1c831966ad.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">实时字幕功利用本地机器学习模型来识别语音并生成字幕，它可以在没有互联网连接的情况下工作，保障了用户的隐私。</p><h3>声音增强器</h3><p>🔗 链接：<a href="https://play.google.com/store/apps/details?id=com.google.android.accessibility.soundamplifier&amp;hl=en_US&amp;gl=US">声音增强器</a></p><span class="ss-application">&nbsp;</span><p>要想完整体验声音放大器的功能，首先需要一副耳机：</p><ul><li>应用通过麦克风收集并放大外界声音，通过「降噪」、「增强微弱声音」、「增强低频/高频声音」功能让您能更好的倾听外界声音。</li><li>对于手机媒体声音，应用也提供「增强微弱声音」、「增强低频/高频声音」的功能。</li></ul><h2>视觉辅助 —— 探索不一样的世界</h2><h3 style="margin-left: 0px;">TalkBack</h3><p style="margin-left: 0px;">🔗 链接：<a href="https://play.google.com/store/apps/details?id=com.google.android.marvin.talkback&amp;hl=en_US&amp;gl=US">Android 无障碍服务组件</a></p><p style="margin-left: 0px;">TalkBack 这一应用是属于 Android 无障碍套件的一部分，无障碍套件还包括无障碍菜单和随选朗读：</p><ul><li>无障碍菜单：提供大型屏幕菜单，用于锁定手机、控制音量和亮度、抓取屏幕截图等等操作。</li><li>随选朗读：只需选择屏幕上的内容，系统就会大声把它们朗读出来。</li></ul><p>TalkBack 最引人注目的功能就是「语音反馈」。具体而言，TalkBack 会读出屏幕上的文本、按钮标签等界面元素，让视力障碍用户通过听觉的方式了解界面上发生的事情。</p><p>让我们想象这样一个场景 —— 视力障碍的人士，往往会通过触摸来使用手机：他们会在屏幕上用一根手指不断拖动并点按，让触摸焦点不断发生变化，TalkBack 会将焦点对应的界面元素朗读出来。对于文本元素，TalkBack 会朗读文本内容；对于按钮元素，TalkBack 不仅会朗读按钮标签，还会语音告诉用户如何能触发点击动作。</p><p>除了提供语音反馈以外，TalkBack 另一个优秀的功能是「导航辅助」。在屏幕上用一根手指点按，会激发语音反馈功能，那么怎样才能滑动屏幕？怎样才能触发点击操作？</p><p>和正常导航功能不同，TalkBack 后专为视力障碍人士设计了一套全新的导航手法。想象你是一个视力障碍人士，要了解屏幕上发生了什么，并想根据具体的情况，进行下一步动作。一定会先用一根手指，探索界面。通过点按，倾听 TalkBack 的语音反馈。如果倾听到当前聚焦点是一个按钮，并想要触发按钮，连续点按两下即可；如果想滑动屏幕，使用两根手指向上或者向下拖动即可滑动屏幕，在进行互动的时候，会有提升的叮咚声音；同样的，通过两根手指的滑动可以打开和关闭菜单栏。</p><figure class="image ss-img-wrapper image_resized" style="width: 320px;"><img src="https://cdn.sspai.com/2024/03/15/ead116843d1ab59c05237bb1aaa5c7c3.gif" /><figcaption>在 TalkBack 下浏览少数派应用</figcaption></figure><p>&nbsp;</p><p>TalkBack 还开发了更多的导航手势，如三指点按屏幕，能打开 TalkBack 菜单。除此之外，用户可以自定义手势，比如单指滑动、点按、长按、双指……以快速访问常用功能或应用。</p><p>TalkBack 提供多种多样的朗读控件单元，比如「控件」，朗读一整个控件对应的内容；「行」，一次朗读一行；「段落」，一次朗读一段；还有其他阅读方式，如「标题」、「字词」、「字符」、「链接」；除此之外，还能修改朗读的「语言」、「语速」。用三根手指滑动，就可以更改朗读控件的属性。</p><figure class="image ss-img-wrapper image_resized" style="width: 320px;"><img src="https://cdn.sspai.com/2024/03/15/d9f85eb973a857d2747fbbca0d2a585b.gif" /><figcaption>三根手指滑动更改朗读控件的属性</figcaption></figure><p>此外，还有更多功能，如「盲文键盘」。用户在屏幕上直接输入盲文点来输入文字，供了一种高效且直观的打字方式。</p><p>除了上述主动探索外，TalkBack 还会提供被动功能，会主动播报通知、时间、点亮等消息，对于开关键、音量键等的触碰也有对应的朗读。</p><p>总的来说，Android TalkBack 为视障用户提供了一种能够更加自主地使用智能设备的方式，提供数字可访问性和独立性，极大的消除了这些用户的数字鸿沟。</p><h3>Lookout</h3><p>🔗 链接：<a href="https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.reveal&amp;hl=en_US&amp;gl=US">Lookout</a></p><span class="ss-application">&nbsp;</span><p>如果说 TalkBack 是帮助视力障碍人士更好的使用手机，感受科技带来的方便，那么 Lookout 则更专注于探索外部世界，借助计算机视觉技术帮助视力障碍人士「看清」世界。它提供以下几种模式：</p><ul><li>「文字模式」：无需拍照会自动定位取景框中的文字部分。</li><li>「文档模式」：通过拍照，将图片中的文字提取出来并朗读（文字模式的静态版本）。</li></ul><p>在很多其他应用中都能看到上述两种模式类似的影子，接下来我们来看看几个更加有趣的模式：</p><ul><li>「探索模式」：尝试将取景框对准世界的任何一个角落吧，探索模式会将镜框中的世界用声音描绘出来。如，当你对准一个人时，它可能会描述出人物、眼镜、衬衣、牛仔裤、休闲鞋等关键字词。</li><li>「图片模式」：选择一张图片，描述出图片的内容。（最新的更新提供了基于人工智能支持的图像描述，以及通过语音和文本提问的能力，但国内尚不支持）</li><li>「货币模式」：对准钱币，它会快速可靠地识别钞票的数目（仅限美元、欧元或印度卢比），这对于视力障碍人士来说可是不错的交易小助手。</li><li>「食物模式」：通过扫描产品的标签或条形码就能快速了解产品。（仅限于一些国家，国内食品尚不支持）</li></ul><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/18/02fea67bac9abfe549b86aacf1f874db.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>在 Lookout 各种模式下「听见」视觉内容</figcaption></figure><h2 style="margin-left: 0px;">肢体辅助 —— 给我一个按钮 🔘，我能接触整个世界</h2><h3 style="margin-left: 0px;">开关控制</h3><p style="margin-left: 0px;">🔗 链接：<a href="https://support.google.com/accessibility/android/answer/6122836?hl=zh-Hans">开关控制</a></p><p>「开关控制」允许用户使用单个开关或按钮来遍历和选择屏幕上的元素。</p><p>对于因为运动受伤或者其他因素导致肢体使用存在障碍的用户，这款应用显得尤为方便。不需要触摸整个屏幕与手机进行交互，使用单个开关遍即可遍历和选择屏幕上的元素。</p><p>这里的开关可是广义上的哦！既可以是一种「物理设备」，例如 AbleNet、Enabling Devices、RJ Cooper 和 Tecla，可将按键信号发送到您的 Android 设备；也可以是「蓝牙键盘」的某些按键；当然，你也可以使用内置的「Android 设备上的按钮」<strong>，</strong>如音量调高和音量调低按钮。</p><figure class="image ss-img-wrapper image_resized" style="width: 591px;"><img src="https://cdn.sspai.com/2024/03/15/6cc78d2ece018bed368d2820bb67cc21.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>独立于手机的物理开关</figcaption></figure><p>这里，我们来看看一个非常典型的场景 —— 通过「面部动作 + 相机」作为开关。</p><ol><li>在开关控制设置中，打开「相机开关设置」，一共提供 6 个面部动作：「张嘴」「微笑」「挑眉」「向左看」「向右看」「向上看」。</li><li>选择某一个面部动作，为其制定操作。这些操作包括：<ul><li>相机专属操作：「暂停相机开关」</li><li>移动和选择：「选择」「上一项」「下一项」</li><li>对可突出显示的内容执行操作：「轻触并按住」「向前滚动」「向后滚动」</li><li>全局操作：「主屏幕」「返回」「通知」「快捷设置」「概览」</li></ul></li></ol><figure class="image ss-img-wrapper image_resized" style="width: 320px;"><img src="https://cdn.sspai.com/2024/03/15/19d5240ca76e08347823dd740bdfc357.gif" /><figcaption>使用相机开关进行井字棋小游戏</figcaption></figure><p>我们还可以对特定动作进行精细化的调整，包括「表情的幅度」、「动作保持的时长」等等。</p><p>另外，我们最好记得设置「重复的相机开关触发动作时长」，这样就可以防止表情时间保持过久带来的误触。</p><h3>Voice Access</h3><p>🔗 链接：<a href="https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.voiceaccess&amp;hl=en">Voice Access</a></p><span class="ss-application">&nbsp;</span><p>最近新上映的沙丘 2 里面，姐妹会利用「音言」控制他人的行为；这里，我们也能「音言」控制我们的手机。</p><p>一切操作都可以用声音来命令：打开应用程序、在屏幕之间导航、键入消息、编辑文本……</p><h2 style="margin-left: 0px;"><strong>小结</strong></h2><p style="margin-left: 0px;">科技造福人类，无障碍服务的出现，和随之配套的应用组件，展现了 Google 在 Android 设备上的人文情怀。</p><p style="margin-left: 0px;">我相信这次推荐的这几个小工具，能够帮助不同用户更好的使用 Android 手机，通过小小的手机窗口，探索大千世界。感谢阅读。</p><p style="margin-left: 0px;">&gt; 关注 <a href="https://sspai.com/s/J71e">少数派公众号</a>，解锁全新阅读体验 📰</p><p style="margin-left: 0px;">&gt; 实用、好用的 <a href="https://sspai.com/mall">正版软件</a>，少数派为你呈现 🚀</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87551</id>
            <title>更适合P人宝宝体质的学习方法：你根本不需要“自律”</title>
            <link>https://sspai.com/post/87551</link>
            <guid isPermaLink="false">https://sspai.com/post/87551</guid>
            <pubDate></pubDate>
            <updated>Tue, 26 Mar 2024 08:17:49 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 自学, 失败, 学习能力, 阅读
<br>
<br>
总结: 作者在自学web开发过程中遇到失败，意识到自己缺乏学习能力，通过阅读心理学和脑科学书籍，开始重新思考学习方法，强调体验式学习的重要性。 </div>
                        <hr>
                    
                    <p>这篇文章的诞生大概要从这里开始：</p><p>自学 web 开发，这应该是我在脱离应试教育体系后，第一次真正的想要学点什么东西，结果并不美好：我在半途而废和重新开始中循环，一次次怀疑自我过后，所剩无几的热情彻底熄灭，我宣布正式放弃。</p><p>这件事成为了一个问题，这是我第一次感受到个人能力方面的彻底失败，我明白失败的点不在于我学不会编程，而是我根本不懂怎么学习，我缺乏一种以前从来没研究过的自学能力。</p><p>我一直都喜欢阅读各类泛心理学书籍，以及各种和脑科学相关的知识，我觉得首先要研究明白自己，才能更好的利用外在工具。而这次失败事件过后，我开始了更加广泛的摄入，它成为了一个锚点，引导我在吸收各种材料的过程中，更关注那些怎么能帮我把这个问题彻底解决的领域。</p><p>终于，我脑海里慢慢有了答案的雏形，虽然依然属于半混沌状态，我想，把它写下来或许能更加清晰一些，也可以启发有类似问题的人。</p><hr /><h2>1. &nbsp;“体验式学习”的缺位</h2><h3>1.1 应试教育并没有教你怎么学习</h3><p>大学以前的阶段与其说教育，更像一种筛选机制，天生缺乏“做题思维”和那些，较真，“不上道”的人就会被筛掉（每天都在胡思乱想：为什么要上学，考个好大学到底有啥用？我学这些东西能干啥？）</p><p>我在这几年才搞明白应试和学习是两回事，两者的玩法完全不同。回想我的高中时期，我和那些网瘾少年的唯一区别就是我还能去上上课，因为我根本觉得应试体系这套毫无意义，在这个过程中我无法获得任何乐趣，进而导致我对学习本身产生了反感，而实际上我反感的是应试，但这种概念的混淆一直影响着我。</p><p>如果你足够幸运，进入大学，虽然你获得了前所未有的自由，但是因为之前的应试阶段根本没有给我们任何<strong>关于真正的学习尤其是自学一门技术</strong>的理念与经验，这种自由就白白浪费了，你需要的不是先要找自己该往什么方向发展，而是先要学习“学习本身”。</p><h3>1.2 重新认识学习这回事</h3><p>远古时期原始人狩猎采集，在自然环境艰难求生，其实就是人类学习模式的原型：</p><ul><li>实践、探索、做实验，不停试错，反复纠正，将动态的实验结果抽象为静态的概念内化。</li><li>经验丰富的老人带新手出去打猎，新手通过模仿老人，在具体情境中，重复第一种模式，遇到问题去问老人，直到自己成为下一个老人。</li><li>第一个老人怎么来的？回到第一种模式。</li></ul><p><strong>做实验和当学徒</strong>，试错和模仿，二者相互揉合，重复，产出结果，直到学徒成为下一个老师，整体是一个启发式的过程。</p><p>可以说学习就是这么回事，想学任何东西都绕不开这两种基本原型，人类发展至今依然如此。</p><h3>1.3 你的学习到底缺了什么？</h3><p><strong>情境和体验</strong>，两项对学习至关重要的因素，在长久以来应试体系中是严重缺位的。</p><p>而对于 MBTI 人格分类下的 P 型人格，尤其是 Se（外倾感觉，Extraverted Sensing） 为主副功能的 SP 人来说，“在体验中感受，在实践中领悟”正是他们这类人最适合的学习方法，直接上手，产出结果，而应试教育根本不为他们提供这些。</p><p>（夸张点说，让这些人待在教室，不如直接送他们去各种工厂玩一玩，看一看。当然这又涉及到职业教育这个话题，展开来讲又是一篇文章了，大概理解我想表达的意思就好）</p><p>而进入大学，大部分学科，教学安排依然是脱离实际生产环境，本质还是应试体系的延伸，而直到实习这个过程才算得上一种真正的学习（因为实习符合我们上面谈到的学习原型）。</p><p>接下来的问题是所有人都同样需要面对的：</p><p>很多人直到实习后，工作后，才真正学会了自己工作所需的技能，另一些倒霉蛋也正是在实际情境中才发现自己根本不适合这个学科，这份工作。</p><p>这就是一个悖论：你无法通过工作之外的内容来胜任一份工作。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/25/02cf2372b1f04d4163d6f55c0ef41640.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>依然以应试思维试图解决这个问题的人，都没有认真审题。</p><hr /><h2>2. 体验式学习的核心</h2><p>问题的关键在于，要学什么，你就要把自己放入学习目标产生实际效用的情境中，并且最好能立刻看到目标对应的结果，拿到反馈，举例：</p><h3>学编程</h3><p>❌错误做法：</p><p>我要学习 web 开发 &gt; 某某大师总结的 roadmap（学习路线图） &gt; 天书般的知识体系 &gt; 欺骗自己（我们遇到什么困难，都不要怕！微笑着面对它，加油，✊🤓奥利给！）&gt; 3日后劝退</p><p>✔️正确做法：</p><p>先搞一个简单的个人网站 &gt; 搜索引擎 or GPT 搜怎么做一个个人网站 &gt; 跟着攻略敲 &gt; 遇到问题 &gt; 返回前面继续问 &gt; 重复以上步骤 &gt; 最后做出来一个很垃圾很丑陋的网站，但是能跑，哇好开心 &gt; 我怎么把这个网站变得好看酷炫一些 &gt; 重复以上步骤</p><h3>学英语</h3><p>❌错误做法：</p><p>我要学英语 &gt; XX机构总结的语法攻略，单词大全，某UP主总结的音标套路…… &gt; 多线操作难以持续，一段时间后放弃</p><p>✔️正确做法：</p><p>从最基本的高频核心单词（如牛津3000词）入手，不学语法，不管音标，只背意思和发音 &gt; 输入大量语料，开着字幕看自己喜欢的简单英语视频，听英文歌，用英语和 GPT 聊天…… &gt; 成果：看懂个五六成，造句挤牙膏，单词有的忘掉 &gt; 忘了的词巩固，不懂的新词查，继续输入输出 &gt; 更新成果 &gt; 重复以上步骤</p><h3>学运营</h3><p>❌错误做法：</p><p>我要学运营 &gt; 价值998的全套手把手教程 &gt; 被XX大佬拉入“核心群”，发来一堆批量生产的过气录播课 &gt; 试了以后发现没用 &gt; 质问大佬，大佬顾左右而言他，后面装死不回 &gt; 惊呼自己被割韭菜</p><p>✔️正确做法：</p><p>直接注册一个号 &gt; 明确自己大概要做什么方向 &gt; 找一些这些方向的头部号，看它里面最好的那几篇内容，分析它为什么好 &gt; 根据分析，模仿一篇同样套路的，然后直接发出来看看 &gt; 观察评论和数据反馈 &gt; 根据结果总结下一次可以怎么提高 &gt; 重复以上步骤</p><h3>总结</h3><p>第一种学法为什么劝退？第二种为什么有效？</p><p>因为第一种学法是脱离情境的，学和做是分离的，而且是大而全式的完美主义思维，缺乏明确的最小目标。</p><p>而第二种学法符合 1.2 中提到的学习原型，自学，独立思考，有大量的试错和做实验，快速模仿迭代，内化实验结果。而第二种学法的每个步骤，可以按照这种模型继续划分为更小的步骤。</p><p>考虑到现在请一个有货的老师需要付出很高成本，用搜索引擎和 GPT 其实是可以充当这一身份，每次搜索就是提问一次，GPT 配合相关 Prompt 更是能直接扮演。（在运营这个案例里，市面上大量头部帐号也是你的老师，可以这么说，能让你模仿的对象都是老师）</p><p>这是一个“结晶式”的过程，你可能会遇到各种意外情况和问题，问题用搜索引擎和各种“老师”来解决，你的知识体系就像结晶体，不停在原有的基础上东拼西凑，越来越复杂，这个过程中你需要退回去剔除掉一些没用的多余的晶体，或者修复之前的漏洞，来让这个结晶体变得完善。</p><p>这个结晶体是抽象后的概念和实践中的经验形成的混合体。</p><p>简言之，在以学会具体技能为目的的学习中，没有“学会了再去做”这回事，如果一个人学会了那他一定也会做，学和做就是一回事。</p><hr /><p>对体验式学习有一定了解后，我们来讲一些具体问题：</p><h2>3. 为什么你的学习目标永远实现不了</h2><h3>3.1 因为你定的目标根本无法实现</h3><p>“学会编程”“学会英语”式的目标，根本就不是目标，仔细想想，“会”的标准是什么？</p><p>是掌握世界上所有的编程语言？背下来所有的英语单词？这个范围可以无限扩大下去。</p><p>“学会XX”就是一种<strong>幻想</strong>。</p><p>而幻想根本没有<strong>具体实现的方法</strong>。</p><h3>3.2 什么是有效目标</h3><p>让我们把白日梦变得现实一点，越现实越好，<strong>越小越好，最好小到毫不费力</strong>。</p><p>“如何学会编程？”缩小。</p><p>“学会编程中的 web 开发领域？”范围太大，依然是做梦，缩小。</p><p>“如何做一个个人网站？”做一个网站想想就复杂，到底怎么做？缩小。</p><p>把它分解为如下最小目标：</p><ol><li>搜索“怎么零基础做一个个人网站”</li><li>在结果中挑一个排版顺眼的往下看</li><li>代码部分你一个字都看不懂，那就从第一个不懂的关键词开始查</li></ol><p>第一个关键词：“VSCODE编辑器”</p><p>回到第一步，搜索，下载安装编辑器，目标完成，回去刚才的页面接着往下查，遇到问题，回到第一步，重复N次。</p><p>同样，“学习英语”可以缩小为：</p><ol><li>先掌握核心词汇</li><li>今天先掌握20个词</li><li>掌握牛津3000词中的第1到第5个词</li><li>背下来第1个词的意思和发音</li><li>在每个词上重复这个过程</li><li>当词汇量达到1000个，开始输入大量现实语料，同时输出（同样按照最小目标原则进行步骤分解）</li><li>继续背单词</li><li>重复N次</li></ol><p>（这个举例可能不是太严谨，在实际操作中，如果你有一定英语基础，输入和输出可以和背单词同步进行，在这里只要领会分解目标的操作即可）</p><p>总结就是，把一个目标分解到不能再分解为止，简单到毫不费力也可以完成，这样形成的才是有效目标。</p><p>这就是<strong>最小目标原则</strong>，也是如何真正制定有效目标的方法。</p><p>补充：每一个目标，都是能够对现实产生实际效用的，而所有目标完成后，一定也是能产生一个能够实现具体目的的结果：做完一个个人网站，能够开着字幕完整看懂一个视频，实现一个用来批量操作电子表格的 python 脚本……</p><p>过去我们学习为什么经常半途而废，就是因为我们的学习结果无法立刻反映在现实世界，这是违反人类本能的学习方式。婴儿将一个物体移动位置后，马上就会产生愉悦的神情，因为他发现自己可以改变世界，人类天生就有一种“作为原因的快乐”，我们对生活的掌控感，认为自己能够产生影响，愿意去做工作，也源于此。</p><p>而我们需要在自己的学习中加入“作为原因的快乐”。</p><h3>3.3 克服完美主义：切忌大而全</h3><blockquote><p>Done than perfect</p></blockquote><p>你是否每次学习一个项目的开始，就搜罗各种攻略停不下来，想要找到一个覆盖一切的解决方案，最后大把时间耗在构建这个大而全的学习方案，然后烂尾？</p><p>让我们回顾一下前面提到的，要真正掌握一门技术，跨越“会”与“不会”的真正信息就藏在“做”的过程，这个信息你不做是无法搜集到的，这就意味着根本不存在完美的学习方案。</p><p>说白了，你不做，根本连什么是“好”都不知道，何谈完美？</p><p>因此，在计划方面，无需纠结太多，只要知道自己最后要达成什么目的，然后按照每个最小目标去做就好了。</p><p>“怎么下载安装VSCODE？”就是一个计划，这种规模的计划对于你而言足够了，完成一个，再定下一个，渐进式提高，每次提高的内容也要符合最小目标原则。</p><blockquote><p>再次强调，足够小，小到毫不费力。</p></blockquote><p>在做的过程中，也会有完美主义的心态阻碍学习，完美主义者经常陷于这样一种困境：</p><p>必须要用一种“标准全面优雅”的解决方式，去解决学习中遇到的某个问题，即使答案就在眼前，还去浪费大把时间找那个完美答案，最后问题也没有得到解决，心态也磨没了。</p><p>还是我们前面提到的，作为一个初学者，<strong>能够解决问题的方案就是最好的方案</strong>。</p><p>在这个过程中遗留的小问题或者不完美的解决方案，就是另一个新计划的开始，所以先把它记下来，完成现在的任务，再去解决。</p><p>从0到1，从1到2，是现实。</p><p>一次从0到100，是做梦。</p><hr /><h2>4. P人宿敌：拖延、效率与自律</h2><h3>4.1 你也许并不需要日程表</h3><p>番茄钟？每天细化到分钟的时间日程表？如果这些东西对你没用，我来介绍另一种模式：</p><p>以一个半小时为周期，利用<strong>整段时间来集中进行任务</strong>，同时引入一段<strong>热身时间</strong>进入状态</p><blockquote><p>20 分钟热身期 + 1 个小时左右的专注期 = 一个半小时完整学习周期</p><p>以一个半小时为基准，每次的总时长和热身期可以根据具体情况增加/缩短。</p></blockquote><p>在热身期，做一项和你接下来要做的工作相关，能够迅速投入，且非常简单的活动。</p><p>例如，你要继续完成一个编程项目，你可以先打开算法题网站，挑一道初中级难度题，限定时间20分钟，不管做没做完，时间一到，立刻停止，回到那个主要项目。你会发现你已经进入编程的状态了，接下来就是利用整块时间高效学习。</p><p>就像健身开始前做的那些热身活动，大脑进入活跃状态也需要启动。</p><p>一天下来，根据具体情况，只需要让自己完成 1-3 个周期，剩下的时间休息放松。</p><p>Q：为什么是一个半小时？</p><p>A：因为科学研究结果表示，这是成年人能维持高度注意力的平均大概时长。可以根据自身情况适度调整，从一个小时先练起。</p><p>Q：热身期的作用？</p><p>A：我们从一个任务切换到另一个任务，都需要一个“切换期”，每次切换都要消耗精力进入新的工作模式，热身的目的就是为了快速度过这个切换期。</p><p>Q：优势在哪？</p><p>A：所有需要创造力的活动都需要大量整块的专注时间，学习，编程，绘画，文学创作等等都需要，根据上一个回答里的任务切换理论，番茄钟这种东西就是在主动打扰自己，这样中途不需要考虑别的事情，所有周期完成后，今天就结束了，心智负担小。</p><p>Q：有用吗？</p><p>A：我自己就在用，有用，你可以试试，反正不要钱。</p><h3>4.2 拖延的本质，以及如何干掉拖延</h3><p>拖延是完美主义的产物，前面我们讲了最小目标原则和完美主义的应对方法，综合应用处理拖延问题，我们可以这样：</p><h4>试试“只写一个字”</h4><p>拖延的本质，在于我们把从0到100这个过程当成了一个必须要一次性完成的任务，我们可以回忆一下每次拖延的时候在想什么：</p><blockquote><p>这个任务要完成的话，要这样，再那样，然后这样……中间还可能遇到 A 情况， B 情况， C 情况……想想就烦，后面再说吧</p></blockquote><p>但是如果我们要做的只有这些：</p><blockquote><p>打开 word，只写一个字，任务完成</p></blockquote><p>假如你打开了电脑，写了一个字，trust me，你会再写一百个字。</p><p>只要“不做”切换到“做”，你其实就已经把拖延干掉了，在“做”的状态待一会，度过热身期后，你已经进入了任务状态，不会再去想拖延。</p><p>开始我们提到了，拖延是完美主义的产物，因为拖延者在心中构想的那个结果就是一种达不到的完美状态，如果要实现它不是0到100，而是0到无穷，是幻想，幻想是没有实现路径的。</p><p>而实现只写一个字，毫不费力。</p><p>针对工作中的完美主义造成的拖延，在这里我再提供一种方法：</p><p>假设你心中的结果是100分，下次你可以告诉自己：做到80分，我就停手。然后把这个80分的成果提交，自己继续完善那个达不到的100分。</p><p>你最后会发现：80分的已经足够好。</p><p>如果想彻底根治，还有一种方法，下次专门交一个60分的成果，然后观察别人的反应，你会大吃一惊。</p><h3>4.3 太容易分心怎么办？</h3><p>太多文章教你“怎么用一个APP管住另一个APP”，我只想说一句：</p><blockquote><p>直接卸载所有的信息流APP，最简单且唯一有效的方式，I mean it</p></blockquote><p>你对抗的不是一个APP，而是这个世界上最聪明的算法工程师、最懂人性的产品经理，他们比你更懂你的弱点，刷信息流会上瘾，这件事本身就是设计好的，唯一解法：退出这场不可能获胜的对抗。</p><p>戒烟的最有效方法就是不抽烟，而不是电子烟或者别的替代物。</p><p>不抽烟你不会死，反而活得更久。不刷微博你啥也不会错过，只会更快乐。</p><p>这就是彻底解决问题的方案，注意力也是你身体健康的一部分。</p><p>如果真的有大事发生，不用看新闻你也能知道。世界上99%的事其实都不受你的控制，如果你整天去纠结，只能徒增焦虑，改变不确定性的最好方式就是去做事，剩下的交给命运。</p><p>根据林迪效应，久经考验流传下来的那些就是好东西。所以，在这个信息垃圾满天飞的时代，当周围的人沉迷那些新东西时，你更应该去回看那些经典著作，稳赚不赔。</p><p>如果你能做到，那注意力的问题其实已经解决，剩下这些就属于锦上添花了：</p><p>环境方面，保持一个清爽的桌面，不要放和学习无关的东西。专注期间手机保持静音丢一边去，相信我你不是啥大明星，消失一个半钟头不会有任何问题。</p><p>如果你需要音乐进入状态，选择柔和的纯音乐，任何歌词都会吸引人的注意力，推荐那种1个小时起步的钢琴曲合集，选一个你最喜欢的，以后每次都听这个。</p><p>在学习中保持专注和冥想训练的原理一样，每次察觉到自己分心，就把注意力拉回来，继续任务，全力保持一个完整周期。多次练习，分心的次数会越来越少，心流状态在整个周期的占比也会增加。</p><p>最后，既然提到冥想，建议你可以从每天5分钟开始，<strong>真的有用</strong>。</p><h3>4.4 怎么提高效率？</h3><p>如今市面上充斥着各种“一周学会python”，“半个月减值增肌”，“完美PPT速成攻略”，光打出这几个名字都让我感到那股子焦虑劲儿。</p><p>《刻意练习》中提到，那些所谓的天才，也是练的最多的人，天才也是靠堆时间堆出来的，学习这件事本就如此，毫无他法。</p><p>事先就把心态放长远一些，慢就是快。一天完整走完每个周期，效率自然不成问题。</p><p>只要完成了你所有的最小目标，就是最高的效率。</p><p>有没有发现我们根本没提到“自律”这个词？自律其实也是一个“完美主义词”，因为它无法被量化，如何评价一个人有多自律？这个人的自律值为99？现在你明白这种东西有多荒谬，它就是为了引起你的焦虑，所以别再想啥自律不自律了。</p><hr /><h2>5. 学习很重要，休息更重要</h2><blockquote><p>如果你不知道自己需要什么，你可能需要睡觉</p></blockquote><p>睡眠为什么重要？因为在睡眠中你依然在学习，白天那些问题，会进入大脑的“后台程序”，这是突破的关键。很多著名科学家都有一觉醒来，某个苦思冥想的问题直接顿悟的体验。</p><p>不管你是不是夜猫子，每天都要按时准点睡觉。入睡前一个小时调暗房间亮度，看一些让大脑安静下来的材料，如一些讲座播客等，文学类书籍也可以。</p><p>对于那些听音乐学习的人，入睡之前放和白天一样的音乐。</p><p>如果中午困了，去睡觉，但不超过30分钟。</p><p>任何形式的运动都对学习有促进作用，每天爬楼梯，走路就是一种锻炼，效果显著。</p><p>如果你懒得去健身房，每天多走走路吧。</p><p>白天多运动也有利于夜晚的睡眠质量。</p><hr /><h2>最后</h2><p>想不出结语咋办？那就不写。这篇文章我改了两天，很多的点我还想重写，但我决定直接把它发出来，80分就够了，对抗完美主义的案例，peace</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87541</id>
            <title>丝滑的 iOS 进度条解锁交互到底是怎么制作的？</title>
            <link>https://sspai.com/post/87541</link>
            <guid isPermaLink="false">https://sspai.com/post/87541</guid>
            <pubDate></pubDate>
            <updated>Tue, 26 Mar 2024 07:38:07 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: SwiftUI, 渐变光, 物理, 遮罩
<br>
<br>
总结: 本文介绍了如何使用 SwiftUI 实现吉光卡片 App 底部彩蛋入口的动画效果。重点讲解了渐变光的视觉把控、物理效果的模拟以及遮罩的应用，帮助读者了解动画实现的原理和细节。通过叠加多层渐进阴影和调整透明度、扩散大小来模拟真实世界的光效，同时使用遮罩来裁剪多余部分，使设计更加精准。通过这些技巧，读者可以学习到如何利用 SwiftUI 实现流畅的进度条动画。 </div>
                        <hr>
                    
                    <p style="margin-left: 0px;">原文首发于：<a href="https://www.bmms.me/blog/silky-smooth-ios-progress-bar-interaction-explained">丝滑的 iOS 进度条解锁交互到底是怎么制作的？</a></p><p style="margin-left: 0px;">这篇是拆解吉光卡片 App 底部彩蛋入口的动画实现。将这个入口发到社区后，很多小伙伴表示对实现原理比较感兴趣，于是便有了这篇文章，我将从思路和原理入手，带大家抽丝剥茧地带大家了解这个动画是如何实现的。新手可以通过这个文章，了解实现的原理，老手可以看代码来更深入了解实现的细节。</p><figure class="image ss-img-wrapper"><img alt="而立之年的首页横幅" src="https://cdn.sspai.com/2024/03/25/article/72ff063a0c0dfa61adcb627f966808b4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">我将尽可能详细地拆解 <a href="https://apps.apple.com/app/apple-store/id6463467787?pt=126475836&amp;ct=bmms&amp;mt=8" target="_blank">吉光卡片</a>小彩蛋的实现原理，确保大家可以理解并掌握其中的所有步骤。动画效果使用 SwiftUI 来实现，所以你可以看到其强大的功能和灵活性。我希望你们会喜欢这个教程，并从中学到新的技巧和知识。我会贴上必要的部分代码块，有兴趣可以自行查看或忽略。</p> <p>&nbsp;</p><h2 style="margin-left: 0px;"><strong>渐变光</strong></h2><p style="margin-left: 0px;">在这个动画中，极其重要的点在于对渐变光的视觉把控。关键的细节在于如何通过模拟物理世界点光源的扩散与衰减效应模拟出真实世界的感觉。另外就是在光的边缘，如果通过遮罩层对光进行裁切，保证光不会被发散出去。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/25/3934a3fab1f24fde34bfb087be71a638.gif" /><figcaption>渐变光进度条加载展示</figcaption></figure><h3 style="margin-left: 0px;"><strong>物理</strong></h3><p style="margin-left: 0px;">通过叠加多层的渐进阴影，可以得到一种更柔和，更接近物理效果的散射光。这种效果就像是光从光源发出后，边缘会逐渐变得柔和，而远离光源的光则会逐渐散开，给人一种非常自然和真实的感觉。</p><figure class="image ss-img-wrapper"><img alt="当时在家里拍视频的场景" src="https://cdn.sspai.com/2024/03/25/article/3fc20d6e6e50b349156b075e231d8205.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>&nbsp;</p><p style="margin-left: 0px;">一般来说，我们可以通过叠加三层或更多层的渐进阴影来达到这种效果。渐变层的透明度、扩散大小，阴影数值没有太多的规律可言，关键还是尽可能还原物理世界的规律，适当的调整各层的扩散大小和透明度数值，通常，扩散小的层次透明度数值大，扩散大的层次透明度数值小，通过这样的非线性叠加，可以得到非常理想的效果。</p><figure class="image ss-img-wrapper"><img alt="当时在家里拍视频的场景" src="https://cdn.sspai.com/2024/03/25/article/c51f476d5ab7b93b264fe94f5d9b290b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><pre class="language-null"><code>.shadow(color: .accent.opacity(0.3), radius: 80)
.shadow(color: .accent.opacity(0.5), radius: 60)
.shadow(color: .accent.opacity(0.6), radius: 20)
.shadow(color: .accent.opacity(0.7), radius: 8)</code></pre><h3 style="margin-left: 0px;"><strong>遮罩</strong></h3><p style="margin-left: 0px;">在 SwiftUI 中，如果有一些多余的部分需要去除，我们可以采用一个非常简单的方法，就是通过加入一个矩形的遮罩来达到我们的目的。这个矩形遮罩的作用就是将那些我们不需要的、多余的光线部分进行裁剪，从而使得我们的设计更加精准和符合我们的期望。这种方法不仅简单，而且效果非常好，可以帮助我们在设计中达到更好的效果。</p><figure class="image ss-img-wrapper"><img alt="当时在家里拍视频的场景" src="https://cdn.sspai.com/2024/03/25/article/9bf1a14f47f2fe00c373d53ff34f1f2e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><pre class="language-null"><code>.contentShape(Rectangle())</code></pre><p>&nbsp;</p><h2 style="margin-left: 0px;"><strong>进度条的实现</strong></h2><h3 style="margin-left: 0px;"><strong>百分比</strong></h3><p style="margin-left: 0px;">在 SwiftUI 中，GeometryReader 它提供了几何坐标读取的功能，用来读取该空间中的大小和位置信息，这是一个非常有用的工具。利用这个工具，我们可以在最外层添加一个撑开的宽度修饰器，这样我们就可以获得一个动态宽度的进度条。具体来说，这个进度条的宽度会根据我们设置的参数动态地进行调整，非常灵活且易于使用。</p><figure class="image ss-img-wrapper"><img alt="当时在家里拍视频的场景" src="https://cdn.sspai.com/2024/03/25/article/2d257406d9a99323e54d95f5b61b9cfe.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3 style="margin-left: 0px;"><strong>宽度变化</strong></h3><p style="margin-left: 0px;">此时这里的 progress 是一个百分比，它可以表示进度条的完成程度。例如，如果我们设置每隔 0.01 秒增加 0.01，也就是 1% 的 progress，那么要跑完整条进度条就需要 0.01 x 100 = 1秒。这样一来，我们就可以根据需要设置进度条的速度，让它以我们希望的速度进行加载。但是这样我们可能会得到一条线性增长的进度条，这可能并不是我们想要的效果。</p><pre class="language-null"><code>@State private var progress: CGFloat = 0
@State private var timer: Timer?
@State private var isProgressCompleted: Bool = false

var body: some View {
    GeometryReader { geometry in
        RoundedRectangle(cornerRadius: 12, style: .continuous)
            .frame(width: isProgressCompleted ? geometry.size.width : geometry.size.width * progress)
    }
    .frame(maxWidth: .infinity)
}</code></pre><h2 style="margin-left: 0px;"><strong>蓄力的实现</strong></h2><p style="margin-left: 0px;">这个方法实现了三个功能，这三个功能都是在用户使用过程中非常重要的：</p><p style="margin-left: 0px;">松手的时候会归位。这是一个贴近物理的反馈，因为它可以保证在用户松手后，进度条会自动归位，不会对其他操作产生影响。</p><p style="margin-left: 0px;">渐进式的宽度增量。通过这个功能，我们可以看到进度条的宽度是逐渐增加的，而不是突然增加，这可以带来更好的用户体验。</p><p style="margin-left: 0px;">具有增量的震动提示。这个功能可以在进度条增加的同时，给用户提供震动提示，增加用户的使用感觉。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/25/77b856c4fcfa13fa5e537ae26940013d.gif" /></figure><h3 style="margin-left: 0px;"><strong>加速度</strong></h3><p style="margin-left: 0px;">那么，怎么去获取到一条有加速度的更接近物理蓄力感觉的进度条呢？我们采取了一个简单的方法，就是设置了一个常量增量 acceleration 为 0.00007。这样，每次增加的量就不同，且呈指数型增加。所以在完成第一步的时候，progress 就变成了 0.007% + 0.07% = 0.077%，所以可以看到宽度的变化最开始是缓慢的，随着不断的相加，这个进度条就只需要 1.72秒 就可以从 0% 到 100%。</p><figure class="image ss-img-wrapper"><img alt="当时在家里拍视频的场景" src="https://cdn.sspai.com/2024/03/25/article/932709050bd78c3e50c5dafc48183d26.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p style="margin-left: 0px;">进度条只要不满足到 100% 的条件，isProgressCompleted 这个条件就是 false，也就会执行重置计时器，这就是 resetProgress() 这个方法所要做的事情，让进度条回归到 0。假如进度条达到了 100%，那么 isProgressCompleted 就会是 true，那么循环就结束，用户可以看到进度条的完整过程。</p><h3 style="margin-left: 0px;"><strong>震动</strong></h3><p style="margin-left: 0px;">震动提示是通过 UIKit 里面来实现的，有不同的挡位的震动可以选择，这里选择了一个比较轻的挡位 soft。这里的方法其实跟宽度的加速度增量类似，也是一个递增的方法且跟随进度条的宽度变化而变化的。当进度超过 0.1%，会产生一次震动，根据上面第一个 10 毫秒才变化了 0.07% 的进度，可以发现是一个先慢后快的进度反馈，跑完震动条大概会震动 75 次，这样的设计可以增加用户的使用感觉，提升用户体验。</p><p style="margin-left: 0px;">这里有个值得分享的，震动的频次不能过高，我一开始设置的是只要的宽度发生变化，就震动一次，首先是会震动到你手麻，其次是发现震动反馈有些许卡顿。所以才重新设置了震动阈值，来“降低”震动的频次。</p><figure class="image ss-img-wrapper"><img alt="当时在家里拍视频的场景" src="https://cdn.sspai.com/2024/03/25/article/87849d4c2731d055ec7855766f5b2d80.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><pre class="language-null"><code>    func startProgress() {
        // 取消之前的计时器
        timer?.invalidate()
        isProgressCompleted = false // 重置进度完成状态
        var increment = 0.0007 // 初始进度增量
        let acceleration = 0.00007 // 进度增量的加速度

        let feedbackGenerator = UIImpactFeedbackGenerator(style: .soft)
        feedbackGenerator.prepare()

        // 定义震动的阈值，例如每增加1%时触发一次
        let vibrationThreshold: CGFloat = 0.01

        // 记录上次震动的进度
        var lastVibrationProgress: CGFloat = 0

        // 创建一个新的计时器
        timer = Timer.scheduledTimer(withTimeInterval: 0.01, repeats: true) { [self] timer in
            // 更新进度条的进度
            self.progress += increment

            // 增加下一次的进度增量，模拟加速效果
            increment += acceleration

            // 当进度超过上次震动进度+阈值时，触发震动
            if self.progress &gt;= lastVibrationProgress + vibrationThreshold {
                feedbackGenerator.impactOccurred()
                lastVibrationProgress = self.progress
            }

            // 确保进度不会超过1
            if self.progress &gt;= 1 {
                // 当进度条完成时，保持进度状态，不重置
                timer.invalidate()
                self.progress = 1
                self.isProgressCompleted = true // 标记进度完成
            }
        }
    }

    func resetProgress() {
        // 取消计时器并重置进度条
        timer?.invalidate()
        progress = 0
        isProgressCompleted = false // 重置进度完成状态
    }</code></pre><p>&nbsp;</p><h2 style="margin-left: 0px;"><strong>长按手势</strong></h2><h3 style="margin-left: 0px;"><strong>序列化手势/手势链</strong></h3><p style="margin-left: 0px;">开始和重置的两个方法是要搭配手势来实现的，这里通过 sequenced 来完成前后两件事情，一件是长按开始，另外一个未达条件，去归零进度条。如果只是往上叠手势，这些手势其实是异步的且权重是一样的。而手势其实跟图层是一样的，是可以设置优先级和前后顺序的。下面的例子是一个同步的例子。</p><figure class="image ss-img-wrapper"><img alt="当时在家里拍视频的场景" src="https://cdn.sspai.com/2024/03/25/article/9023d488c9aab4a10d5fc385e9d2e873.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><pre class="language-null"><code>   LongPressGesture(minimumDuration: 0.5)
            .onEnded { _ in
                withAnimation {
                    if !isProgressCompleted { // 如果进度未完成，则开始
                        startProgress()
                    }
                }
            }
            .sequenced(before: DragGesture(minimumDistance: 0))
            .onEnded { _ in
                withAnimation {
                    if !isProgressCompleted { // 如果进度未完成，则重置
                        resetProgress()
                    } else {
                  //
                    }
                }
            }</code></pre><h2 style="margin-left: 0px;"><strong>矩形缩放</strong></h2><h3 style="margin-left: 0px;"><strong>神奇移动/Magic move标注</strong></h3><p style="margin-left: 0px;">矩形的缩放是通过一个强大的方法 matchedGeometryEffect 来实现的。这个修饰器的使用实际上是非常简单直接的，它与AE（After Effects）里面的动画标记效果有些类似。在使用这个修饰器时，你只需要定义动画的初始帧和结束帧，然后它会自动处理其他的帧，也就是中间的过渡帧。这种方式可以让动画过程看起来非常流畅自然。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/25/cb31214e8e5e50fd44127fbdc46d26a7.gif" /></figure><p style="margin-left: 0px;">为了能够准确地识别这两个帧，SwiftUI 提供了一种属性包装器，叫做Namespace。Namespace的主要作用就是给初始帧和结束帧进行唯一标识，保证动画的正确性。除此之外，我们还可以利用ifElse 的语句来实现元素的切换。比如，我们可以让一个元素在某个时刻消失，然后另外一个元素出现，而在这个过程中，所有的动画变化都会被自动补齐。这就是说，你不需要手动去处理每一帧的变化，所有的过程都是自动的，极大地方便了开发。</p><figure class="image ss-img-wrapper"><img alt="当时在家里拍视频的场景" src="https://cdn.sspai.com/2024/03/25/article/c6ce150c34254c13601589a29cbfda5f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><pre class="language-null"><code>@State private var scaleIntoOneCard = false // 缩成一张卡片
  @Namespace private var shapeTransition // 几何动画切换
  
   if !scaleIntoOneCard {
         progressbar()
           .matchedGeometryEffect(id: "card", in: shapeTransition)
   } else{
				RoundedRectangle(cornerRadius: 4)
				   .matchedGeometryEffect(id: "card", in: shapeTransition)
   }</code></pre><p>&nbsp;</p><h3 style="margin-left: 0px;"><strong>一张变六张</strong></h3><p style="margin-left: 0px;">在上面的描述中，我们提到了一张卡片，这张卡片已经没有用处了，所以我们直接让它消失。但是，这个过程对用户来说是不可见的。实际上，在卡片消失的0.5秒前，我们已经提前偷偷地把后面的六张卡片用ZStack堆叠起来了。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/25/76c42eeefd37a737403c9f8e28c48705.gif" /></figure><p style="margin-left: 0px;">这种堆叠方式其实就是我们熟悉的初始帧和结束帧的逻辑，其中一个是前后堆叠的ZStack，另一个是水平堆叠的HStack。所有的变化动画都是由matchedGeometryEffect来完成的。每一张卡片的边际依次从1到6，这样就能形成一个良好的视觉效果。在这个过程中，我们需要注意的一点是，id前后一定要一一对应，否则会造成混乱。这是一个非常重要的细节，可能会导致整个动画效果出现问题。</p><figure class="image ss-img-wrapper"><img alt="当时在家里拍视频的场景" src="https://cdn.sspai.com/2024/03/25/article/0985d37f8ad0b23c80924806cf0bf4e1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><pre class="language-null"><code>	 ZStack {
            ForEach(0 ..&lt; 6) { index in
                card()
                    .matchedGeometryEffect(id: "card\(index)", in: shapeTransition) // 动画标记
            }
        }</code></pre><pre class="language-null"><code>     HStack {
            ForEach(0 ..&lt; 6) { index in
                card()
                    .matchedGeometryEffect(id: "card\(index)", in: shapeTransition)
            }
        }</code></pre><p>&nbsp;</p><p style="margin-left: 0px;">所以总结来说就是，长按拉满进度条后，立刻变成一张卡片，然后单张卡片消失，接着一张卡片变成六张卡片，六张卡片消失，出现密码输入框。这个动画的过渡效果其实可以类比 keynote 里面的 magic move 的效果。</p><h2 style="margin-left: 0px;"><strong>输入框</strong></h2><h3 style="margin-left: 0px;"><strong>等宽数字</strong></h3><p style="margin-left: 0px;">类似验证码的输入框，是可以通过六个 Textfield 来实现的，然后再通过 Focusfield 来实现焦点的游走，但是我懒。后面的输入框背景是假的，我用的是一个完整的 textfield。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/25/27a2f3cfac7d24cf4b42a296bf021735.gif" /></figure><p style="margin-left: 0px;">通过控制字体的字体间距来实现，这个时候一定要设置等宽的数字，保证每个间距都是一样的。</p><figure class="image ss-img-wrapper"><img alt="当时在家里拍视频的场景" src="https://cdn.sspai.com/2024/03/25/article/223fc2325133058e95b8cfb92e1a7edd.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><pre class="language-null"><code> .kerning(20)
 .font(.system(size: 13).weight(.bold).monospaced())</code></pre><h3 style="margin-left: 0px;"><strong>晃动</strong></h3><p style="margin-left: 0px;">这里有个密码错误的晃动提示，我也采用了一个偷懒的方法，通常来说一个递减 x 轴的 offset 来控制一个左右晃动的效果。而我是在这个输入框通过一个弹性动画来实现的，也就是当输入框刚要向 x轴的偏移 4 个单位的时候，就被强行停止了。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/25/78dbc5805ea36647e8902f3fe8274166.gif" /></figure><p style="margin-left: 0px;">停止的动画是有弹性的，所以还需要多几帧才可以归位到 0。这样就讨巧地实现了一个 shake 的效果。</p><figure class="image ss-img-wrapper"><img alt="当时在家里拍视频的场景" src="https://cdn.sspai.com/2024/03/25/article/38e9c79166a25bb2cb2f744e553b693c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><pre class="language-null"><code> .offset(x: start ? 4 : 0)
 
 //
 
 start = true
 withAnimation(Animation.spring(response: 0.2, dampingFraction: 0.2, blendDuration: 0)) {
 start = false
 }</code></pre><p>&nbsp;</p><h3 style="margin-left: 0px;"><strong>消失弥散过渡效果</strong></h3><p style="margin-left: 0px;">输入框成功的消失动画，使用了一个自定义的复合过渡效果，是带透明度和大小的变化。这也是苹果喜欢用的一个过渡，比如说 ipad 上的 spotlight 的消失效果。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/25/a3b409792df1139613e90d491c475e9b.gif" /></figure><p style="margin-left: 0px;">其实很好理解，结束帧是一个放大和模糊的状态，这里可以控制 radius 和 scale 来控制整个效果，而这个强度的调整其实跟即将消失的物体的大小也是息息相关的。</p><figure class="image ss-img-wrapper"><img alt="当时在家里拍视频的场景" src="https://cdn.sspai.com/2024/03/25/article/c9057fbc83794883fb46f1744df25294.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><pre class="language-null"><code>private struct BlurModifier: ViewModifier {
    public let isIdentity: Bool
    public var intensity: CGFloat

    public func body(content: Content) -&gt; some View {
        content
            .blur(radius: isIdentity ? intensity : 0)
            .opacity(isIdentity ? 0 : 1)
    }
}

public extension AnyTransition {
    static var blur: AnyTransition {
        .blur()
    }

    static var blurWithoutScale: AnyTransition {
        .modifier(
            active: BlurModifier(isIdentity: true, intensity: 5),
            identity: BlurModifier(isIdentity: false, intensity: 5)
        )
    }

    static func blur(
        intensity: CGFloat = 5,
        scale: CGFloat = 0.9,
        scaleAnimation animation: Animation = .spring()
    ) -&gt; AnyTransition {
        .scale(scale: scale)
            .animation(animation)
            .combined(
                with: .modifier(
                    active: BlurModifier(isIdentity: true, intensity: intensity),
                    identity: BlurModifier(isIdentity: false, intensity: intensity)
                )
            )
    }
}</code></pre><p>&nbsp;</p><h3 style="margin-left: 0px;"><strong>动画控制</strong></h3><p style="margin-left: 0px;"><strong>DispatchQueue.main.asyncAfter </strong>是一个常用的方法，用于在主线程上延迟执行代码。这个方法非常适用于需要稍后执行操作，但不阻塞当前线程的情况。这对于改善用户界面的响应性或等待某些条件成熟后再执行操作特别有用。我还喜欢嵌套来使用，比如说在执行了某个指令，完成后0.5秒再执行另外一个指令。这样连加减法的延迟都不用计算了。</p><figure class="image ss-img-wrapper"><img alt="当时在家里拍视频的场景" src="https://cdn.sspai.com/2024/03/25/article/806180770dd0d20a43e338824f6b807e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><pre class="language-null"><code>  DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                                withAnimation {
                                    showSixCards = true
                                }
                                // 再一秒之后显示输入密码
                                DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                                    withAnimation {
                                        showPasswordInput = true
                                    }
                                }
                            }</code></pre><p style="margin-left: 0px;">&nbsp;</p><p style="margin-left: 0px;">完结散花～很高兴能跟大家分享一些设计的小细节，这是一篇设计和技术五五分成的文章，其实可以发现，懂视觉的人不懂技术，经常受限于实现。换句话说，技术限制了你对于设计的想象，而技术有能力实现，但是又缺乏对设计颗粒度的认知，很多开发经常说：“没必要，又看不出来”。他们之间还是隔了一条很大的缝隙，割裂，马里亚纳海沟！社会发展的形态的分工就似乎只让我们“专注”在一个事情，而很多事情的完成本质上一个连贯的多学科复合的事情，至少我是这么理解的。</p><p style="margin-left: 0px;">文章写得比较仓促，尽可能通过图解的方式带大家了解实现的原理，如果对文章有任何困惑或不理解的地方，欢迎反馈。</p><p style="margin-left: 0px;">吉光卡片 App 应用地址：</p><span class="ss-linkCard">&nbsp;</span><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/87558</id>
            <title>一日一技 ｜ Windows 双网卡使用 WiFi 优先上网</title>
            <link>https://sspai.com/post/87558</link>
            <guid isPermaLink="false">https://sspai.com/post/87558</guid>
            <pubDate></pubDate>
            <updated>Tue, 26 Mar 2024 04:42:18 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 校园网, 有线网卡, 无线网, 路由修改
<br>
<br>
总结: 文章介绍了校园网断流问题以及通过双网卡解决方案，通过例子解释了路由原理，推荐了使用GUI软件进行路由修改的方法，以及如何调整默认路由的优先级来解决有线网无法连接互联网的问题。 </div>
                        <hr>
                    
                    <p>最近，学校的校园网不知为何总是偶尔抽风，虽然每次断网的持续时间不长，但这个中断也容易影响学习，每次断网后感觉很多工作无法进行了。但此时的校园无线网又是顺通无阻的，可惜无线网无法连接课题组的服务器。这篇文章就来探索一下鱼与熊掌兼得的解决办法。</p><p>一般情况下，我们不需要考虑有线和无线网卡的问题，只要任意一种能够联通网络即可。但是，如果你遇到了下面的这些情况，那么就需要考虑双网卡的问题了。</p><ul><li>日常工作需要使用有线网连接内网服务器，但是有线网因为未知原因失去了互联网的连接因此无法同时查阅资料；</li><li>在校园正在通过有线连接使用校园网，但想要访问 Steam 或者 SciHub（这类网站一般被加入到黑名单了）；</li><li>在公司有些私人的事情想要完成，但不想通过有线网访问被侦测流量。</li></ul><p>而 WiFi 一般来说可以通过自己的手机作为热点，这样就能绕过很多部署在有线网络背后的限制和断流问题了。</p><h2>通过例子认识原理</h2><p>决定一个网络包（Package）通过哪个物理网卡（Interface）发送数据给其网关（Gateway），主要由路由（Route）中的这 3 个因素决定：</p><ul><li>目标地址 （Destination）</li><li>掩码（Mask）</li><li>优先级 （Metric）</li></ul><p>当一个网络包中的地址加上掩码正好等于目标地址的时候，则该网络包通过本条路由中的指定网卡发送给其网关处理。当然，同一个网络包有可能有多条路由均符合该匹配条件，机器会根据优先级依次判定路由，最长匹配先发送。</p><p>让我们用送快递的例子来解释这个原理。假设你是一个快递分拣中心的经理，你需要根据收件人的地址将快递（Package）分发到两个下级快递投递站。在这个例子中，我们可以将快递员看作物理网卡（Interface），将分拣中心和投递站看作网关（Gateway），而根据路线选择最佳交通工具和路径的过程就是路由（Route）。假设你有两个交通工具（Interface）：电动车（Metric = 1）和小汽车（Metric = 2），以及两个下级投递站：京海市总投递站（Mask：京海市）和京海市青华区投递站（Mask：京海市青华区）。</p><p>假设你看到的收件人地址是京海市青华区养老院。那么，和投递站的掩码一匹配，就能发现应该投递往京海市青华区投递站；Metric 信息可以理解为，一般情况下，用小汽车投递会更快。</p><p>但现实情况下，有时候城市会限行，这种情况下就需要手动调整优先级用电动车来投递了。</p><h2>普通人也能上手的路由修改方式</h2><p>如果使用搜索引擎搜索「windows 使用双网卡上网」，网络上的文章大部分均指向使用管理员权限打开命令行，然后通过一系列的命令操作来更改路由。这种方式不仅需要熟悉命令行，也需要一定的网络知识。相信大多数人看到系统默认的终端就头疼。</p><p>我最后找到一款古老的 GUI 软件「<a href="https://www.nirsoft.net/utils/network_route_view.html"><strong>NetRouteView</strong></a>」，它不仅能够浏览目前的路由信息，也支持更改路由。官网上面表示，该工具支持任何版本的 Windows 系统，从 Windows 2000 到 Windows 11。我在 Win10 下使用了很多次都运行良好。下图是该软件在我电脑下展示的一个路由信息。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/26/article/9886ec925f38922a2e503fd4b000a9ef.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>这个路由表里，我们只关注 Connection Name 这一栏为以太网（Ethernet）和无线网（Wi-Fi）的路由项。在每个网卡下面，都包含了该子网中的路由信息，同时均有一条相对比较特殊的路由（下称默认路由），其目标地址和掩码均为 0.0.0.0，且该路由的优先级比同网卡下其它的路由项优先级都要低。默认路由是对网络包中的目的地址找不到存在的其他路由时所最终选择的路由。</p><p>我们通过手动分析路由表的优先级可以发现，以太网的默认路由的优先级比无线网的默认路由的优先级要高，因此当用户访问外网互联网时，会优先选择以太网的默认路由。然而，在本文的上下文里，有线网因为一些原因无法正确连接互联网，就造成了本文开头提及的问题。</p><p>因此，我们的解决方案也很显而易见了。我们需要让外网互联网请求优先走 WiFi 无线网的默认路由而不是有线网的默认路由。在 NetRouteView 这款软件里可以这么更改，选中默认路由右击编辑，<strong>将两个默认路由的优先级 Metric 互相对调一下</strong>。以我图中的信息为例，将图中红色的 65 改为 55，然后将蓝色的 55 改为 65，就可以了。由于这两条默认路由的优先级均为各自网卡路由项的最低，因此修改它们并不影响那些内网服务的路由请求优先匹配。</p><p>这样一来，内网的有线连接不会受到影响，而外网的请求又会优先走无线连接，从而达成了我们的目标。如果优先网络恢复后，想要恢复原来的路由设置，除了可以再次交换两个默认路由的优先级以外，还可以重启电脑，该路由表的最后一栏 Persistent 表明了这些路由项均非持久化，重启后会即可恢复，所以即使修改出问题了也不怕。</p>
                ]]>
            </content:encoded>
        </item>
        
        <item>
            <id>https://sspai.com/post/86747</id>
            <title>自我记录、量化与回溯的数字之旅</title>
            <link>https://sspai.com/post/86747</link>
            <guid isPermaLink="false">https://sspai.com/post/86747</guid>
            <pubDate></pubDate>
            <updated>Fri, 01 Mar 2024 06:50:03 GMT</updated>
                
                
            <content:encoded>
                <![CDATA[
                    
                        <div> 关键词: 平衡, 自我记录, 地理位置, 量化
<br>
<br>
总结: 本文介绍了作者在自我记录、量化与回溯的数字之旅中的体验和思考，包括对地理位置的记录、财务管理、健康、时间追踪和设备状态等方面的量化。通过介绍世界迷雾和Rond两款应用的使用体验，以及在Rond中记录电影观影和情侣活动的方式，展示了如何通过数字化记录来平衡生活中的各个方面。 </div>
                        <hr>
                    
                    <p>「本文参加 2023 年度征文活动。我的 2023 年度关键词是：平衡」</p><p>写在最前：由于我主要是苹果全家桶用户，所以本文涵盖的App和服务主要为iOS相关。</p><h3>引入</h3><p>初中的时候，每次期中或期末考试，成绩出来后班主任会给每个人发张小纸条，其中包含各个科目的分数和总成绩排名，然后别出心裁地，纸条中还包含了上几次考试的个人名次，让我们贴到一本“告家长册”中带回家给父母过目。通过这么一个小小的横条，学生一段时间的努力与否有了直观的展现，家长有了奖惩的依据，也知道下阶段的教育计划如何“推进”。</p><p>随着年龄渐长，特别在拥有智能设备后，我逐步接触到量化自我这个概念，并身体力行地开始量化生活的各个方面，但回想起来，初中的那根横条大概便是我对量化自我最早的认知。</p><p>然而随着对量化自我的实践，我认识到并非所有数据都值得量化，有些东西的量化可能只是对生活的记录留痕。拿游戏做比喻的话，有些记录像是足迹模式和成就系统，有些记录则只是背包中的物品，只是你时不时想打开背包确认一下。</p><p>恰逢年度征文活动，我也突发奇想，给各位看官总结一下我在自我记录、量化与回溯的数字之旅。总的来说，我将自己的记录大致分为以下几类，地理位置，财务管理，健康，时间追踪，设备状态等。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/02/29/5e23790b9d6a721e2c6962bf0dc1b331.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>地理位置</h3><p>之前写过一篇地理位置记录相关的内容（<a href="https://sspai.com/post/85355">App+1 | Rond 与世界迷雾：现实世界的塞尔达传说地图册</a>），便不再针对应用展开详细介绍。简而言之，目前使用的是世界迷雾和Rond两款应用，世界迷雾用来做地图标记，精确记录去过的地点，而Rond用来做时间线标记，由此可衍生基于地点的追溯与分析。两款应用的理念我都非常喜欢，同时，在我开始工作之后，我深感杂事的繁多以及记忆力的衰退，倘若记录下的数据可供我回想起某一天的某些事情，那可算帮了大忙，而这两款应用便有其各自的用途。</p><h4>世界迷雾</h4><p>我偶尔会点开世界迷雾，拉到世界地图大小，看看自己点亮的地方，并暗自谋划下一段旅行的目的地，有的时候又放大看看之前点亮过的一段路，可能是一段十几公里的徒步，也可能是一段弯弯曲曲的山路，然后回想起当时旅途的点点滴滴。照片App中按地图显示照片也是类似的体验，只不过一个更注重时刻与影像，一个更注重路线，颇为互补。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/03/01/cfadd84facf4ff4ea19e254118b3ec79.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/03/01/31dc321bf7b8925659e2b110eede458f.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h4>Rond</h4><p>Rond则是另一种体验，或者说它更多是对生活的一种记录，倘若你经常不记得你在哪一天去了哪里，那你一定得试试Rond，也可看一下我之前文章中更详细的介绍。而在继续使用Rond的这段日子里，我又发现了一些有趣的使用方式。</p><p>电影记录</p><p>我之前曾使用过Mark、豆瓣、Apollo（<a href="https://sspai.com/post/72871">影视爱好者不能错过的 App：用 Apollo 打造专属影视信息库</a>）等app或网页来记录自己看过的电影，然而使用最多的Mark在App Store已经悄然下架，而豆瓣则无法更改观影时间，Apollo需要收费（是我的问题），现在反而没有趁手的观影记录工具。此外，我也并不喜欢给电影打分或写大段的观影体验。在去过几次电影院后，我打开Rond，发现稍微花点心思便可以同时记录电影院位置、观影时间、影片名称后，转念一想，这不就是我所需要的吗。而点开「看电影」活动页面，你还可以看到看电影的热力图、平均时长等等统计信息，更能反映个人观影习惯。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/02/28/68fb01b508cae0270f9aa36603920873.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/02/28/563799d3a73ded69c96251ad92d4bd22.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>总结一下，Rond记录的是你看电影这个行为，而不是影片本身，所以不会有影片海报，评级等，不过对我来说这就够了。其他的各类基于地点的活动也同理，我记录的活动有「按摩」、「理发」、「洗车」、「滑雪」、「逛街」、「户外活动」、「博物馆」等，只要你愿意进行细致的分类，你的生活会更加一目了然。我基于颜色对各类活动进行了划分，绿色表示户外活动或旅行，黄色表示餐饮（餐厅、馆子、食堂），蓝色表示工作或活动，以便更直观地在统计视图中看到自己的生活组成。</p><p>情侣活动记录</p><p>除此之外，Rond也非常适合情侣间的活动记录，除开对「活动」的分类，Rond还可以对每个地点添加标签，因此我增加了一个代表约会的标签，将我们两个人单独出行的地点都添加上标签。然后再点开相应标签页面，便可以用热力图和柱状图的形式展示两个人出行的频率和活动类别，结合上面的颜色分类，也能直观地看到那一天到底是去下了个馆子，还是爬了爬山。当然跟好朋友，跟父母，都可以以这种方式来记录。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/02/29/c063b26e48819d4fee18ce55ee116704.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/02/29/ad3a3dbb61d054020eed3189259bb234.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>财务记录</h3><p>财务相关的记录也是我很早便开始实践的项目，在学生时代并没有什么收入，因此需求非常简单，只要统计一下消费支出，知道自己把钱花在哪里。</p><h4>记账类App概述</h4><p>一开始，我使用的也是记账类App，如Timi时光记账、随手记、网易有钱等。16年在日本交换的时候，由于大部分情况只能用现金消费，我使用了一整年的随手记。回国后我尝试继续坚持，但最终还是输给了懒惰和强迫症。记录一次很简单，记录一生很难，但凡漏记那么一两次，强迫症就会让我很难受，特别是我还执着于输入精确的数目和时间点，久而久之，记录反而成了负担。</p><p>后面看到网易有钱主打的自动化记录（<a href="https://sspai.com/post/39304">记账嫌麻烦？不如让「网易有钱」自动帮你记</a>），非常心动，也尝试了一段时间，但是同步支付宝和银行卡功能在一段时间后经常出错，还有不支持的账户则需要导出各类消费记录，再考虑到存在一定的隐私泄露风险，最终还是放弃了。</p><p>渐渐地，我转变思路，尝试将生活中大部分消费通过支付宝完成，然后通过支付宝的账单看每个月的支出金额和种类，这个策略足够简单和有效，而且确实做到了高度自动化，目前还在坚持。不过由于无法避免微信支付的使用以及通过银行卡的一些消费，支付宝的账单分析仍无法做到对个人消费记录的完全覆盖。</p><h4>MoneyThings</h4><p>21年我又出国交换了一年，出国前我意识到我还是需要一个记账App，因为国外的电子支付没那么发达，我还是会频繁用到现金和信用卡，信用卡又会涉及到汇率换算的问题，因此我尝试寻找一个新的，简约美观的记账App。有一天逛少数派时，我看到了对MoneyThings的介绍 （<a href="https://sspai.com/post/66390">MoneyThings - 钱去哪了，不一样的记账软件</a>），非常喜欢其简洁原生的界面，以及一些新颖的功能，马上便下载下来试用。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/03/01/1160dce4e11e86d13310952208abe4d4.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>借用一下作者文章的题图</figcaption></figure><p>通过构建不同的账户记录不同账户、不同币种的支出，然后进行消费的分类，这些功能都与其他竞品别无二致。然而MoneyThings在2021年提供的消费活动热力图，第一次让我爱上这种一目了然的展示方式，透过热力图，你可以很直观地在日历视图上看到消费的频率，通过颜色的深浅又可以看到消费金额的多少。不知道热力图这种形式是不是由Github发扬光大的，但近几年来，各类App中越来越多出现了这种数据展现形式。</p><p>而除开这个，MoneyThings还有一个特色的功能叫做One Touch，即某些高频次的消费行为，如学校食堂的午餐，你设置好消费金额、种类和备注，通过点击这个按钮，便可以一键添加一项消费记录。这个功能还可以添加到快捷指令，通过负一屏或者Apple Watch点一下，便可以添加消费记录而不需要打开App。这项功能确实消除了高频记录的繁琐，并且可以添加多个One Touch按钮进行不同高频消费的记录，也是我当时决定付费MoneyThings的理由。</p><p>甚至，当时我尝试使用MoneyThings代替张子恒老师的Aphrodite App的功能（<a href="https://sspai.com/post/70238">为什么要记录性生活？谈谈开发 Aphrodite 背后的故事</a>），通过新建一个“精力值”账户来进行相关的记录，MoneyThings彼时还支持单独账户的热力图展示。</p><p>当然，MoneyThings本身还有许多特色的功能，而我的需求可能只需以上的功能便可满足。再然后，随着MoneyThings 10.0版本的更新，作者进行了大刀阔斧式的改动，记录界面发生了较大的改动，用户们意见不一。而分析界面也随着更新发生了变化，类似单独账户的热力图等功能不再支持，随着我结束在国外的交换，慢慢地便回到支付宝记录的方式，而MoneyThings虽然陆续加入支付宝和微信账单导入功能，但是也不能对两者不同的分类逻辑进行统一，再加上用户积累的各类意见，App渐渐处于半停更状态，最近的几次更新停留在bug的修复上。</p><h4>资产记录的需求</h4><p>而除开以上消费记录类的App，我在19年左右对自己的账户余额有了更多的兴趣，当时刚成为研究生，开始有了一笔小小的工资，又多了一张信用卡。钱散在各个账户中，有时无法知道自己手里到底还有多少钱可用，多少钱投在基金中，因此我开始尝试在iPhone的备忘录中建立一个简单的表格来记录各个账户的余额。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/02/28/8a7c10800ace15f5f190efea94024137.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>备忘录记录资产</figcaption></figure><p>由于备忘录并没有统计功能，我在几次记录后便将数据转到Excel中，尝试做一些简单的图表统计，来观察各个账户的变化。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/02/28/a5596b20f97805b741383a9ec8470c00.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Excel记录和展示资产变化</figcaption></figure><h4>Percento</h4><p>偶然一天逛少数派的时候，看到Percento的介绍文章（<a href="https://sspai.com/post/66095">Percento - 如何「不记账」来管理金钱</a>），惊为天人，简约的界面，好看的配色，配上更便捷的记录和分析，我一试用便爱不释手，并马上付费永久会员，现在去文章评论区还有我痛失会员抽奖的哀嚎（笑）。几年更新下来，作者添加了一些新的功能，但还是非常克制地专注于资产记录，保持小而美。目前我固定在每月一号对资产进行更新，时不时点开看一眼资产情况，在这个经济形势不好的时代，或许能多一丝慰藉和安心。而在趋势图中，也能看到自己的资产如何一点点累积，偶尔的几次下降也代表着购入想要已久的好物，或是一次难忘的旅行。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/02/28/4b54c5c8e7e5dbef0114499e6cc71c74.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/02/28/041f15f40cc3fcaf0b674a07978d8931.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>点开左侧的颜色条，可以看到自己的资产配置情况，而在最近的更新后，点开某一项资产，也可以看到具体的账户占比，更加实用了。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/02/28/fa5756b3211a3c59082cf06c94e6a72a.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/02/28/972834248e78f14335d4562e3f524014.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>之前站内有篇文章也体现了类似的的理念（<a href="https://sspai.com/post/85711">欢迎来试试我们的App：Flourish 如是记录</a>），提供了更方便的跳转app进行记录功能，但是目前App还不完善，希望可以慢慢发展，提供不一样的见解和分析思路。</p><h4>身心健康</h4><p>健康类App在前几年的量化自我浪潮中不断涌现，然而iPhone自带的健康App随着其不断的功能更新与迭代，基本可以满足绝大部分人的需求。除开基础的步数、心率等手环级功能，健康App逐步囊括经期跟踪、睡眠监测、心理健康、用药等功能，每一个脚印背后都是诸多第三方App的“尸体”。而如果你拥有Apple Watch，你还可以跟踪健身记录、心率、心电图、血氧水平等。由于健康App功能上日渐丰富，更多App把目光放在了数据的集合和展示上，站内也有许多文章进行了相关的介绍（<a href="https://sspai.com/post/72761">有了这些第三方 App，你的 iOS 健康数据还能更好用</a>）。</p><p>我个人则更喜欢健身App，与Apple Watch配合使用，可以记录各种各样的体能训练。记得第一次戴着Apple Watch游泳后，我惊讶于它居然还能自动识别我的泳姿。而倘若你喜欢徒步，也一定要记得用Apple Watch记录，在结束后，除了基础的距离，卡路里等数据，还会生成一个地图上的轨迹记录，我是老轨迹记录爱好者了（笑）。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/02/29/e398326e84781ce50690bb2ef620e7bd.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/02/29/d4244b33861fbc083bf8e4dccd21a88b.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>我也非常喜欢健身App中三个健身圆环的设计，还有每次成功合上圆环后手表的震动以及恭喜的动画。一段时间后，点开日历视图，可以看到每天的圆环罗列，想到自己哪天大汗淋漓了一场，又是哪个周末在家躺了一天，我曾经非常喜欢的一个睡眠追踪App - AutoSleep应该也是参照了这个圆环型的设计。类似游戏中成就系统的奖章设计也进一步激发了把圆环合上的欲望，倘若在一些特殊的日子里完成挑战（往往是通过「钓鱼」或者「瑜伽」），还可以获得设计精美的限量奖章。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/02/29/9e872c79c81e939cf60ad989173b2a43.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/02/29/934e609effccd8109ad8b2d3f59c9835.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>在主页下方，还可以看到自己各类活动趋势的变化，方便了解自己是否正在变得更勤快，还是更加懒散。当然在共享页面，也可以如微信运动那样，与朋友展开一场合上圆环的竞争。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/02/29/5ca9d1521ec74f19d44d56f276c7ae34.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/03/01/c696ffb333b1c389bb7e777b9c716880.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h3>时间追踪</h3><p>我在时间追踪方面也进行过各类尝试，最早接触的是aTimeLogger 2（<a href="https://sspai.com/post/25230">我的时间去哪儿了：aTimeLogger 2</a>），然后发现每次开始或结束一项活动都要手动点击，这实在是需要耗费太多精力，所以不到一周，我便放弃了。后续的一些App转向更模糊一点的记录（<a href="https://sspai.com/post/56012">时间块：记录自己的时间，才能和时间做朋友</a>），但是这类手动的形式还是让我望而却步。在尝试手动记录失败后，我转向探寻自动化记录时间的可能。</p><p>倘若只想记录手机的使用时间，那么iOS自带的屏幕使用时间足够好用（<a href="https://sspai.com/post/59215">如何用屏幕时间进行自我管理？灰色条究竟是什么？</a>），只需要打开设置，使用一段时间，便可以看到每日的使用时间与趋势，以及各个App的时间占比。当然，如果你使用Mac或者iPad，也可以打开设备共享来看多个设备的总使用时间。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/03/01/6b7f247489504d93b3b56fd9f305c541.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/03/01/129259e2284d00205b43c279d23301bd.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>OffScreen（<a href="https://sspai.com/post/60275">[送码] 少用手机多专注，帮你戒掉「手机瘾」：OffScreen</a>）在此基础上，增加了对时间节点、手机运动状态、亮屏时长的监控，可以统计一些更有意思的数据，代价是需要常驻后台，或许会增加些许耗电。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/02/29/ddb20d0a27f66b2f0624c7fc254f57e8.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/02/29/269c57ce533e4da6d0f3bbfaa907987b.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>而在使用电脑时，我想要对设备的使用有更具体、细化的记录与分析，RescueTime在一番搜寻后映入眼帘。它既是一个软件，也可以算一项服务，通过下载客户端登录账号，它便可以在后台默默记录你在电脑上的行为，根据活跃的网页地址或程序名称，将行为进行分类。而要想看到具体的数据与分析，则需要登录它的网站，来查看各项活动的时长占比等数据。</p><p>第一次进入统计与分析页面，需要对各类网站和程序选择分类，如工具类，软件开发，社交传媒，交流沟通等，后续同样的网站和程序产生的活动便会自动归到这个分类下。主要的活动大体会分为工作与娱乐，在统计图中分别用蓝色和红色进行展示。</p><p>在每日视图下，可以看到随时间的柱状图显示着不同时间段的行为，比如我这一天便是在早中晚饭后刷刷新闻资讯，而在工作时间则异常专注，甚至工作到深夜，简直不像我自己。中间的圆环根据干活和娱乐的比例算出一个分数，显示为今天的效率分，而右侧则显示每个分类的具体占比。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/02/29/43af0c7930b991e552be74deb4616873.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>RescueTime 每日看板</figcaption></figure><p>当然，RescueTime还有一些其他的统计功能，按月或按年显示，或是看每个分类中的应用比例，以及一些趋势变化。我基本上给每台设备都安装了RescueTime，甚至iOS端也有RescueTime App。</p><p>然而RescueTime也有一些缺点。首先，作为免费用户，你只能查看最近三个月的数据，而且数据存储于服务器上，你的隐私并不能得到完全的保障。但你也可以选择导出原始数据，自己进行分析，Github上也有类似的项目（<a href="https://github.com/ilbonte/rescuetime-again">ilbonte/rescuetime-again: More charts using RescueTime's API</a>）。其次，RescueTime的分类是内置的，无法修改，可能无法完全贴近个人习惯。</p><p>某日，我在闲逛Github，发现了ActivityWatch这个开源软件（<a href="https://github.com/ActivityWatch/activitywatch">ActivityWatch/activitywatch: The best free and open-source automated time tracker. Cross-platform, extensible, privacy-focused.</a>），其与RescueTime的理念类似，但是开源属性让其具有本地运行，分类扩展性高等特性。同时，除了软件名和网页地址，它还会监测活跃窗口的标题，可以方便进行更细化的分类。由于内置的分类极其简陋，我花了一段时间记录数据并进行分类，分类的颜色可以自定义，我将工作、娱乐、交流、工具类分别用不同颜色分开，以便更加一目了然看到自己的电脑使用时间组成。在主页右下角的分类环也可以直接显示一级和二级分类占比。由于ActivityWatch的高度可定制性，Github上也存在一些扩展项目，方便你记录一些其他项目，比如监控并记录CPU的使用情况。</p><p>当然，ActivityWatch目前还不是非常完善，它只适用于电脑端，而且设备间数据不互通，偶尔也会遇到分类不完善导致的一些统计错误，需要你花更多的心思。但作为RescueTime的补充项目，确实能够提供不一样的数据见解。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/02/29/5aae6d7445c11111f2ca158388dd8436.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Activity Watch 主页</figcaption></figure><h3>设备与物品的记录</h3><p>在上述传统的量化自我项目之外，我在接触数码设备过程中慢慢养成了一个习惯，就是记录身边设备和物品的状态。而针对不同的记录类型，我也选择了不同的App进行记录。</p><h4>备忘录记录设备状态</h4><p>在iPhone爆出会因电池老化而降低性能的新闻（<a href="https://sspai.com/post/43192">电池健康功能加入 iOS 11.3，苹果不会因为电池原因「故意」让你的 iPhone 变卡了</a>）后，我开始关注起我手里这台设备的状态。在iOS加入电池健康显示后，我便时不时点开看一下，后面我发现定期记一下比单纯看一下更有意义，还可以观察长期使用下来的变化。比如我手中的这台iPhone 14 Pro，在刚购入的六个月内，电池健康度都保持100，但第七个月一个月内便下降到96，第八个月进一步下降到92，属于一泻千里型选手，然而据我上一台手机的经验，它在85-88的时候，又会停留很长一段时间。</p><p>同时，MacBook Air M1在发售后也爆出由于内存逻辑，会存在疯狂读写固态硬盘的情况（<a href="https://www.zhihu.com/question/450889413">M1 MacBook存在SSD过度读写是真的吗? - 知乎</a>），于是我也开始进行针对性的记录，每个月记录一下硬盘读写情况。</p><p>以上这类定期的简单记录，我都选择在备忘录里完成，每个月一号，除了资产的更新，我将手里设备的状态也进行一个简单记录，包括各个设备的电池健康度、硬盘读写、以及车的里程等，或许等后面有空还可以搬到Excel中再做一些图表，方便来更好地追踪设备状态变化。也或许有哪位开发者有兴趣随手开发个类似的App，我将感激不尽。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/03/01/19b10b4f2c075ec93b2a0646278f4bdb.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/03/01/f649ed2bbfddde43663dbc8d1b9a05bf.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h4>Notion 记录设备列表</h4><p>除开设备状态的定期更新，我个人也是一个数码产品爱好者，因此也会想要记录购入数码产品的过程。Notion的表格非常适合用来进行这方面的记录，除了数码产品的购入日期、价格，我还会将来源和分类加到Tag里面，并用颜色区分开。当然，Notion在我手里无法实现太复杂的分析，如果导出原始数据，或许可以根据时间、价格和分类来观察每年在数码产品的消费变化，以及各类产品的消费比例，有助于判断自己的消费习惯。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/02/29/f3cfd0a38a33e2cfb1fa27cd158e4541.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Notion 记录设备</figcaption></figure><p>而涉及到购置，我在Notion中也建立了一个愿望清单，每次遇到想要的数码设备，都会先加入清单，记录下添加日期和价格。这样做有两个潜在的好处，一方面，我给自己定下的规定是数码设备类的大额或非刚需消费至少要在种草后一个月，因此可以先放到愿望清单里，等一个月后冷静后再回头看。另一方面，当你钱包没那么鼓的时候，愿望清单可以帮助你更好地判断你最想要的东西。</p><figure class="image ss-img-wrapper"><img src="https://cdn.sspai.com/2024/02/29/880e990e4bb52de5ba905976140ea5d4.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><figcaption>Notion 愿望清单</figcaption></figure><h4>Day One 记录设备照片墙</h4><p>当然Notion的表格记录还是无法满足我对所拥有设备的“展示欲”，因此我利用Day One构建了类似游戏墙的设备日历流。在Day One中，通过新建一个单独的「Sets」笔记本，我记录下数码设备的购入日期、购入地点、设备型号以及产品图片，这样在切换至媒体页面时，便可以看到按日期双列排布展示的设备。能够添加展示图片是我使用Day One的理由，偶尔打开Day One，切换到媒体页面，从上面一路滑到底，就可以看到自己设备的更新历史，或许很多设备早已退役或损坏，但是看着照片回想每个设备到手的那一刻，我一定都是欢呼雀跃的。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/03/01/304d39eaf0d6122bacee0e15c8d21c3f.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/02/29/483500af8a738eaa649f46032ec0be80.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><p>同样的操作也可以用在衣柜管理上，只不过衣物官方图片的搜寻需要花费更多的心思，可以试着在官方网站，国外购物网站上搜寻型号进行下载。同时我也发现京东App内保存的图片会有水印，但是手机用京东网页版保存则不会有水印。当然，也可以通过得物进行类似的记录。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/02/29/618ab66b50ff6b983c29dd765976b581.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/02/29/0e1508fd43876c9c80549bb6c47a5076.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h4>Jump App 记录游戏</h4><p>在游戏方面，尽管我也用Day One做过一些尝试，但是有更完善的各类App能更便捷地展示各类游戏墙。由于我主要玩任系游戏，我选择Jump App来进行游戏记录，你可以手动搜索游戏并点击「拥有」来添加到游戏墙上，也可以登陆Switch或Steam账号来同步游戏的游玩记录（虽然可能有小bug，比如旷野之息我应该玩了100多个小时但是只显示22小时）。除此之外，如果你是位PS或Xbox玩家，对应的系统中也有丰富的成就系统供你探索。</p><figure class="ss-imgRows"><img alt="" src="https://cdn.sspai.com/2024/02/29/13e7522a589fcae83b684f8638765887.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /><img alt="" src="https://cdn.sspai.com/2024/02/29/59475c0e1e88359ff39733288a30d101.PNG?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" /></figure><h4>结语</h4><p>在写这篇文章之前，我也没想到我居然做了这么多大大小小的记录。无论是量化自我，还是其他记录，我一直在找寻最趁手的工具。我不希望记录的过程成为负担，因此尤其喜欢自动化、轻量化的工具。但是在某些方面，我也愿意记录地仔细一点，满足自己奇怪的强迫症，可能就像手办那样，展示是它最好的用途。</p><p>文中涉及到的一些记录模式，仅供大家参考，每个人都会有自己的偏好，我很容易只用到某些App或软件中一些小点，满足自己特定的需求，倘若大家有更好的方式，也欢迎分享在评论区。</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p>
                ]]>
            </content:encoded>
        </item>
        
    </channel>
</rss>